{"version":3,"sources":["webpack:///logger.js","webpack:///webpack/bootstrap c8a99fba08b353983452","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/Enums.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/Utils.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTNotificationManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTTransmissionManagerCore.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTEventProperties.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.primitives.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/Enums.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTSerializer.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTSemanticContext.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTAutoCollection.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/DataModels.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogger.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTStatsManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/Version.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogManagerSettings.js","webpack:///./src/index.ts","webpack:///./src/logger.ts","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AriaSDK.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTQueueManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTHttpManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/bond_const.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.encoding.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.floatutils.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.utils.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.io.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTRetryPolicy.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTKillSwitch.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTClockSkewManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTRecordBatcher.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTTransmissionManager.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","value","AWTPropertyType","AWTPiiKind","AWTCustomerContentKind","AWTEventPriority","AWTEventsDroppedReason","AWTEventsRejectedReason","numberToBondInt64","bond_value","microsoft_bond_primitives_1","Int64","low","high","Math","floor","newGuid","replace","GuidRegex","r","random","toString","isString","msToTicks","timeInMs","MSTillUnixEpoch","MSToTicksMultiplier","getTenantId","apiKey","indexTenantId","indexOf","substring","isBeaconsSupported","beaconsSupported","navigator","Boolean","sendBeacon","isUint8ArrayAvailable","uInt8ArraySupported","Uint8Array","isSafariOrFirefox","isReactNative","isPriority","isNaN","sanitizeProperty","type","Enums_1","Unspecified","PropertyNameRegex","test","undefined","sanitizePropertyType","pii","NotSet","cc","isPii","isCustomerContent","getISOString","date","getUTCFullYear","twoDigit","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","threeDigit","getUTCMilliseconds","useXDomainRequest","useXDR","conn","XMLHttpRequest","withCredentials","XDomainRequest","product","isPropertyType","String","Double","getCorrectType","userAgent","ua","toLowerCase","EventNameAndTypeRegex","EventNameDotRegex","StatsApiKey","AWTNotificationManager","addNotificationListener","listener","this","listeners","push","eventsSent","events","_this","this_1","length","setTimeout","eventsDropped","reason","this_2","eventsRetrying","this_3","eventsRejected","this_4","default","DataModels_1","AWTQueueManager_1","AWTStatsManager_1","AWTEventProperties_1","AWTLogManager_1","Utils","AWTTransmissionManagerCore","setEventsHandler","eventsHandler","_eventHandler","getEventsHandler","scheduleTimer","timer","_profiles","_currentProfile","_timeout","_paused","hasEvents","_currentBackoffCount","_batchAndSendEvents","_timerCount","initialize","config","_newEventsAllowed","_config","collectorUri","cacheMemorySizeLimitInNumberOfEvents","httpXHROverride","_initializeProfiles","stats","tenantId","canSendStatEvent","event_1","setEventPriority","High","setProperty","statKey","getLogger","logEvent","setTransmitProfile","profileName","clearTimeout","loadTransmitProfiles","profiles","_resetTransmitProfiles","j","timerMultiplier","ceil","sendEvent","event","addEvent","flush","callback","currentTime","Date","getTime","_lastUploadNowCall","uploadNow","pauseTransmission","resumeTransmision","resumeTransmission","flushAndTeardown","teardown","backOffTransmission","clearBackOff","AWT_REAL_TIME","priority","Low","Normal","sendEventsForPriorityAndAbove","AWTEventProperties","_event","properties","setName","getName","setType","getType","setTimestamp","timestampInEpochMillis","timestamp","getTimestamp","getEventPriority","setPropertyWithPii","setPropertyWithCustomerContent","customerContent","getPropertyMap","getEvent","numberStr","parseInt","_Equals","tmp","UInt64","Number","_ToByte","_ToUInt8","_ToInt32","_ToUInt32","AWTUserIdType","AWTSessionState","Bond","AWTSerializer","getPayloadBlob","requestDictionary","tokenCount","stream","IO","MemoryStream","writer","CompactBinaryProtocolWriter","_WriteFieldBegin","_BondDataType","_BT_MAP","_WriteMapContainerBegin","_BT_STRING","_BT_LIST","token","_WriteString","dataPackage","_WriteContainerBegin","_BT_STRUCT","_BT_INT64","_WriteInt64","now","_WriteBlob","serializedEvent","_WriteStructEnd","_GetBuffer","getEventBlob","eventData","id","propsString","propStringCount","propsInt64","propInt64Count","propsDouble","propDoubleCount","propsBool","propBoolCount","piiProps","piiPropCount","ccProps","ccPropCount","key","_BT_INT32","_WriteInt32","_BT_BOOL","_WriteBool","_BT_DOUBLE","_WriteDouble","base64Encode","data","_Encoding","_Base64_GetString","AWTAutoCollection_1","Enums_2","AWTSemanticContext","_allowDeviceFields","_properties","setAppId","appId","_addContext","setAppVersion","appVersion","setAppLanguage","appLanguage","setDeviceId","deviceId","checkAndSaveDeviceId","setDeviceOsName","deviceOsName","setDeviceOsVersion","deviceOsVersion","setDeviceBrowserName","deviceBrowserName","setDeviceBrowserVersion","deviceBrowserVersion","setDeviceMake","deviceMake","setDeviceModel","deviceModel","setUserId","userId","userIdType","inferredUserIdType","SipAddress","PhoneNumber","SmtpAddress","EmailAddress","Unknown","Skype","Identity","_addContextWithPii","setUserAdvertisingId","userAdvertisingId","setUserTimeZone","userTimeZone","setUserLanguage","userLanguage","DEVICE_ID_COOKIE","FIRSTLAUNCHTIME_COOKIE","BROWSERS","MSIE","CHROME","FIREFOX","SAFARI","EDGE","ELECTRON","SKYPE_SHELL","PHANTOMJS","OPERA","OPERATING_SYSTEMS","WINDOWS","MACOSX","WINDOWS_PHONE","WINDOWS_RT","IOS","ANDROID","LINUX","UNKNOWN","OSNAMEREGEX","WIN","WINRT","WINPHONE","OSX","VERSION_MAPPINGS","5.1","6.0","6.1","6.2","6.3","10.0","AWTAutoCollection","addPropertyStorageOverride","propertyStorage","_propertyStorage","autoCollect","semanticContext","disableCookies","_semanticContext","_disableCookies","_autoCollect","_autoCollectFromUserAgent","_deleteCookie","_areCookiesAvailable","_autoCollectDeviceId","_getData","_saveData","firstLaunchTime","document","documentElement","lang","language","timeZone","getTimezoneOffset","minutes","hours","timeZonePrefix","abs","browserName","_getBrowserName","_getBrowserVersion","osName","_getOsName","_getOsVersion","_userAgentContainsString","searchString","_getIeVersion","_getOtherVersion","classicIeVersionMatches","match","RegExp","ieVersionMatches","browserString","matches","_getWindowsVersion","_getMacOsxVersion","ntVersionMatches","macOsxVersionInUserAgentMatches","versionString","delimiter","_getDelimiter","split","setTime","expires","toUTCString","cookie","getProperty","ca","charAt","AWT_NEAR_REAL_TIME","AWT_BEST_EFFORT","AWTNotificationManager_1","AWTTransmissionManagerCore_1","AWTLogManagerSettings_1","Version","AWTSemanticContext_1","AWTLogger","_apiKey","_contextProperties","_sessionStartTime","_createInitId","setContext","setContextWithPii","setContextWithCustomerContent","getSemanticContext","loggingEnabled","defaultTenantToken","sanitizeProperties","eventReceived","_logEvent","_getInternalEvent","logSession","state","sessionEnabled","sessionEvent","_addPropertiesToEvent","Started","_sessionId","Ended","sessionDurationSec","_getSessionDurationFromTime","getSessionId","logFailure","signature","detail","category","failureEvent","logPageView","pageName","uri","referrerUri","pageViewEvent","_initIdMap","propertiesEvent","name_1","timeInSec","eventWithMetaData","contextProperties","InvalidEvent","name_2","_addContextIfAbsent","logManagerContext","_setDefaultProperty","_getInitId","_getSequenceId","FullVersionString","toISOString","_sendEvent","name_3","internalEvent","_sequenceIdMap","AWTStatsManager","sendStats","_sendStats","_isInitalized","_addStat","_stats","statName","AWTLogger_1","AWTLogManager","tenantToken","configuration","_isInitialized","_overrideValuesFromConfig","disableCookiesUsage","propertyStorageOverride","_isDestroyed","_loggers","sendPOST","eventName","AWTLogManagerSettings","Log","level","action","content","attrs","title","url","URL","JSON","stringify","logger_1","telemetry","LEVEL","LogLevel","log","ARIA_SCRIPT","getElementById","console","assert","CONFIG","dataset","TOKEN","toLocaleLowerCase","USER_ID","userid","CORELATION_ID","corelation","APP_NAME","appname","location","hostname","LOG_TABLE","table","VERBOSE","_originConsole","init","CorelationId","UserId","apply","arguments","forEach","args","_i","unshift","window","onbeforeunload","onerror","msg","line","col","error","file","_logger","webjs_sdk_1","_token","_name","_table","AWTTransmissionManager_1","AWTTransmissionManager","AWTSerializer_1","AWT_COLLECTOR_URL_UNITED_STATES","AWT_COLLECTOR_URL_GERMANY","AWT_COLLECTOR_URL_JAPAN","AWT_COLLECTOR_URL_AUSTRALIA","AWT_COLLECTOR_URL_EUROPE","AWTHttpManager_1","AWTRecordBatcher_1","RequestSizeLimitBytes","AWTQueueManager","collectorUrl","_queueSizeLimit","xhrOverride","_isCurrentlyUploadingNow","_uploadNowQueue","_shouldDropEventsOnPause","_queueSize","_outboundQueue","_inboundQueues","_addEmptyQueues","_batcher","_httpManager","QueueFull","_batchEvents","sendQueuedRequests","hasBatch","hasIdleConnection","addBackRequest","request","_uploadNow","pause","shouldDropEventsOnPause","removeQueuedRequests","resume","_removeFirstQueues","shift","priorityToProcess","pop","addEventToBatch","flushBatch","_checkOutboundQueueEmptyAndSent","isCompletelyIdle","AWTRetryPolicy_1","AWTKillSwitch_1","AWTClockSkewManager_1","Method","AWTHttpManager","_requestQueue","_queueManager","_httpInterface","_urlString","_killSwitch","_clockSkewManager","_useBeacons","_activeConnections","urlString","ontimeout","onload","sync","xdr","open","send","fetch","body","method","then","response","headerMap","headers","status","catch","xhr_1","_convertAllHeadersToMap","getAllResponseHeaders","allowRequestSending","_sendRequest","retryCount","isTeardown","apikey","isTenantKilled","KillSwitch","blob","shouldAddClockSkewHeaders","getClockSkewHeaderValue","_retryRequestIfNeeded","_handleRequestFinished","shouldRetry","killedTokens","setKillSwitchTenants","setClockSkew","shouldRetryForStatus","getMillisToBackoffForRetry","success","NonRetryableStatus","headersString","headersArray","header","bond_const_1","_stream","_Write","_WriteByte","size","elementType","_WriteUInt8","_WriteUInt32","keyType","valueType","array","_Double_GetBytes","metadata","_Zigzag_EncodeZigzag32","_WriteUInt64","_Zigzag_EncodeZigzag64","_Utf8_GetBytes","isBase","_BT_STOP_BASE","_BT_STOP","_Varint_GetBytes","_Varint64_GetBytes","char","charCodeAt","inArray","lookup","output","paddingBytes","length_1","temp","num","join","temp2","microsoft_bond_utils_1","BrowserChecker","_IsDataViewSupport","view","DataView","ArrayBuffer","setFloat64","getUint8","microsoft_bond_floatutils_1","FloatUtils","_ConvertNumberToArray","tmpH","tmpL","res","isDouble","_doubleZero","_floatZero","exponentBits","precisionBits","bias","minExponent","maxExponent","sign","intPart","floatPart","len","buffer","Array","firstBit","exponent","lastBit","_doubleNegInifinity","_floatNegInifinity","_doubleInifinity","_floatInifinity","resArray","result","_buffer","byte","offset","count","AWTRetryPolicy","httpStatusCode","retriesSoFar","waitDuration","randomBackoff","BaseBackoff","pow","min","AWTKillSwitch","_killedTokenDictionary","killTokens","killDuration","durationMs","ex","AWTClockSkewManager","_allowRequestSending","_shouldAddClockSkewHeaders","_isFirstRequest","_clockSkewHeaderValue","_clockSkewSet","timeDeltaInMillis","AWTRecordBatcher","_maxRequestSize","_currentBatch","_currentBatchSize","SizeLimitExceeded"],"mappings":"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","file":"logger.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 16);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Enums.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing the enums.\r\n*/\r\n/**\r\n * The AWTPropertyType enumeration contains a set of values that specify types of properties.\r\n * @enum {number}\r\n */\r\nvar AWTPropertyType;\r\n(function (AWTPropertyType) {\r\n    /**\r\n     * Property type is unspecified.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Unspecified\"] = 0] = \"Unspecified\";\r\n    /**\r\n     * A string.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"String\"] = 1] = \"String\";\r\n    /**\r\n     * A 64-bit integer.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Int64\"] = 2] = \"Int64\";\r\n    /**\r\n     * A double.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Double\"] = 3] = \"Double\";\r\n    /**\r\n     * A boolean.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Boolean\"] = 4] = \"Boolean\";\r\n})(AWTPropertyType = exports.AWTPropertyType || (exports.AWTPropertyType = {}));\r\n/**\r\n * The AWTPiiKind enumeration contains a set of values that specify the kind of PII (Personal Identifiable Information).\r\n * @enum {number}\r\n */\r\nvar AWTPiiKind;\r\n(function (AWTPiiKind) {\r\n    /**\r\n     * No kind.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * An LDAP distinguished name. For example, CN=Jeff Smith,OU=Sales,DC=Fabrikam,DC=COM.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"DistinguishedName\"] = 1] = \"DistinguishedName\";\r\n    /**\r\n     * Generic information.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"GenericData\"] = 2] = \"GenericData\";\r\n    /**\r\n     * An IPV4 Internet address. For example, 192.0.2.1.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPV4Address\"] = 3] = \"IPV4Address\";\r\n    /**\r\n     * An IPV6 Internet address. For example, 2001:0db8:85a3:0000:0000:8a2e:0370:7334.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPv6Address\"] = 4] = \"IPv6Address\";\r\n    /**\r\n     * The Subject of an e-mail message.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"MailSubject\"] = 5] = \"MailSubject\";\r\n    /**\r\n     * A telephone number.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"PhoneNumber\"] = 6] = \"PhoneNumber\";\r\n    /**\r\n     * A query string.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"QueryString\"] = 7] = \"QueryString\";\r\n    /**\r\n     * An SIP (Session Internet Protocol) address.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"SipAddress\"] = 8] = \"SipAddress\";\r\n    /**\r\n     * An e-mail address.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"SmtpAddress\"] = 9] = \"SmtpAddress\";\r\n    /**\r\n     * An user ID.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Identity\"] = 10] = \"Identity\";\r\n    /**\r\n     * A URI (Uniform Resource Identifier).\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Uri\"] = 11] = \"Uri\";\r\n    /**\r\n     * The fully-qualified domain name.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Fqdn\"] = 12] = \"Fqdn\";\r\n    /**\r\n     * Scrubs the last octet in a IPV4 Internet address.\r\n     * For example: 10.121.227.147 becomes 10.121.227.*\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPV4AddressLegacy\"] = 13] = \"IPV4AddressLegacy\";\r\n})(AWTPiiKind = exports.AWTPiiKind || (exports.AWTPiiKind = {}));\r\n/**\r\n * The AWTCustomerContentKind enumeration contains a set of values that specify the kind of customer content.\r\n * @enum {number}\r\n */\r\nvar AWTCustomerContentKind;\r\n(function (AWTCustomerContentKind) {\r\n    /**\r\n     * No kind.\r\n     */\r\n    AWTCustomerContentKind[AWTCustomerContentKind[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * Generic content.\r\n     */\r\n    AWTCustomerContentKind[AWTCustomerContentKind[\"GenericContent\"] = 1] = \"GenericContent\";\r\n})(AWTCustomerContentKind = exports.AWTCustomerContentKind || (exports.AWTCustomerContentKind = {}));\r\n/**\r\n * The AWTEventPriority enumeration contains a set of values that specify an event's priority.\r\n * @enum {number}\r\n */\r\nvar AWTEventPriority;\r\n(function (AWTEventPriority) {\r\n    /**\r\n     * Low priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"Low\"] = 1] = \"Low\";\r\n    /**\r\n     * Normal priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"Normal\"] = 2] = \"Normal\";\r\n    /**\r\n     * High priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"High\"] = 3] = \"High\";\r\n})(AWTEventPriority = exports.AWTEventPriority || (exports.AWTEventPriority = {}));\r\n/**\r\n * The AWTEventsDroppedReason enumeration contains a set of values that specify the reason for dropping an event.\r\n * @enum {number}\r\n */\r\nvar AWTEventsDroppedReason;\r\n(function (AWTEventsDroppedReason) {\r\n    /**\r\n     * Status set to non-retryable.\r\n     */\r\n    AWTEventsDroppedReason[AWTEventsDroppedReason[\"NonRetryableStatus\"] = 1] = \"NonRetryableStatus\";\r\n    /**\r\n     * The user ended the app.\r\n     */\r\n    AWTEventsDroppedReason[AWTEventsDroppedReason[\"KillSwitch\"] = 2] = \"KillSwitch\";\r\n    /**\r\n     * The event queue is full.\r\n     */\r\n    AWTEventsDroppedReason[AWTEventsDroppedReason[\"QueueFull\"] = 3] = \"QueueFull\";\r\n})(AWTEventsDroppedReason = exports.AWTEventsDroppedReason || (exports.AWTEventsDroppedReason = {}));\r\n/**\r\n * The AWTEventsRejectedReason enumeration contains a set of values that specify the reason for rejecting an event.\r\n * @enum {number}\r\n */\r\nvar AWTEventsRejectedReason;\r\n(function (AWTEventsRejectedReason) {\r\n    /**\r\n     * The event is invalid.\r\n     */\r\n    AWTEventsRejectedReason[AWTEventsRejectedReason[\"InvalidEvent\"] = 1] = \"InvalidEvent\";\r\n    /**\r\n     * The size of the event is too large.\r\n     */\r\n    AWTEventsRejectedReason[AWTEventsRejectedReason[\"SizeLimitExceeded\"] = 2] = \"SizeLimitExceeded\";\r\n})(AWTEventsRejectedReason = exports.AWTEventsRejectedReason || (exports.AWTEventsRejectedReason = {}));\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Utils.ts\r\n* @author  Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing utility functions.\r\n*/\r\nvar microsoft_bond_primitives_1 = __webpack_require__(5);\r\nvar Enums_1 = __webpack_require__(0);\r\nvar GuidRegex = /[xy]/g;\r\nvar MSTillUnixEpoch = 62135596800000;\r\nvar MSToTicksMultiplier = 10000;\r\nexports.EventNameAndTypeRegex = /^[a-zA-Z]([a-zA-Z0-9]|_){2,98}[a-zA-Z0-9]$/;\r\nexports.EventNameDotRegex = /\\./g;\r\nexports.PropertyNameRegex = /^[a-zA-Z](([a-zA-Z0-9|_|\\.]){0,98}[a-zA-Z0-9])?$/;\r\nexports.StatsApiKey = 'a387cfcf60114a43a7699f9fbb49289e-9bceb9fe-1c06-460f-96c5-6a0b247358bc-7238';\r\nvar beaconsSupported = null;\r\nvar uInt8ArraySupported = null;\r\nvar useXDR = null;\r\n/**\r\n * Converts a number to Bond Int64.\r\n * @param {number} value - The number to be converted.\r\n * @return {object} The Int64 value for the passed number.\r\n */\r\nfunction numberToBondInt64(value) {\r\n    // Construct bond timestamp for aria\r\n    var bond_value = new microsoft_bond_primitives_1.Int64('0');\r\n    bond_value.low = value & 0xffffffff;\r\n    bond_value.high = Math.floor(value / 0x100000000);\r\n    return bond_value;\r\n}\r\nexports.numberToBondInt64 = numberToBondInt64;\r\n/**\r\n * Creates a new GUID.\r\n * @return {string} A GUID.\r\n */\r\nfunction newGuid() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(GuidRegex, function (c) {\r\n        var r = (Math.random() * 16 | 0), v = (c === 'x' ? r : r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\nexports.newGuid = newGuid;\r\n/**\r\n * Checks if the type of value is a string.\r\n * @param {string} value - Value to be checked.\r\n * @return {boolean} True if the value is a string, false otherwise.\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string';\r\n}\r\nexports.isString = isString;\r\n/**\r\n * Converts milliseconds to ticks since 00:00:00 Jan 1, 0001.\r\n * @param {number} msToTicks - The milliseconds value to be converted.\r\n * @return {number} The value of the milliseconds in .Net Ticks.\r\n */\r\nfunction msToTicks(timeInMs) {\r\n    return (timeInMs + MSTillUnixEpoch) * MSToTicksMultiplier;\r\n}\r\nexports.msToTicks = msToTicks;\r\n/**\r\n * Gets the tenant id from the tenant token.\r\n * @param {string} apiKey - The token from which the tenant id is to be extracted.\r\n * @return {string} The tenant id.\r\n */\r\nfunction getTenantId(apiKey) {\r\n    var indexTenantId = apiKey.indexOf('-');\r\n    if (indexTenantId > -1) {\r\n        return apiKey.substring(0, indexTenantId);\r\n    }\r\n    return '';\r\n}\r\nexports.getTenantId = getTenantId;\r\n/**\r\n * Checks if HTML5 Beacons are supported in the current environment.\r\n * @return {boolean} True if supported, false otherwise.\r\n */\r\nfunction isBeaconsSupported() {\r\n    if (beaconsSupported === null) {\r\n        beaconsSupported = typeof navigator !== 'undefined' && Boolean(navigator.sendBeacon);\r\n    }\r\n    return beaconsSupported;\r\n}\r\nexports.isBeaconsSupported = isBeaconsSupported;\r\n/**\r\n * Checks if Uint8Array are available in the current environment. Safari and Firefox along with\r\n * ReactNative are known to not support Uint8Array properly.\r\n * @return {boolean} True if available, false otherwise.\r\n */\r\nfunction isUint8ArrayAvailable() {\r\n    if (uInt8ArraySupported === null) {\r\n        uInt8ArraySupported = typeof Uint8Array !== 'undefined' && !isSafariOrFirefox() && !isReactNative();\r\n    }\r\n    return uInt8ArraySupported;\r\n}\r\nexports.isUint8ArrayAvailable = isUint8ArrayAvailable;\r\n/**\r\n * Checks if the value is an AWTEventPriority.\r\n * @param {enum} value - The value that needs to be checked.\r\n * @return {boolean} True if the value is in AWTEventPriority, false otherwise.\r\n */\r\nfunction isPriority(value) {\r\n    if (!isNaN(value) && value !== null && value >= 1 && value <= 3) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexports.isPriority = isPriority;\r\n/**\r\n * Sanitizes the Property. It checks the that the property name and value are valid. It also\r\n * checks/populates the correct type and pii of the property value.\r\n * @param {string} name                           - The property name.\r\n * @param {string|number|boolean|object} property - The property value or an AWTEventProperty containing value,\r\n * type ,pii and customer content.\r\n * @return {object} AWTEventProperty containing valid name, value, pii and type or null if invalid.\r\n */\r\nfunction sanitizeProperty(name, property) {\r\n    if (typeof property === 'string' || typeof property === 'number' || typeof property === 'boolean') {\r\n        property = { value: property, type: Enums_1.AWTPropertyType.Unspecified };\r\n    }\r\n    if (!exports.PropertyNameRegex.test(name) || property === undefined || property === null\r\n        || property.value === null || property.value === undefined || property.value === '') {\r\n        return null;\r\n    }\r\n    property.type = sanitizePropertyType(property.value, property.type);\r\n    if (!property.type) {\r\n        return null;\r\n    }\r\n    if (typeof property.pii === 'undefined') {\r\n        property.pii = Enums_1.AWTPiiKind.NotSet;\r\n    }\r\n    if (typeof property.cc === 'undefined') {\r\n        property.cc = Enums_1.AWTCustomerContentKind.NotSet;\r\n    }\r\n    return isPii(property.pii) && isCustomerContent(property.cc) &&\r\n        //ensure that only one of pii or customer content can be set\r\n        (property.cc > 0 ? property.pii === Enums_1.AWTPiiKind.NotSet : true) ? property : null;\r\n}\r\nexports.sanitizeProperty = sanitizeProperty;\r\n/**\r\n * Converts a date object into an ISO string. This is needed because not all browsers support ISO string format\r\n * on the date.\r\n * @param {object} date - The date which needs to be converted to ISO format.\r\n * @return {string} The date in ISO format.\r\n */\r\nfunction getISOString(date) {\r\n    return date.getUTCFullYear() + '-' +\r\n        twoDigit(date.getUTCMonth() + 1) + '-' +\r\n        twoDigit(date.getUTCDate()) + 'T' +\r\n        twoDigit(date.getUTCHours()) + ':' +\r\n        twoDigit(date.getUTCMinutes()) + ':' +\r\n        twoDigit(date.getUTCSeconds()) + '.' +\r\n        threeDigit(date.getUTCMilliseconds()) + 'Z';\r\n}\r\nexports.getISOString = getISOString;\r\nfunction useXDomainRequest() {\r\n    if (useXDR === null) {\r\n        var conn = new XMLHttpRequest();\r\n        if (typeof conn.withCredentials === 'undefined' &&\r\n            typeof XDomainRequest !== 'undefined') {\r\n            useXDR = true;\r\n        }\r\n        else {\r\n            useXDR = false;\r\n        }\r\n    }\r\n    return useXDR;\r\n}\r\nexports.useXDomainRequest = useXDomainRequest;\r\nfunction isReactNative() {\r\n    // If running in React Native, navigator.product will be populated\r\n    if (typeof navigator !== 'undefined' && navigator.product) {\r\n        return navigator.product === 'ReactNative';\r\n    }\r\n    return false;\r\n}\r\nexports.isReactNative = isReactNative;\r\nfunction twoDigit(n) {\r\n    // Format integers to have at least two digits.\r\n    return n < 10 ? '0' + n : n.toString();\r\n}\r\nfunction threeDigit(n) {\r\n    // Format integers to have at least three digits.\r\n    if (n < 10) {\r\n        return '00' + n;\r\n    }\r\n    else if (n < 100) {\r\n        return '0' + n;\r\n    }\r\n    return n.toString();\r\n}\r\nfunction sanitizePropertyType(value, type) {\r\n    if (!isPropertyType(type) || type === Enums_1.AWTPropertyType.Unspecified) {\r\n        return getCorrectType(value);\r\n    }\r\n    if (type === Enums_1.AWTPropertyType.String && typeof value === 'string') {\r\n        return type;\r\n    }\r\n    if ((type === Enums_1.AWTPropertyType.Double || type === Enums_1.AWTPropertyType.Int64) && typeof value === 'number') {\r\n        if (type === Enums_1.AWTPropertyType.Int64 && value % 1 !== 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return type;\r\n        }\r\n    }\r\n    if (type === Enums_1.AWTPropertyType.Boolean && typeof value === 'boolean') {\r\n        return type;\r\n    }\r\n}\r\nfunction getCorrectType(value) {\r\n    switch (typeof value) {\r\n        case 'string':\r\n            return Enums_1.AWTPropertyType.String;\r\n        case 'boolean':\r\n            return Enums_1.AWTPropertyType.Boolean;\r\n        case 'number':\r\n            return Enums_1.AWTPropertyType.Double;\r\n    }\r\n    return Enums_1.AWTPropertyType.Unspecified;\r\n}\r\nfunction isPii(value) {\r\n    if (!isNaN(value) && value !== null && value >= 0 && value <= 13) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isCustomerContent(value) {\r\n    if (!isNaN(value) && value !== null && value >= 0 && value <= 1) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isPropertyType(value) {\r\n    if (!isNaN(value) && value !== null && value >= 0 && value <= 4) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isSafariOrFirefox() {\r\n    // If non-browser navigator will be undefined\r\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n        var ua = navigator.userAgent.toLowerCase();\r\n        if ((ua.indexOf('safari') >= 0 || ua.indexOf('firefox') >= 0) && ua.indexOf('chrome') < 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nvar AWTNotificationManager = /** @class */ (function () {\r\n    function AWTNotificationManager() {\r\n    }\r\n    /**\r\n     * Adds a notification listener.\r\n     * @param {object} listener - The notification listener to be added.\r\n     */\r\n    AWTNotificationManager.addNotificationListener = function (listener) {\r\n        this.listeners.push(listener);\r\n    };\r\n    /**\r\n     * Notification for events sent.\r\n     * @param {object[]} events - The array of events that have been sent.\r\n     */\r\n    AWTNotificationManager.eventsSent = function (events) {\r\n        var _this = this;\r\n        var _loop_1 = function (i) {\r\n            if (this_1.listeners[i].eventsSent) {\r\n                setTimeout(function () { return _this.listeners[i].eventsSent(events); }, 0);\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being dropped.\r\n     * @param {object[]} events - The array of events that have been dropped.\r\n     * @param {enum} reason     - The reason for which the SDK dropped the events.\r\n     */\r\n    AWTNotificationManager.eventsDropped = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_2 = function (i) {\r\n            if (this_2.listeners[i].eventsDropped) {\r\n                setTimeout(function () { return _this.listeners[i].eventsDropped(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_2 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_2(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being retried when the request failed with a retryable status.\r\n     * @param {object[]} events - The array of events that are being retried.\r\n     */\r\n    AWTNotificationManager.eventsRetrying = function (events) {\r\n        var _this = this;\r\n        var _loop_3 = function (i) {\r\n            if (this_3.listeners[i].eventsRetrying) {\r\n                setTimeout(function () { return _this.listeners[i].eventsRetrying(events); }, 0);\r\n            }\r\n        };\r\n        var this_3 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_3(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being rejected.\r\n     * @param {object[]} events - The array of events that have been rejected.\r\n     * @param {enum} reason     - The reason for which the SDK rejeceted the events.\r\n     */\r\n    AWTNotificationManager.eventsRejected = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_4 = function (i) {\r\n            if (this_4.listeners[i].eventsRejected) {\r\n                setTimeout(function () { return _this.listeners[i].eventsRejected(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_4 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_4(i);\r\n        }\r\n    };\r\n    AWTNotificationManager.listeners = [];\r\n    return AWTNotificationManager;\r\n}());\r\nexports.default = AWTNotificationManager;\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTTransmissionManagerCore.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar DataModels_1 = __webpack_require__(10);\r\nvar Enums_1 = __webpack_require__(0);\r\nvar AWTQueueManager_1 = __webpack_require__(19);\r\nvar AWTStatsManager_1 = __webpack_require__(12);\r\nvar AWTEventProperties_1 = __webpack_require__(4);\r\nvar AWTLogManager_1 = __webpack_require__(14);\r\nvar Utils = __webpack_require__(1);\r\nvar MaxBackoffCount = 4;\r\nvar MinDurationBetweenUploadNow = 30000; //30 sec\r\nvar StatName = 'awt_stats';\r\n/**\r\n * Class that manages the timers for when to send events. It also\r\n * handles flush and flushAndTeardown. This class also allows setting\r\n * new event handlers. The default event handler is the Inbound Queue Manager.\r\n */\r\nvar AWTTransmissionManagerCore = /** @class */ (function () {\r\n    function AWTTransmissionManagerCore() {\r\n    }\r\n    /**\r\n     * Sets the event handler to be used by the tranmission manager.\r\n     * The default event handler is the Inbound queue manager. This handler\r\n     * is used to batch and send events to Aria. If you intend to send events\r\n     * to Aria please make sure your event handler forwards events to the Inbound\r\n     * Queue Manager. You can retrieve the Inbound Queue Manager by calling\r\n     * getEventsHandler before you set your handler.\r\n     * @param {object} eventsHandler - The new events handler to be used by the tranmission\r\n     * manager.\r\n     */\r\n    AWTTransmissionManagerCore.setEventsHandler = function (eventsHandler) {\r\n        this._eventHandler = eventsHandler;\r\n    };\r\n    /**\r\n     * Gets the current event handler used by the tranmission manager.\r\n     * @return {object} The event handler currently used by the tranmission manager.\r\n     */\r\n    AWTTransmissionManagerCore.getEventsHandler = function () {\r\n        return this._eventHandler;\r\n    };\r\n    /**\r\n     * Try to schedule the timer after which events will be sent. If there are\r\n     * no events to be sent, or there is already a timer scheduled, or the\r\n     * http manager doesn't have any idle connections this method is no-op.\r\n     */\r\n    AWTTransmissionManagerCore.scheduleTimer = function () {\r\n        var _this = this;\r\n        var timer = this._profiles[this._currentProfile][2];\r\n        if (this._timeout < 0 && timer >= 0 && !this._paused) {\r\n            if (this._eventHandler.hasEvents()) {\r\n                //If the transmission is backed off make the timer atleast 1 sec to allow for backoff.\r\n                if (timer === 0 && this._currentBackoffCount > 0) {\r\n                    timer = 1;\r\n                }\r\n                this._timeout = setTimeout(function () { return _this._batchAndSendEvents(); }, timer * (1 << this._currentBackoffCount) * 1000);\r\n            }\r\n            else {\r\n                this._timerCount = 0;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Initialize the transmission manager. After this method is called events are\r\n     * accepted for tranmission.\r\n     * @param {object} config - The configuration passed during AWTLogManager initialize.\r\n     */\r\n    AWTTransmissionManagerCore.initialize = function (config) {\r\n        var _this = this;\r\n        this._newEventsAllowed = true;\r\n        this._config = config;\r\n        this._eventHandler = new AWTQueueManager_1.default(config.collectorUri, config.cacheMemorySizeLimitInNumberOfEvents, config.httpXHROverride);\r\n        this._initializeProfiles();\r\n        AWTStatsManager_1.default.initialize(function (stats, tenantId) {\r\n            if (_this._config.canSendStatEvent(StatName)) {\r\n                var event_1 = new AWTEventProperties_1.default(StatName);\r\n                event_1.setEventPriority(Enums_1.AWTEventPriority.High);\r\n                event_1.setProperty('TenantId', tenantId);\r\n                for (var statKey in stats) {\r\n                    if (stats.hasOwnProperty(statKey)) {\r\n                        event_1.setProperty(statKey, stats[statKey].toString());\r\n                    }\r\n                }\r\n                AWTLogManager_1.default.getLogger(Utils.StatsApiKey).logEvent(event_1);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Set the transmit profile to be used. This will change the tranmission timers\r\n     * based on the transmit profile.\r\n     * @param {string} profileName - The name of the transmit profile to be used.\r\n     */\r\n    AWTTransmissionManagerCore.setTransmitProfile = function (profileName) {\r\n        if (this._currentProfile !== profileName && this._profiles[profileName] !== undefined) {\r\n            this.clearTimeout();\r\n            this._currentProfile = profileName;\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Load custom tranmission profiles. Each profile should have timers for\r\n     * high, normal and low.  Each profile should make sure\r\n     * that a each priority timer is a multiple of the priority higher than it.\r\n     * Setting the timer value to -1 means that the events for that priority will\r\n     * not be sent. Note that once a priority has been set to not send, all priorities\r\n     * below it will also not be sent. The timers should be in the form of [low, normal, high].\r\n     * e.g Custom: [30,10,5]\r\n     * This also removes any previously loaded custom profiles.\r\n     * @param {object} profiles - A dictionary containing the transmit profiles.\r\n     */\r\n    AWTTransmissionManagerCore.loadTransmitProfiles = function (profiles) {\r\n        this._resetTransmitProfiles();\r\n        for (var profileName in profiles) {\r\n            if (profiles.hasOwnProperty(profileName)) {\r\n                if (profiles[profileName].length !== 3) {\r\n                    continue;\r\n                }\r\n                //Make sure if a higher priority is set to not send then dont send lower priority\r\n                for (var i = 2; i >= 0; --i) {\r\n                    if (profiles[profileName][i] < 0) {\r\n                        for (var j = i; j >= 0; --j) {\r\n                            profiles[profileName][j] = -1;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                //Make sure each priority is multiple of the priority higher then it. If not a multiple\r\n                //we round up so that it becomes a multiple.\r\n                for (var i = 2; i > 0; --i) {\r\n                    if (profiles[profileName][i] > 0 && profiles[profileName][i - 1] > 0) {\r\n                        var timerMultiplier = profiles[profileName][i - 1] / profiles[profileName][i];\r\n                        profiles[profileName][i - 1] = Math.ceil(timerMultiplier) * profiles[profileName][i];\r\n                    }\r\n                }\r\n                this._profiles[profileName] = profiles[profileName];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Pass the event to the event handler and try to schedule the timer.\r\n     * @param {object} event - The event to be sent.\r\n     */\r\n    AWTTransmissionManagerCore.sendEvent = function (event) {\r\n        if (this._newEventsAllowed) {\r\n            this._eventHandler.addEvent(event);\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Sends events for all priority for the current inbound queue.\r\n     * This method adds new inbound queues to which new events will be added.\r\n     * Note: If LogManager is paused or flush is called again in less than 30 sec\r\n     * then flush will be no-op and the callback will not be called.\r\n     * @param {function} callback - The function to be called when flush is finished.\r\n     */\r\n    AWTTransmissionManagerCore.flush = function (callback) {\r\n        var currentTime = (new Date()).getTime();\r\n        if (!this._paused && this._lastUploadNowCall + MinDurationBetweenUploadNow < currentTime) {\r\n            this._lastUploadNowCall = currentTime;\r\n            if (this._timeout > -1) {\r\n                clearTimeout(this._timeout);\r\n                this._timeout = -1;\r\n            }\r\n            this._eventHandler.uploadNow(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Pauses transmission. It pauses the http manager and also clears timers.\r\n     */\r\n    AWTTransmissionManagerCore.pauseTransmission = function () {\r\n        if (!this._paused) {\r\n            this.clearTimeout();\r\n            this._eventHandler.pauseTransmission();\r\n            this._paused = true;\r\n        }\r\n    };\r\n    /**\r\n     * Resumes tranmission. It resumes the http manager and tries to schedule the timer.\r\n     */\r\n    AWTTransmissionManagerCore.resumeTransmision = function () {\r\n        if (this._paused) {\r\n            this._paused = false;\r\n            this._eventHandler.resumeTransmission();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Stops allowing new events being added for tranmission. It also batches all\r\n     * events currently in the queue and creates requests from them to be sent.\r\n     */\r\n    AWTTransmissionManagerCore.flushAndTeardown = function () {\r\n        //No op if offline storage is added\r\n        AWTStatsManager_1.default.teardown();\r\n        this._newEventsAllowed = false;\r\n        this.clearTimeout();\r\n        this._eventHandler.teardown();\r\n    };\r\n    /**\r\n     * Backs off tranmission. This exponentially increases all the timers.\r\n     */\r\n    AWTTransmissionManagerCore.backOffTransmission = function () {\r\n        if (this._currentBackoffCount < MaxBackoffCount) {\r\n            this._currentBackoffCount++;\r\n            this.clearTimeout();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Clears backoff for tranmission.\r\n     */\r\n    AWTTransmissionManagerCore.clearBackOff = function () {\r\n        if (this._currentBackoffCount > 0) {\r\n            this._currentBackoffCount = 0;\r\n            this.clearTimeout();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Resets the transmit profiles to the default profiles of Real Time, Near Real Time\r\n     * and Best Effort. This removes all the custom profiles that were loaded.\r\n     */\r\n    AWTTransmissionManagerCore._resetTransmitProfiles = function () {\r\n        this.clearTimeout();\r\n        this._initializeProfiles();\r\n        this._currentProfile = DataModels_1.AWT_REAL_TIME;\r\n        this.scheduleTimer();\r\n    };\r\n    AWTTransmissionManagerCore.clearTimeout = function () {\r\n        if (this._timeout > 0) {\r\n            clearTimeout(this._timeout);\r\n            this._timeout = -1;\r\n            this._timerCount = 0;\r\n        }\r\n    };\r\n    AWTTransmissionManagerCore._batchAndSendEvents = function () {\r\n        var priority = Enums_1.AWTEventPriority.High;\r\n        this._timerCount++;\r\n        if (this._timerCount * this._profiles[this._currentProfile][2] === this._profiles[this._currentProfile][0]) {\r\n            priority = Enums_1.AWTEventPriority.Low;\r\n            this._timerCount = 0;\r\n        }\r\n        else if (this._timerCount * this._profiles[this._currentProfile][2] === this._profiles[this._currentProfile][1]) {\r\n            priority = Enums_1.AWTEventPriority.Normal;\r\n        }\r\n        this._eventHandler.sendEventsForPriorityAndAbove(priority);\r\n        this._timeout = -1;\r\n        this.scheduleTimer();\r\n    };\r\n    AWTTransmissionManagerCore._initializeProfiles = function () {\r\n        this._profiles = {};\r\n        this._profiles['REAL_TIME'] = [4, 2, 1];\r\n        this._profiles['NEAR_REAL_TIME'] = [12, 6, 3];\r\n        this._profiles['BEST_EFFOR'] = [36, 18, 9];\r\n    };\r\n    AWTTransmissionManagerCore._newEventsAllowed = false;\r\n    AWTTransmissionManagerCore._currentProfile = DataModels_1.AWT_REAL_TIME;\r\n    AWTTransmissionManagerCore._timeout = -1;\r\n    AWTTransmissionManagerCore._currentBackoffCount = 0;\r\n    AWTTransmissionManagerCore._paused = false;\r\n    AWTTransmissionManagerCore._timerCount = 0;\r\n    AWTTransmissionManagerCore._lastUploadNowCall = 0;\r\n    return AWTTransmissionManagerCore;\r\n}());\r\nexports.default = AWTTransmissionManagerCore;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTEventProperties.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Utils = __webpack_require__(1);\r\nvar Enums_1 = __webpack_require__(0);\r\n/**\r\n* The AWTEventProperties class is used for creating an event.\r\n*/\r\nvar AWTEventProperties = /** @class */ (function () {\r\n    /**\r\n     * The AWTEventProperties class constructor.\r\n     * @constructor\r\n     * @param {string} - [Optional] The name of the event.\r\n     */\r\n    function AWTEventProperties(name) {\r\n        this._event = { name: '', properties: {} };\r\n        if (name) {\r\n            this.setName(name);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the name of the event.\r\n     * @param {string} name - The name of the event.\r\n     */\r\n    AWTEventProperties.prototype.setName = function (name) {\r\n        this._event.name = name;\r\n    };\r\n    /**\r\n     * Gets the name of the event.\r\n     * @return {string|undefined} - The name of the event, or undefined if the name has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getName = function () {\r\n        if (!this._event.name || !Utils.isString(this._event.name)) {\r\n            return undefined;\r\n        }\r\n        return this._event.name;\r\n    };\r\n    /**\r\n     * Sets the base type of the event.\r\n     * @param {string} type - The base type of the event.\r\n     */\r\n    AWTEventProperties.prototype.setType = function (type) {\r\n        this._event.type = type;\r\n    };\r\n    /**\r\n     * Gets the base type of the event.\r\n     * @return {string|undefined} The base type of the event, or undefined if the base type has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getType = function () {\r\n        if (!this._event.type || !Utils.isString(this._event.type)) {\r\n            return undefined;\r\n        }\r\n        return this._event.type;\r\n    };\r\n    /**\r\n     * Sets the timestamp for the event.\r\n     * @param {number} timestampInEpochMillis - The timestamp (in milliseconds) since UNIX Epoch.\r\n     */\r\n    AWTEventProperties.prototype.setTimestamp = function (timestampInEpochMillis) {\r\n        this._event.timestamp = timestampInEpochMillis;\r\n    };\r\n    /**\r\n     * Gets the timestamp for the event.\r\n     * @return {number|undefined} The timestamp for the event, or undefined if it has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getTimestamp = function () {\r\n        if (!this._event.timestamp || isNaN(this._event.timestamp)) {\r\n            return undefined;\r\n        }\r\n        return this._event.timestamp;\r\n    };\r\n    /**\r\n     * Sets the priority for sending the event. The default priority\r\n     * of the event is Normal.\r\n     * @param {enum} priority - An AWTEventPriority enumeration value that specifies the priority of the event.\r\n     */\r\n    AWTEventProperties.prototype.setEventPriority = function (priority) {\r\n        if (Utils.isPriority(priority)) {\r\n            this._event.priority = priority;\r\n        }\r\n    };\r\n    /**\r\n     * Gets the priority for the event.\r\n     * @return {AWTEventPriority} - An AWTEventPriority enumeration value that specifies the priority of the event.\r\n     */\r\n    AWTEventProperties.prototype.getEventPriority = function () {\r\n        return this._event.priority;\r\n    };\r\n    /**\r\n     * Sets a property with a name and value. Optionally sets the property type.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setProperty = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: Enums_1.AWTPiiKind.NotSet, cc: Enums_1.AWTCustomerContentKind.NotSet };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Sets a property with a name, a value, and a PII. Optionally sets the property type.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} pii                    - The kind of PII for the property.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setPropertyWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: pii, cc: Enums_1.AWTCustomerContentKind.NotSet };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Sets a property with name, value and customer content. Optionally set the property type of the value.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} customerContent        - The customer content kind for the property.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setPropertyWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: Enums_1.AWTPiiKind.NotSet, cc: customerContent };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Gets the properties currently added to the event.\r\n     * @return {object} A Map<string, AWTEventProperty> containing the current properties.\r\n     */\r\n    AWTEventProperties.prototype.getPropertyMap = function () {\r\n        return this._event.properties;\r\n    };\r\n    /**\r\n     * Gets the event from this event properties object.\r\n     * @return {object} The event properties compiled into AWTEventData.\r\n     */\r\n    AWTEventProperties.prototype.getEvent = function () {\r\n        return this._event;\r\n    };\r\n    return AWTEventProperties;\r\n}());\r\nexports.default = AWTEventProperties;\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/**\r\n* microsoft.bond.primitives.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Int64 = /** @class */ (function () {\r\n    function Int64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n        if (this.low < 0) {\r\n            this.high = -1;\r\n        }\r\n    }\r\n    Int64.prototype._Equals = function (numberStr) {\r\n        var tmp = new Int64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return Int64;\r\n}());\r\nexports.Int64 = Int64;\r\nvar UInt64 = /** @class */ (function () {\r\n    function UInt64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n    }\r\n    UInt64.prototype._Equals = function (numberStr) {\r\n        var tmp = new UInt64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return UInt64;\r\n}());\r\nexports.UInt64 = UInt64;\r\nvar Number = /** @class */ (function () {\r\n    function Number() {\r\n    }\r\n    Number._ToByte = function (value) {\r\n        return this._ToUInt8(value);\r\n    };\r\n    Number._ToUInt8 = function (value) {\r\n        return value & 0xff;\r\n    };\r\n    Number._ToInt32 = function (value) {\r\n        var signMask = (value & 0x80000000);\r\n        return (value & 0x7fffffff) | signMask;\r\n    };\r\n    Number._ToUInt32 = function (value) {\r\n        return value & 0xffffffff;\r\n    };\r\n    return Number;\r\n}());\r\nexports.Number = Number;\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Enums.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing the enums.\r\n*/\r\n/**\r\n * The AWTUserIdType enumeration contains a set of values that specify the type of user ID.\r\n * @enum {number}\r\n */\r\nvar AWTUserIdType;\r\n(function (AWTUserIdType) {\r\n    /**\r\n     * The user ID type is unknown.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * Microsoft Account ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MSACID\"] = 1] = \"MSACID\";\r\n    /**\r\n     * Microsoft .NET Passport Unique ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MSAPUID\"] = 2] = \"MSAPUID\";\r\n    /**\r\n     * Anonymous user ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"ANID\"] = 3] = \"ANID\";\r\n    /**\r\n     * Organization customer ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"OrgIdCID\"] = 4] = \"OrgIdCID\";\r\n    /**\r\n     * Microsoft Exchange Passport ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"OrgIdPUID\"] = 5] = \"OrgIdPUID\";\r\n    /**\r\n     * User object ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"UserObjectId\"] = 6] = \"UserObjectId\";\r\n    /**\r\n     * Skype ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Skype\"] = 7] = \"Skype\";\r\n    /**\r\n     * Yammer ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Yammer\"] = 8] = \"Yammer\";\r\n    /**\r\n     * E-mail address.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"EmailAddress\"] = 9] = \"EmailAddress\";\r\n    /**\r\n     * Telephone number.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"PhoneNumber\"] = 10] = \"PhoneNumber\";\r\n    /**\r\n     * SIP address.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"SipAddress\"] = 11] = \"SipAddress\";\r\n    /**\r\n     * Multiple unit identity.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MUID\"] = 12] = \"MUID\";\r\n})(AWTUserIdType = exports.AWTUserIdType || (exports.AWTUserIdType = {}));\r\n/**\r\n * The AWTSessionState enumeration contains a set of values that indicate the session state.\r\n * @enum {number}\r\n */\r\nvar AWTSessionState;\r\n(function (AWTSessionState) {\r\n    /**\r\n     * Session started.\r\n     */\r\n    AWTSessionState[AWTSessionState[\"Started\"] = 0] = \"Started\";\r\n    /**\r\n     * Session ended.\r\n     */\r\n    AWTSessionState[AWTSessionState[\"Ended\"] = 1] = \"Ended\";\r\n})(AWTSessionState = exports.AWTSessionState || (exports.AWTSessionState = {}));\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTSerializer.ts\r\n* @author Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Bond = __webpack_require__(21);\r\nvar Enums_1 = __webpack_require__(0);\r\nvar Utils = __webpack_require__(1);\r\n/**\r\n* Class to handle serialization of event and request.\r\n* Currently uses Bond for serialization. Please note that this may be subject to change.\r\n*/\r\nvar AWTSerializer = /** @class */ (function () {\r\n    function AWTSerializer() {\r\n    }\r\n    /**\r\n     * Serialies a request using Bond.\r\n     * @param {object} requestDictionary - A dictionary containing the token to event mapping.\r\n     * @param {number} tokenCount        - Number of tenant tokens to be sent in the request.\r\n     * @return {number[]} The serialized bond request.\r\n     */\r\n    AWTSerializer.getPayloadBlob = function (requestDictionary, tokenCount) {\r\n        var stream = new Bond.IO.MemoryStream();\r\n        var writer = new Bond.CompactBinaryProtocolWriter(stream);\r\n        //Write TokenToDataPackagesMap\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 3, null);\r\n        writer._WriteMapContainerBegin(tokenCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_LIST);\r\n        for (var token in requestDictionary) {\r\n            if (requestDictionary.hasOwnProperty(token)) {\r\n                //write token\r\n                writer._WriteString(token);\r\n                var dataPackage = requestDictionary[token];\r\n                // Write list of DataPackages\r\n                writer._WriteContainerBegin(1, Bond._BondDataType._BT_STRUCT);\r\n                // Source\r\n                writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 2, null);\r\n                writer._WriteString('act_default_source');\r\n                // DataPackageId\r\n                writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 5, null);\r\n                writer._WriteString(Utils.newGuid());\r\n                // Timestamp\r\n                writer._WriteFieldBegin(Bond._BondDataType._BT_INT64, 6, null);\r\n                writer._WriteInt64(Utils.numberToBondInt64(Date.now()));\r\n                // Records\r\n                writer._WriteFieldBegin(Bond._BondDataType._BT_LIST, 8, null);\r\n                writer._WriteContainerBegin(dataPackage.length, Bond._BondDataType._BT_STRUCT);\r\n                for (var i = 0; i < dataPackage.length; ++i) {\r\n                    writer._WriteBlob(dataPackage[i].serializedEvent);\r\n                }\r\n                writer._WriteStructEnd(false);\r\n            }\r\n        }\r\n        // End ClientCollector\r\n        writer._WriteStructEnd(false);\r\n        return stream._GetBuffer();\r\n    };\r\n    /**\r\n     * Bond serialize the event.\r\n     * @param {object} eventData - The event that needs to be serialized.\r\n     * @return {number[]} The serialized bond event.\r\n     */\r\n    AWTSerializer.getEventBlob = function (eventData) {\r\n        var stream = new Bond.IO.MemoryStream();\r\n        var writer = new Bond.CompactBinaryProtocolWriter(stream);\r\n        // ID\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 1, null);\r\n        writer._WriteString(eventData.id);\r\n        // Timestamp\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_INT64, 3, null);\r\n        writer._WriteInt64(Utils.numberToBondInt64(eventData.timestamp));\r\n        // Type\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 5, null);\r\n        writer._WriteString(eventData.type);\r\n        // Event Type\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 6, null);\r\n        writer._WriteString(eventData.name);\r\n        var propsString = {};\r\n        var propStringCount = 0;\r\n        var propsInt64 = {};\r\n        var propInt64Count = 0;\r\n        var propsDouble = {};\r\n        var propDoubleCount = 0;\r\n        var propsBool = {};\r\n        var propBoolCount = 0;\r\n        var piiProps = {};\r\n        var piiPropCount = 0;\r\n        var ccProps = {};\r\n        var ccPropCount = 0;\r\n        // Iterate across event data properties and separate based on pii\r\n        for (var key in eventData.properties) {\r\n            if (eventData.properties.hasOwnProperty(key)) {\r\n                var property = eventData.properties[key];\r\n                if (property.cc > 0) {\r\n                    ccProps[key] = property;\r\n                    ccPropCount++;\r\n                }\r\n                else if (property.pii > 0) {\r\n                    piiProps[key] = property;\r\n                    piiPropCount++;\r\n                }\r\n                else {\r\n                    switch (property.type) {\r\n                        case Enums_1.AWTPropertyType.String:\r\n                            propsString[key] = property.value;\r\n                            propStringCount++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Int64:\r\n                            propsInt64[key] = property.value;\r\n                            propInt64Count++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Double:\r\n                            propsDouble[key] = property.value;\r\n                            propDoubleCount++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Boolean:\r\n                            propsBool[key] = property.value;\r\n                            propBoolCount++;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //Extension map\r\n        if (propStringCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 13, null);\r\n            writer._WriteMapContainerBegin(propStringCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRING);\r\n            for (var key in propsString) {\r\n                if (propsString.hasOwnProperty(key)) {\r\n                    var value = propsString[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteString(value.toString());\r\n                }\r\n            }\r\n        }\r\n        // Pii\r\n        if (piiPropCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 30, null);\r\n            writer._WriteMapContainerBegin(piiPropCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRUCT);\r\n            for (var key in piiProps) {\r\n                if (piiProps.hasOwnProperty(key)) {\r\n                    var property = piiProps[key];\r\n                    writer._WriteString(key);\r\n                    // PII Data\r\n                    // O365 scrubber type\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 1, null);\r\n                    writer._WriteInt32(1);\r\n                    // PII Kind\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 2, null);\r\n                    writer._WriteInt32(property.pii);\r\n                    // Value\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 3, null);\r\n                    writer._WriteString(property.value.toString());\r\n                    writer._WriteStructEnd(false);\r\n                }\r\n            }\r\n        }\r\n        // TypedExtensionBoolean map\r\n        if (propBoolCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 31, null);\r\n            writer._WriteMapContainerBegin(propBoolCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_BOOL);\r\n            for (var key in propsBool) {\r\n                if (propsBool.hasOwnProperty(key)) {\r\n                    var value = propsBool[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteBool(value);\r\n                }\r\n            }\r\n        }\r\n        //TypedExtensionInt64 map\r\n        if (propInt64Count) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 33, null);\r\n            writer._WriteMapContainerBegin(propInt64Count, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_INT64);\r\n            for (var key in propsInt64) {\r\n                if (propsInt64.hasOwnProperty(key)) {\r\n                    var value = propsInt64[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteInt64(Utils.numberToBondInt64(value));\r\n                }\r\n            }\r\n        }\r\n        //TypedExtensionDouble map\r\n        if (propDoubleCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 34, null);\r\n            writer._WriteMapContainerBegin(propDoubleCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_DOUBLE);\r\n            for (var key in propsDouble) {\r\n                if (propsDouble.hasOwnProperty(key)) {\r\n                    var value = propsDouble[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteDouble(value);\r\n                }\r\n            }\r\n        }\r\n        //CustomerContentExtensions map\r\n        if (ccPropCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 36, null);\r\n            writer._WriteMapContainerBegin(ccPropCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRUCT);\r\n            for (var key in ccProps) {\r\n                if (ccProps.hasOwnProperty(key)) {\r\n                    var property = ccProps[key];\r\n                    writer._WriteString(key);\r\n                    // CustomerContent Data\r\n                    // CustomerContentKind\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 1, null);\r\n                    writer._WriteInt32(property.cc);\r\n                    // RawContent\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 2, null);\r\n                    writer._WriteString(property.value.toString());\r\n                    writer._WriteStructEnd(false);\r\n                }\r\n            }\r\n        }\r\n        writer._WriteStructEnd(false);\r\n        return stream._GetBuffer();\r\n    };\r\n    /**\r\n     * Base64 encode the given number[].\r\n     * @param {number[]} data - The data to be base64 encoded.\r\n     * @return {string} The base64 encoded data.\r\n     */\r\n    AWTSerializer.base64Encode = function (data) {\r\n        return Bond._Encoding._Base64_GetString(data);\r\n    };\r\n    return AWTSerializer;\r\n}());\r\nexports.default = AWTSerializer;\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTAutoCollection_1 = __webpack_require__(9);\r\nvar Enums_1 = __webpack_require__(0);\r\nvar Enums_2 = __webpack_require__(6);\r\nvar UI_IDTYPE = 'UserInfo.IdType';\r\n/**\r\n *  Class to allow users to set semantic context properties.\r\n */\r\nvar AWTSemanticContext = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {boolean} _allowDeviceFields - Allow setting of device semantic context.\r\n     * @param {object} _properties         - The event properties where to add the semantic context.\r\n     */\r\n    function AWTSemanticContext(_allowDeviceFields, _properties) {\r\n        this._allowDeviceFields = _allowDeviceFields;\r\n        this._properties = _properties;\r\n    }\r\n    /**\r\n     * Sets the field AppInfo.Id with the given value.\r\n     * @param {string} appId  - The Id uniquely identifies the App from this this event originated.\r\n     * In the multi-tenant Aria Platform, this is the Application Id of the\r\n     * registered Application. Example, \"735d47645f7c4de69964e2c01888d6b6\".\r\n     */\r\n    AWTSemanticContext.prototype.setAppId = function (appId) {\r\n        this._addContext('AppInfo.Id', appId);\r\n    };\r\n    /**\r\n     * Sets the field AppInfo.Version with the given value.\r\n     * @param {string} appVersion  - The version of the App, retrieved programmatically where possible. This\r\n     * is app/platform dependent. Examples such as \"7.0.0.100\" for Skype,\r\n     * or \"12.0.30723.00 Update 3\" for Microsoft Visual Studio Ultimate 2013\r\n     */\r\n    AWTSemanticContext.prototype.setAppVersion = function (appVersion) {\r\n        this._addContext('AppInfo.Version', appVersion);\r\n    };\r\n    /**\r\n     * Sets the field AppInfo.Language with the given value.\r\n     * @param {string} appLanguage  - Language of the App in IETF language tag format, as described in RFC 4646.\r\n     * Examples of acceptable values include \"en\", \"pt-BR\" and \"zh-Hant-CN\".\r\n     */\r\n    AWTSemanticContext.prototype.setAppLanguage = function (appLanguage) {\r\n        this._addContext('AppInfo.Language', appLanguage);\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceId  - The device Id uniquely identifies the physical device, using platform\r\n     * available API's. This allows correlation against Aria Hardware Inventory.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceId = function (deviceId) {\r\n        if (this._allowDeviceFields) {\r\n            AWTAutoCollection_1.default.checkAndSaveDeviceId(deviceId);\r\n            this._addContext('DeviceInfo.Id', deviceId);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.OsName with the given value.\r\n     * @param {string} deviceOsName  - The name of the OS. The SDK should ensure this is a limited normalized\r\n     * set. Asimov is using very high level value e.g. Windows/Android/iOS.\r\n     * Examples such as \"iOS\" or \"Windows Phone\".\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceOsName = function (deviceOsName) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.OsName', deviceOsName);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.OsVersion with the given value.\r\n     * @param {string} deviceOsVersion  - The version of the OS, retrieved programmatically, which can be used\r\n     * for aggregation or filtering for scenarios like real time monitoring\r\n     * or metrics reporting. Flurry and GA provide aggregation at this level.\r\n     * Examples such as \"8.1.2\" for iOS, or \"8.1\" for Windows Phone.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceOsVersion = function (deviceOsVersion) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.OsVersion', deviceOsVersion);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceBrowserName  - he name of the OS. The SDK should ensure this is a limited normalized set.\r\n     * Examples such as \"Chrome\" or \"Edge\".\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceBrowserName = function (deviceBrowserName) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.BrowserName', deviceBrowserName);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceBrowserVersion  - The version of the browser, retrieved programmatically, which can be used\r\n     * for aggregation or filtering for scenarios like real time monitoring or metrics reporting.\r\n     * Examples such as \"57.0.2987.133\" for Chrome, or \"15.15063\" for Edge.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceBrowserVersion = function (deviceBrowserVersion) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.BrowserVersion', deviceBrowserVersion);\r\n        }\r\n    };\r\n    /**\r\n     * Set the device manufacturer context information of telemetry event.\r\n     * Can only be set at the LogManager level. Setting it via the object obtained from ILogger\r\n     * will be no-op.\r\n     * @param {string} deviceMake The manufacturer of the device, retrieved\r\n     *            programmatically where possible and is app/platform specific\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceMake = function (deviceMake) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.Make', deviceMake);\r\n        }\r\n    };\r\n    /**\r\n     * Set the device model context information of telemetry event.\r\n     * Can only be set at the LogManager level. Setting it via the object obtained from ILogger\r\n     * will be no-op.\r\n     * @param {string} deviceModel The model of the device, retrieved programmatically\r\n     *            where possible and is app/platform specific\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceModel = function (deviceModel) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.Model', deviceModel);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.Id with the given value.\r\n     * @param {string} userId     - The id uniquely identifies the user in an application-specific\r\n     * user namespace, such as a Skype ID in the Skype App. This may be empty for Apps\r\n     * which do not require user sign-in.\r\n     * @param {enum} pii        - Optional pii type for the user id.\r\n     * @param {enum} userIdType - Optional id type for the user id.\r\n     */\r\n    AWTSemanticContext.prototype.setUserId = function (userId, pii, userIdType) {\r\n        if (!isNaN(userIdType) && userIdType !== null && userIdType >= 0 && userIdType <= 12) {\r\n            this._addContext(UI_IDTYPE, userIdType.toString());\r\n        }\r\n        else {\r\n            var inferredUserIdType = void 0;\r\n            switch (pii) {\r\n                case Enums_1.AWTPiiKind.SipAddress:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.SipAddress;\r\n                    break;\r\n                case Enums_1.AWTPiiKind.PhoneNumber:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.PhoneNumber;\r\n                    break;\r\n                case Enums_1.AWTPiiKind.SmtpAddress:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.EmailAddress;\r\n                    break;\r\n                default:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.Unknown;\r\n                    break;\r\n            }\r\n            this._addContext(UI_IDTYPE, inferredUserIdType.toString());\r\n        }\r\n        if (isNaN(pii) || pii === null || pii === Enums_1.AWTPiiKind.NotSet || pii > 13) {\r\n            switch (userIdType) {\r\n                case Enums_2.AWTUserIdType.Skype:\r\n                    pii = Enums_1.AWTPiiKind.Identity;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.EmailAddress:\r\n                    pii = Enums_1.AWTPiiKind.SmtpAddress;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.PhoneNumber:\r\n                    pii = Enums_1.AWTPiiKind.PhoneNumber;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.SipAddress:\r\n                    pii = Enums_1.AWTPiiKind.SipAddress;\r\n                    break;\r\n                default:\r\n                    pii = Enums_1.AWTPiiKind.NotSet;\r\n                    break;\r\n            }\r\n        }\r\n        this._addContextWithPii('UserInfo.Id', userId, pii);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.AdvertisingId with the given value.\r\n     * @param {string} userAdvertisingId  - The AdvertisingId is the user-specific device id obtainable through\r\n     * platform API's. This may not be available if users choose to opt-out\r\n     * of this id, or if the underlying platform does not support it.\r\n     */\r\n    AWTSemanticContext.prototype.setUserAdvertisingId = function (userAdvertisingId) {\r\n        this._addContext('UserInfo.AdvertisingId', userAdvertisingId);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.TimeZone with the given value.\r\n     * @param {string} userTimeZone  - The user's time zone relative to UTC, in ISO 8601 time zone format.\r\n     * Examples of acceptable values include \"+00\", \"+07:00\", and \"-1130\".\r\n     */\r\n    AWTSemanticContext.prototype.setUserTimeZone = function (userTimeZone) {\r\n        this._addContext('UserInfo.TimeZone', userTimeZone);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.Language with the given value.\r\n     * @param {string} userLanguage  - The user's language in IETF language tag format, as described in RFC 4646.\r\n     * Examples of acceptable values include \"en\", \"pt-BR\" and \"zh-Hant-CN\".\r\n     */\r\n    AWTSemanticContext.prototype.setUserLanguage = function (userLanguage) {\r\n        this._addContext('UserInfo.Language', userLanguage);\r\n    };\r\n    AWTSemanticContext.prototype._addContext = function (key, value) {\r\n        if (typeof value === 'string') {\r\n            this._properties.setProperty(key, value);\r\n        }\r\n    };\r\n    AWTSemanticContext.prototype._addContextWithPii = function (key, value, pii) {\r\n        if (typeof value === 'string') {\r\n            this._properties.setPropertyWithPii(key, value, pii);\r\n        }\r\n    };\r\n    return AWTSemanticContext;\r\n}());\r\nexports.default = AWTSemanticContext;\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTAutoCollection.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Utils = __webpack_require__(1);\r\nvar DEVICE_ID_COOKIE = 'MicrosoftApplicationsTelemetryDeviceId';\r\nvar FIRSTLAUNCHTIME_COOKIE = 'MicrosoftApplicationsTelemetryFirstLaunchTime';\r\nvar BROWSERS = {\r\n    MSIE: 'MSIE',\r\n    CHROME: 'Chrome',\r\n    FIREFOX: 'Firefox',\r\n    SAFARI: 'Safari',\r\n    EDGE: 'Edge',\r\n    ELECTRON: 'Electron',\r\n    SKYPE_SHELL: 'SkypeShell',\r\n    PHANTOMJS: 'PhantomJS',\r\n    OPERA: 'Opera'\r\n};\r\nvar OPERATING_SYSTEMS = {\r\n    WINDOWS: 'Windows',\r\n    MACOSX: 'Mac OS X',\r\n    WINDOWS_PHONE: 'Windows Phone',\r\n    WINDOWS_RT: 'Windows RT',\r\n    IOS: 'iOS',\r\n    ANDROID: 'Android',\r\n    LINUX: 'Linux',\r\n    UNKNOWN: 'Unknown'\r\n};\r\nvar OSNAMEREGEX = {\r\n    WIN: /(windows|win32)/i,\r\n    WINRT: / arm;/i,\r\n    WINPHONE: /windows\\sphone\\s\\d+\\.\\d+/i,\r\n    OSX: /(macintosh|mac os x)/i,\r\n    IOS: /(iPad|iPhone|iPod)(?=.*like Mac OS X)/i,\r\n    LINUX: /(linux|joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk)/i,\r\n    ANDROID: /android/i\r\n};\r\nvar VERSION_MAPPINGS = {\r\n    '5.1': 'XP',\r\n    '6.0': 'Vista',\r\n    '6.1': '7',\r\n    '6.2': '8',\r\n    '6.3': '8.1',\r\n    '10.0': '10'\r\n};\r\nvar REGEX_VERSION = '([\\\\d,.]+)';\r\nvar REGEX_VERSION_MAC = '([\\\\d,_,.]+)';\r\nvar UNKNOWN = 'Unknown';\r\nvar UNDEFINED = 'undefined';\r\n/**\r\n * Class that stores semantic properties.\r\n */\r\nvar AWTAutoCollection = /** @class */ (function () {\r\n    function AWTAutoCollection() {\r\n    }\r\n    /**\r\n     * Add a property storage override to override the usage of document.cookie to store\r\n     * properties. The property storage object should implement both getProperty and setProperty, otherwise\r\n     * it will be rejected.\r\n     * @param {object} propertyStorage - Property storage object which is used for storing SDK properties.\r\n     * @return {boolean} True if the property storage override was accepted, false otherwise.\r\n     */\r\n    AWTAutoCollection.addPropertyStorageOverride = function (propertyStorage) {\r\n        if (propertyStorage) {\r\n            this._propertyStorage = propertyStorage;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Auto collect semantic context properties.\r\n     * @param {object} semantContext   - The semantic context to use to set auto collected information.\r\n     * @param {boolean} disableCookies - Determines if setting cookies is disabled.\r\n     * @param {object} userAgent       - UserAgent string to be used for auto collection of semantic properties.\r\n     */\r\n    AWTAutoCollection.autoCollect = function (semanticContext, disableCookies, userAgent) {\r\n        this._semanticContext = semanticContext;\r\n        this._disableCookies = disableCookies;\r\n        this._autoCollect();\r\n        if (!userAgent && typeof navigator !== UNDEFINED) {\r\n            userAgent = navigator.userAgent || '';\r\n        }\r\n        this._autoCollectFromUserAgent(userAgent);\r\n        if (this._disableCookies && !this._propertyStorage) {\r\n            this._deleteCookie(DEVICE_ID_COOKIE);\r\n            this._deleteCookie(FIRSTLAUNCHTIME_COOKIE);\r\n            return;\r\n        }\r\n        //Only collect device id if it can be stored\r\n        if (this._propertyStorage || (this._areCookiesAvailable && !this._disableCookies)) {\r\n            this._autoCollectDeviceId();\r\n        }\r\n    };\r\n    /**\r\n     * Checks if the device id stored is the same as the new device id. If they are not,\r\n     * store the new id and store a new first launch time.\r\n     * @param {string} deviceId - The new device id.\r\n     */\r\n    AWTAutoCollection.checkAndSaveDeviceId = function (deviceId) {\r\n        if (deviceId) {\r\n            var oldDeviceId = this._getData(DEVICE_ID_COOKIE);\r\n            if (oldDeviceId !== deviceId) {\r\n                this._saveData(DEVICE_ID_COOKIE, deviceId);\r\n                this._saveData(FIRSTLAUNCHTIME_COOKIE, Utils.getISOString(new Date()));\r\n            }\r\n            this.firstLaunchTime = this._getData(FIRSTLAUNCHTIME_COOKIE);\r\n        }\r\n    };\r\n    /**\r\n     * Auto collect the device SDK Id.\r\n     */\r\n    AWTAutoCollection._autoCollectDeviceId = function () {\r\n        var deviceId = this._getData(DEVICE_ID_COOKIE);\r\n        if (!deviceId) {\r\n            deviceId = Utils.newGuid();\r\n            this.checkAndSaveDeviceId(deviceId);\r\n        }\r\n        else {\r\n            this.firstLaunchTime = this._getData(FIRSTLAUNCHTIME_COOKIE);\r\n        }\r\n        this._semanticContext.setDeviceId(deviceId);\r\n    };\r\n    AWTAutoCollection._autoCollect = function () {\r\n        //Get app language\r\n        if (typeof document !== UNDEFINED && document.documentElement) {\r\n            this._semanticContext.setAppLanguage(document.documentElement.lang);\r\n        }\r\n        //Get user language\r\n        if (typeof navigator !== UNDEFINED) {\r\n            this._semanticContext.setUserLanguage(navigator.userLanguage || navigator.language);\r\n        }\r\n        //Get time zone\r\n        var timeZone = new Date().getTimezoneOffset();\r\n        var minutes = timeZone % 60;\r\n        var hours = (timeZone - minutes) / 60;\r\n        var timeZonePrefix = '+';\r\n        if (hours > 0) {\r\n            timeZonePrefix = '-';\r\n        }\r\n        hours = Math.abs(hours);\r\n        minutes = Math.abs(minutes);\r\n        this._semanticContext.setUserTimeZone(timeZonePrefix + (hours < 10 ? '0' + hours : hours.toString()) + ':'\r\n            + (minutes < 10 ? '0' + minutes : minutes.toString()));\r\n    };\r\n    AWTAutoCollection._autoCollectFromUserAgent = function (userAgent) {\r\n        if (userAgent) {\r\n            var browserName = this._getBrowserName(userAgent);\r\n            this._semanticContext.setDeviceBrowserName(browserName);\r\n            this._semanticContext.setDeviceBrowserVersion(this._getBrowserVersion(userAgent, browserName));\r\n            var osName = this._getOsName(userAgent);\r\n            this._semanticContext.setDeviceOsName(osName);\r\n            this._semanticContext.setDeviceOsVersion(this._getOsVersion(userAgent, osName));\r\n        }\r\n    };\r\n    AWTAutoCollection._getBrowserName = function (userAgent) {\r\n        //Check for Opera first        \r\n        if (this._userAgentContainsString('OPR/', userAgent)) {\r\n            return BROWSERS.OPERA;\r\n        }\r\n        //Check for Phantom JS\r\n        if (this._userAgentContainsString(BROWSERS.PHANTOMJS, userAgent)) {\r\n            return BROWSERS.PHANTOMJS;\r\n        }\r\n        //Check for Edge\r\n        if (this._userAgentContainsString(BROWSERS.EDGE, userAgent)) {\r\n            return BROWSERS.EDGE;\r\n        }\r\n        //Check for Electron\r\n        if (this._userAgentContainsString(BROWSERS.ELECTRON, userAgent)) {\r\n            return BROWSERS.ELECTRON;\r\n        }\r\n        //Check for Chrome\r\n        if (this._userAgentContainsString(BROWSERS.CHROME, userAgent)) {\r\n            return BROWSERS.CHROME;\r\n        }\r\n        //Check for Internet Explorer\r\n        if (this._userAgentContainsString('Trident', userAgent)) {\r\n            return BROWSERS.MSIE;\r\n        }\r\n        //Check for Firefox\r\n        if (this._userAgentContainsString(BROWSERS.FIREFOX, userAgent)) {\r\n            return BROWSERS.FIREFOX;\r\n        }\r\n        //Check for Safari\r\n        if (this._userAgentContainsString(BROWSERS.SAFARI, userAgent)) {\r\n            return BROWSERS.SAFARI;\r\n        }\r\n        //Check for Skype shell\r\n        if (this._userAgentContainsString(BROWSERS.SKYPE_SHELL, userAgent)) {\r\n            return BROWSERS.SKYPE_SHELL;\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._userAgentContainsString = function (searchString, userAgent) {\r\n        return userAgent.indexOf(searchString) > -1;\r\n    };\r\n    AWTAutoCollection._getBrowserVersion = function (userAgent, browserName) {\r\n        if (browserName === BROWSERS.MSIE) {\r\n            return this._getIeVersion(userAgent);\r\n        }\r\n        else {\r\n            return this._getOtherVersion(browserName, userAgent);\r\n        }\r\n    };\r\n    AWTAutoCollection._getIeVersion = function (userAgent) {\r\n        var classicIeVersionMatches = userAgent.match(new RegExp(BROWSERS.MSIE + ' ' + REGEX_VERSION));\r\n        if (classicIeVersionMatches) {\r\n            return classicIeVersionMatches[1];\r\n        }\r\n        else {\r\n            var ieVersionMatches = userAgent.match(new RegExp('rv:' + REGEX_VERSION));\r\n            if (ieVersionMatches) {\r\n                return ieVersionMatches[1];\r\n            }\r\n        }\r\n    };\r\n    AWTAutoCollection._getOtherVersion = function (browserString, userAgent) {\r\n        if (browserString === BROWSERS.SAFARI) {\r\n            browserString = 'Version';\r\n        }\r\n        var matches = userAgent.match(new RegExp(browserString + '/' + REGEX_VERSION));\r\n        if (matches) {\r\n            return matches[1];\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getOsName = function (userAgent) {\r\n        if (userAgent.match(OSNAMEREGEX.WINPHONE)) {\r\n            return OPERATING_SYSTEMS.WINDOWS_PHONE;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.WINRT)) {\r\n            return OPERATING_SYSTEMS.WINDOWS_RT;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.IOS)) {\r\n            return OPERATING_SYSTEMS.IOS;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.ANDROID)) {\r\n            return OPERATING_SYSTEMS.ANDROID;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.LINUX)) {\r\n            return OPERATING_SYSTEMS.LINUX;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.OSX)) {\r\n            return OPERATING_SYSTEMS.MACOSX;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.WIN)) {\r\n            return OPERATING_SYSTEMS.WINDOWS;\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getOsVersion = function (userAgent, osName) {\r\n        if (osName === OPERATING_SYSTEMS.WINDOWS) {\r\n            return this._getWindowsVersion(userAgent);\r\n        }\r\n        if (osName === OPERATING_SYSTEMS.MACOSX) {\r\n            return this._getMacOsxVersion(userAgent);\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getWindowsVersion = function (userAgent) {\r\n        var ntVersionMatches = userAgent.match(new RegExp('Windows NT ' + REGEX_VERSION));\r\n        if (ntVersionMatches && VERSION_MAPPINGS[ntVersionMatches[1]]) {\r\n            return VERSION_MAPPINGS[ntVersionMatches[1]];\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getMacOsxVersion = function (userAgent) {\r\n        var macOsxVersionInUserAgentMatches = userAgent.match(new RegExp(OPERATING_SYSTEMS.MACOSX + ' ' + REGEX_VERSION_MAC));\r\n        if (macOsxVersionInUserAgentMatches) {\r\n            var versionString = macOsxVersionInUserAgentMatches[1].replace(/_/g, '.');\r\n            if (versionString) {\r\n                var delimiter = this._getDelimiter(versionString);\r\n                if (delimiter) {\r\n                    var components = versionString.split(delimiter);\r\n                    return components[0];\r\n                }\r\n                else {\r\n                    return versionString;\r\n                }\r\n            }\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getDelimiter = function (versionString) {\r\n        if (versionString.indexOf('.') > -1) {\r\n            return '.';\r\n        }\r\n        if (versionString.indexOf('_') > -1) {\r\n            return '_';\r\n        }\r\n        return null;\r\n    };\r\n    AWTAutoCollection._saveData = function (name, value) {\r\n        if (this._propertyStorage) {\r\n            this._propertyStorage.setProperty(name, value);\r\n        }\r\n        else if (this._areCookiesAvailable) {\r\n            //Expires in 365 days\r\n            var date = new Date();\r\n            date.setTime(date.getTime() + 31536000000 /*365 days in milliseconds*/);\r\n            var expires = 'expires=' + date.toUTCString();\r\n            document.cookie = name + '=' + value + '; ' + expires;\r\n        }\r\n    };\r\n    AWTAutoCollection._getData = function (name) {\r\n        if (this._propertyStorage) {\r\n            return this._propertyStorage.getProperty(name) || '';\r\n        }\r\n        else if (this._areCookiesAvailable) {\r\n            name = name + '=';\r\n            var ca = document.cookie.split(';');\r\n            for (var i = 0; i < ca.length; i++) {\r\n                var c = ca[i];\r\n                var j = 0;\r\n                while (c.charAt(j) === ' ') {\r\n                    j++;\r\n                }\r\n                c = c.substring(j);\r\n                if (c.indexOf(name) === 0) {\r\n                    return c.substring(name.length, c.length);\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n    AWTAutoCollection._deleteCookie = function (name) {\r\n        if (this._areCookiesAvailable) {\r\n            document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n        }\r\n    };\r\n    AWTAutoCollection._disableCookies = false;\r\n    AWTAutoCollection._areCookiesAvailable = typeof document !== UNDEFINED && typeof document.cookie !== UNDEFINED;\r\n    return AWTAutoCollection;\r\n}());\r\nexports.default = AWTAutoCollection;\r\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AWT_REAL_TIME = 'REAL_TIME';\r\nexports.AWT_NEAR_REAL_TIME = 'NEAR_REAL_TIME';\r\nexports.AWT_BEST_EFFORT = 'BEST_EFFORT';\r\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTLogger.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Enums_1 = __webpack_require__(0);\r\nvar Enums_2 = __webpack_require__(6);\r\nvar AWTEventProperties_1 = __webpack_require__(4);\r\nvar Utils = __webpack_require__(1);\r\nvar AWTStatsManager_1 = __webpack_require__(12);\r\nvar AWTNotificationManager_1 = __webpack_require__(2);\r\nvar AWTTransmissionManagerCore_1 = __webpack_require__(3);\r\nvar AWTLogManagerSettings_1 = __webpack_require__(15);\r\nvar Version = __webpack_require__(13);\r\nvar AWTSemanticContext_1 = __webpack_require__(8);\r\nvar AWTAutoCollection_1 = __webpack_require__(9);\r\n/**\r\n* The AWTLogger class defines a logger.\r\n*/\r\nvar AWTLogger = /** @class */ (function () {\r\n    /**\r\n     * The AWTLogger class constructor.\r\n     * @constructor\r\n     * @param {string} _apiKey - The API key (also known as application key, and tenant token).\r\n     */\r\n    function AWTLogger(_apiKey) {\r\n        this._apiKey = _apiKey;\r\n        this._contextProperties = new AWTEventProperties_1.default();\r\n        this._semanticContext = new AWTSemanticContext_1.default(false, this._contextProperties);\r\n        this._sessionStartTime = 0;\r\n        this._createInitId();\r\n    }\r\n    /**\r\n     * Sets the context sent with every event from this logger.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContext = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setProperty(name, value, type);\r\n    };\r\n    /**\r\n     * Sets context that will be sent with every event from this logger, and tags it as PII.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} pii                    - The kind of PII for the context property, as one of the AWTPiiKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContextWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setPropertyWithPii(name, value, pii, type);\r\n    };\r\n    /**\r\n     * Sets the context that sent with every event from this logger, and tags it as customer content.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} customerContent        - The customer content kind, as one of the AWTCustomerContentKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContextWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setPropertyWithCustomerContent(name, value, customerContent, type);\r\n    };\r\n    /**\r\n     * Gets the logger semantic context.\r\n     * <b>Note:</b> Device properties are not permitted at the logger level, but you can set them\r\n     * at the global level using the AWTLogManager class.\r\n     *\r\n     * @return A AWTSemanticContext object that you can use to set common semantic properties.\r\n     */\r\n    AWTLogger.prototype.getSemanticContext = function () {\r\n        return this._semanticContext;\r\n    };\r\n    /**\r\n     * Logs a custom event with the specified name and fields - to track information\r\n     * such as how a particular feature is used.\r\n     * @param {Object} event - Can be either an AWTEventProperties object or an AWTEventData object or an event name.\r\n     */\r\n    AWTLogger.prototype.logEvent = function (event) {\r\n        if (AWTLogManagerSettings_1.default.loggingEnabled) {\r\n            if (!this._apiKey) {\r\n                this._apiKey = AWTLogManagerSettings_1.default.defaultTenantToken;\r\n                this._createInitId();\r\n            }\r\n            var sanitizeProperties = true;\r\n            if (Utils.isString(event)) {\r\n                event = {\r\n                    name: event\r\n                };\r\n            }\r\n            else if (event instanceof AWTEventProperties_1.default) {\r\n                event = event.getEvent();\r\n                //AWTEventProperties will already sanitize properties\r\n                sanitizeProperties = false;\r\n            }\r\n            AWTStatsManager_1.default.eventReceived(this._apiKey);\r\n            AWTLogger._logEvent(AWTLogger._getInternalEvent(event, this._apiKey), sanitizeProperties, this._contextProperties);\r\n        }\r\n    };\r\n    /**\r\n     * Logs the session state.\r\n     * <b>Note:</b> Calling Logging session <i>start</i> while a session already exists will produce a no-op. Similarly, calling logging\r\n     * session <i>end</i> while a session does not exist will also produce a no-op.\r\n     * @param {enum} state         - The session's state.\r\n     * @param {obbject} properties - [Optional] Properties of the session event as either a AWTEventProperties object,\r\n     * or a AWTEventData object.\r\n     */\r\n    AWTLogger.prototype.logSession = function (state, properties) {\r\n        if (AWTLogManagerSettings_1.default.sessionEnabled) {\r\n            var sessionEvent = {\r\n                name: 'session',\r\n                type: 'session',\r\n                properties: {}\r\n            };\r\n            AWTLogger._addPropertiesToEvent(sessionEvent, properties);\r\n            sessionEvent.priority = Enums_1.AWTEventPriority.High;\r\n            if (state === Enums_2.AWTSessionState.Started) {\r\n                if (this._sessionStartTime > 0) {\r\n                    //Session start called out of order. Session start time being non zero indicates an ongoing session.\r\n                    return;\r\n                }\r\n                this._sessionStartTime = (new Date()).getTime();\r\n                this._sessionId = Utils.newGuid();\r\n                this.setContext('Session.Id', this._sessionId);\r\n            }\r\n            else if (state === Enums_2.AWTSessionState.Ended) {\r\n                if (this._sessionStartTime === 0) {\r\n                    //Session end called out of order. Session start time being zero indicates no ongoing session.\r\n                    return;\r\n                }\r\n                var sessionDurationSec = Math.floor(((new Date()).getTime() - this._sessionStartTime) / 1000);\r\n                sessionEvent.properties['Session.Id'] = this._sessionId;\r\n                sessionEvent.properties['Session.Duration'] = sessionDurationSec.toString();\r\n                sessionEvent.properties['Session.DurationBucket'] =\r\n                    AWTLogger._getSessionDurationFromTime(sessionDurationSec);\r\n                this._sessionStartTime = 0;\r\n                this.setContext('Session.Id', null);\r\n                this._sessionId = undefined;\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n            sessionEvent.properties['Session.FirstLaunchTime'] = AWTAutoCollection_1.default.firstLaunchTime;\r\n            sessionEvent.properties['Session.State'] = state.toString();\r\n            this.logEvent(sessionEvent);\r\n        }\r\n    };\r\n    /**\r\n     * Gets the session ID for the ongoing session.\r\n     * @return {string} A string that contains the session ID for the ongoing session. Returns undefined if there is\r\n     * no ongoing session.\r\n     */\r\n    AWTLogger.prototype.getSessionId = function () {\r\n        return this._sessionId;\r\n    };\r\n    /**\r\n     * Logs a failure event, such as an application exception.\r\n     * @param {string} signature  - A string that identifies the bucket of the failure.\r\n     * @param {string} detail     - A string that contains the a description of the failure.\r\n     * @param {string} category   - [Optional] A string that identifies the category of the failure, such as an application error,\r\n     * a hang, or a crash.\r\n     * @param {string} id         - [Optional] A string that that uniquely identifies this failure.\r\n     * @param {object} properties - [Optional] Properties of the failure event, as either an AWTEventProperties object or an\r\n     * AWTEventData object. This value can also be null.\r\n     */\r\n    AWTLogger.prototype.logFailure = function (signature, detail, category, id, properties) {\r\n        if (!signature || !detail) {\r\n            return;\r\n        }\r\n        var failureEvent = {\r\n            name: 'failure',\r\n            type: 'failure',\r\n            properties: {}\r\n        };\r\n        AWTLogger._addPropertiesToEvent(failureEvent, properties);\r\n        failureEvent.properties['Failure.Signature'] = signature;\r\n        failureEvent.properties['Failure.Detail'] = detail;\r\n        if (category) {\r\n            failureEvent.properties['Failure.Category'] = category;\r\n        }\r\n        if (id) {\r\n            failureEvent.properties['Failure.Id'] = id;\r\n        }\r\n        failureEvent.priority = Enums_1.AWTEventPriority.High;\r\n        this.logEvent(failureEvent);\r\n    };\r\n    /**\r\n     * Logs a page view event which is normally a result of a user action on a UI page - such as search query,\r\n     * a content request, or a page navigation.\r\n     *\r\n     * @param {string} id          - A string that uniquely identifies this page.\r\n     * @param {string} pageName    - The name of the page.\r\n     * @param {string} category    - [Optional] A string that contains the category to which this page belongs.\r\n     * @param {string} uri         - [Optional] A string that contains the URI of this page.\r\n     * @param {string} referrerUri - [Optional] A string that contains the URI that refers to this page.\r\n     * @param {object} properties  - [Optional] Properties of the page view event, as an AWTEventProperties object.\r\n     * This value can also be null.\r\n     */\r\n    AWTLogger.prototype.logPageView = function (id, pageName, category, uri, referrerUri, properties) {\r\n        if (!id || !pageName) {\r\n            return;\r\n        }\r\n        var pageViewEvent = {\r\n            name: 'pageview',\r\n            type: 'pageview',\r\n            properties: {}\r\n        };\r\n        AWTLogger._addPropertiesToEvent(pageViewEvent, properties);\r\n        pageViewEvent.properties['PageView.Id'] = id;\r\n        pageViewEvent.properties['PageView.Name'] = pageName;\r\n        if (category) {\r\n            pageViewEvent.properties['PageView.Category'] = category;\r\n        }\r\n        if (uri) {\r\n            pageViewEvent.properties['PageView.Uri'] = uri;\r\n        }\r\n        if (referrerUri) {\r\n            pageViewEvent.properties['PageView.ReferrerUri'] = referrerUri;\r\n        }\r\n        this.logEvent(pageViewEvent);\r\n    };\r\n    AWTLogger.prototype._createInitId = function () {\r\n        // If no init ID for this tenant token exists, create one\r\n        if (!AWTLogger._initIdMap[this._apiKey] && this._apiKey) {\r\n            AWTLogger._initIdMap[this._apiKey] = Utils.newGuid();\r\n        }\r\n    };\r\n    AWTLogger._addPropertiesToEvent = function (event, propertiesEvent) {\r\n        if (propertiesEvent) {\r\n            if (propertiesEvent instanceof AWTEventProperties_1.default) {\r\n                propertiesEvent = propertiesEvent.getEvent();\r\n            }\r\n            if (propertiesEvent.name) {\r\n                event.name = propertiesEvent.name;\r\n            }\r\n            if (propertiesEvent.priority) {\r\n                event.priority = propertiesEvent.priority;\r\n            }\r\n            for (var name_1 in propertiesEvent.properties) {\r\n                if (propertiesEvent.properties.hasOwnProperty(name_1)) {\r\n                    event.properties[name_1] = propertiesEvent.properties[name_1];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AWTLogger._getSessionDurationFromTime = function (timeInSec) {\r\n        if (timeInSec < 0) {\r\n            return 'Undefined';\r\n        }\r\n        else if (timeInSec <= 3) {\r\n            return 'UpTo3Sec';\r\n        }\r\n        else if (timeInSec <= 10) {\r\n            return 'UpTo10Sec';\r\n        }\r\n        else if (timeInSec <= 30) {\r\n            return 'UpTo30Sec';\r\n        }\r\n        else if (timeInSec <= 60) {\r\n            return 'UpTo60Sec';\r\n        }\r\n        else if (timeInSec <= 180) {\r\n            return 'UpTo3Min';\r\n        }\r\n        else if (timeInSec <= 600) {\r\n            return 'UpTo10Min';\r\n        }\r\n        else if (timeInSec <= 1800) {\r\n            return 'UpTo30Min';\r\n        }\r\n        return 'Above30Min';\r\n    };\r\n    AWTLogger._logEvent = function (eventWithMetaData, sanitizeProperties, contextProperties) {\r\n        if (!eventWithMetaData.name) {\r\n            AWTNotificationManager_1.default.eventsRejected([eventWithMetaData], Enums_1.AWTEventsRejectedReason.InvalidEvent);\r\n            return;\r\n        }\r\n        eventWithMetaData.name = eventWithMetaData.name.toLowerCase();\r\n        //Check if name is a string and replace . with _ if it is. Drop otherwise.\r\n        eventWithMetaData.name = eventWithMetaData.name.replace(Utils.EventNameDotRegex, '_');\r\n        if (!eventWithMetaData.type) {\r\n            eventWithMetaData.type = 'custom';\r\n        }\r\n        else {\r\n            eventWithMetaData.type = eventWithMetaData.type.toLowerCase();\r\n        }\r\n        //Validate name and type and drop if invalid\r\n        if (!Utils.EventNameAndTypeRegex.test(eventWithMetaData.name) || !Utils.EventNameAndTypeRegex.test(eventWithMetaData.type)) {\r\n            AWTNotificationManager_1.default.eventsRejected([eventWithMetaData], Enums_1.AWTEventsRejectedReason.InvalidEvent);\r\n            return;\r\n        }\r\n        if (isNaN(eventWithMetaData.timestamp)) {\r\n            eventWithMetaData.timestamp = (new Date()).getTime();\r\n        }\r\n        // Event Properties\r\n        if (sanitizeProperties && eventWithMetaData.properties) {\r\n            for (var name_2 in eventWithMetaData.properties) {\r\n                if (eventWithMetaData.properties.hasOwnProperty(name_2)) {\r\n                    eventWithMetaData.properties[name_2] = Utils.sanitizeProperty(name_2, eventWithMetaData.properties[name_2]);\r\n                    if (eventWithMetaData.properties[name_2] === null) {\r\n                        delete eventWithMetaData.properties[name_2];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //If no properties create one for EventInfo and context \r\n        if (!eventWithMetaData.properties) {\r\n            eventWithMetaData.properties = {};\r\n        }\r\n        // Logger ContextProperties\r\n        this._addContextIfAbsent(eventWithMetaData, contextProperties.getPropertyMap());\r\n        // LogManager ContextProperties\r\n        this._addContextIfAbsent(eventWithMetaData, AWTLogManagerSettings_1.default.logManagerContext.getPropertyMap());\r\n        //Add event info\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.InitId', this._getInitId(eventWithMetaData.apiKey));\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Sequence', this._getSequenceId(eventWithMetaData.apiKey));\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.SdkVersion', Version.FullVersionString);\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Name', eventWithMetaData.name);\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Time', (new Date(eventWithMetaData.timestamp)).toISOString());\r\n        if (!Utils.isPriority(eventWithMetaData.priority)) {\r\n            eventWithMetaData.priority = Enums_1.AWTEventPriority.Normal;\r\n        }\r\n        this._sendEvent(eventWithMetaData);\r\n    };\r\n    AWTLogger._addContextIfAbsent = function (event, contextProperties) {\r\n        if (contextProperties) {\r\n            for (var name_3 in contextProperties) {\r\n                if (contextProperties.hasOwnProperty(name_3)) {\r\n                    if (!event.properties[name_3]) {\r\n                        event.properties[name_3] = contextProperties[name_3];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AWTLogger._setDefaultProperty = function (event, name, value) {\r\n        event.properties[name] = { value: value, pii: Enums_1.AWTPiiKind.NotSet, type: Enums_1.AWTPropertyType.String };\r\n    };\r\n    AWTLogger._sendEvent = function (event) {\r\n        AWTTransmissionManagerCore_1.default.sendEvent(event);\r\n    };\r\n    AWTLogger._getInternalEvent = function (event, apiKey) {\r\n        var internalEvent = event;\r\n        internalEvent.id = Utils.newGuid();\r\n        internalEvent.apiKey = apiKey;\r\n        return internalEvent;\r\n    };\r\n    AWTLogger._getInitId = function (apiKey) {\r\n        return AWTLogger._initIdMap[apiKey];\r\n    };\r\n    AWTLogger._getSequenceId = function (apiKey) {\r\n        if (AWTLogger._sequenceIdMap[apiKey] === undefined) {\r\n            AWTLogger._sequenceIdMap[apiKey] = 0;\r\n        }\r\n        return (++AWTLogger._sequenceIdMap[apiKey]).toString();\r\n    };\r\n    AWTLogger._sequenceIdMap = {};\r\n    AWTLogger._initIdMap = {};\r\n    return AWTLogger;\r\n}());\r\nexports.default = AWTLogger;\r\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTStatsManager.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Utils = __webpack_require__(1);\r\nvar AWTNotificationManager_1 = __webpack_require__(2);\r\nvar StatsTimer = 60000;\r\n/**\r\n* Class that manages the stats.\r\n*/\r\nvar AWTStatsManager = /** @class */ (function () {\r\n    function AWTStatsManager() {\r\n    }\r\n    /**\r\n     * Intiailizes the stats collection.\r\n     * @param {function} sendStats - The function to call when the stats are ready to be sent.\r\n     */\r\n    AWTStatsManager.initialize = function (sendStats) {\r\n        var _this = this;\r\n        this._sendStats = sendStats;\r\n        this._isInitalized = true;\r\n        AWTNotificationManager_1.default.addNotificationListener({\r\n            eventsSent: function (events) {\r\n                _this._addStat('records_sent_count', events.length, events[0].apiKey);\r\n            },\r\n            eventsDropped: function (events, reason) {\r\n                _this._addStat('records_dropped_count', events.length, events[0].apiKey);\r\n            },\r\n            eventsRejected: function (events, reason) {\r\n                _this._addStat('r_count', events.length, events[0].apiKey);\r\n            },\r\n            eventsRetrying: null\r\n        });\r\n        setTimeout(function () { return _this.flush(); }, StatsTimer);\r\n    };\r\n    /**\r\n     * Flush the current stats and stop the stats collection.\r\n     */\r\n    AWTStatsManager.teardown = function () {\r\n        if (this._isInitalized) {\r\n            this.flush();\r\n            this._isInitalized = false;\r\n        }\r\n    };\r\n    /**\r\n     * Increments the stat for event received.\r\n     * @param {string} apiKey - The apiKey for which the event was received\r\n     */\r\n    AWTStatsManager.eventReceived = function (apiKey) {\r\n        AWTStatsManager._addStat('records_received_count', 1, apiKey);\r\n    };\r\n    /**\r\n     * Creates an event for each tenant token which had a stat and calls the\r\n     * sendStats for that token.\r\n     */\r\n    AWTStatsManager.flush = function () {\r\n        var _this = this;\r\n        if (this._isInitalized) {\r\n            for (var tenantId in this._stats) {\r\n                if (this._stats.hasOwnProperty(tenantId)) {\r\n                    this._sendStats(this._stats[tenantId], tenantId);\r\n                }\r\n            }\r\n            this._stats = {};\r\n            setTimeout(function () { return _this.flush(); }, StatsTimer);\r\n        }\r\n    };\r\n    AWTStatsManager._addStat = function (statName, value, apiKey) {\r\n        if (this._isInitalized && apiKey !== Utils.StatsApiKey) {\r\n            var tenantId = Utils.getTenantId(apiKey);\r\n            if (!this._stats[tenantId]) {\r\n                this._stats[tenantId] = {};\r\n            }\r\n            if (!this._stats[tenantId][statName]) {\r\n                this._stats[tenantId][statName] = value;\r\n            }\r\n            else {\r\n                this._stats[tenantId][statName] = this._stats[tenantId][statName] + value;\r\n            }\r\n        }\r\n    };\r\n    AWTStatsManager._isInitalized = false;\r\n    AWTStatsManager._stats = {};\r\n    return AWTStatsManager;\r\n}());\r\nexports.default = AWTStatsManager;\r\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Version.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File for SDK version.\r\n*/\r\nexports.Version = '1.2.0';\r\nexports.FullVersionString = 'AWT-Web-JS-' + exports.Version;\r\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = __webpack_require__(0);\r\nvar AWTLogManagerSettings_1 = __webpack_require__(15);\r\nvar AWTLogger_1 = __webpack_require__(11);\r\nvar AWTTransmissionManagerCore_1 = __webpack_require__(3);\r\nvar AWTNotificationManager_1 = __webpack_require__(2);\r\nvar AWTAutoCollection_1 = __webpack_require__(9);\r\n/**\r\n* The AWTLogManager class manages the Aria SDK.\r\n*/\r\nvar AWTLogManager = /** @class */ (function () {\r\n    function AWTLogManager() {\r\n    }\r\n    /**\r\n    * Initializes the log manager. After this method is called, events are\r\n    * accepted for transmission.\r\n    * @param {string} tenantToken - A string that contains the default tenant token.\r\n    * @param {object} config      - [Optional] Configuration settings for initialize, as an AWTLogConfiguration object.\r\n    */\r\n    AWTLogManager.initialize = function (tenantToken, configuration) {\r\n        if (configuration === void 0) { configuration = {}; }\r\n        if (this._isInitialized) {\r\n            return;\r\n        }\r\n        this._isInitialized = true;\r\n        AWTLogManagerSettings_1.default.defaultTenantToken = tenantToken;\r\n        this._overrideValuesFromConfig(configuration);\r\n        if (this._config.disableCookiesUsage && !this._config.propertyStorageOverride) {\r\n            AWTLogManagerSettings_1.default.sessionEnabled = false;\r\n        }\r\n        AWTAutoCollection_1.default.addPropertyStorageOverride(this._config.propertyStorageOverride);\r\n        AWTAutoCollection_1.default.autoCollect(AWTLogManagerSettings_1.default.semanticContext, this._config.disableCookiesUsage, this._config.userAgent);\r\n        //Create sender\r\n        AWTTransmissionManagerCore_1.default.initialize(this._config);\r\n        AWTLogManagerSettings_1.default.loggingEnabled = true;\r\n        return this.getLogger();\r\n    };\r\n    /**\r\n     * Gets the global semantic context.\r\n     *\r\n     * @return A AWTSemanticContext object, through which you can set common semantic properties.\r\n     */\r\n    AWTLogManager.getSemanticContext = function () {\r\n        return AWTLogManagerSettings_1.default.semanticContext;\r\n    };\r\n    /**\r\n     * Asynchronously sends events currently in the queue. New events added\r\n     * are sent after the current flush finishes. The passed callback is\r\n     * called when flush finishes. <b>Note:</b> If LogManager is paused, or if\r\n     * flush is called again in less than 30 seconds, then flush is no-op, and\r\n     * the callback is not called.\r\n     * @param {function} callback - The function that is called when flush finishes.\r\n     */\r\n    AWTLogManager.flush = function (callback) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.flush(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Prevents new events from being added for transmission. It also batches all\r\n     * events currently in the queue, and creates requests for them to be sent. If\r\n     * HTML5 Beacons are supported, then they will be used.\r\n     */\r\n    AWTLogManager.flushAndTeardown = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            this._isDestroyed = true;\r\n            AWTTransmissionManagerCore_1.default.flushAndTeardown();\r\n            AWTLogManagerSettings_1.default.loggingEnabled = false;\r\n        }\r\n    };\r\n    /**\r\n     * Pasues the transmission of events.\r\n     */\r\n    AWTLogManager.pauseTransmission = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.pauseTransmission();\r\n        }\r\n    };\r\n    /**\r\n     * Resumes the tranmission of events.\r\n     */\r\n    AWTLogManager.resumeTransmision = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.resumeTransmision();\r\n        }\r\n    };\r\n    /**\r\n     * Sets the transmit profile. This changes the transmission timers\r\n     * based on the transmit profile.\r\n     * @param {string} profileName - A string that contains the name of the transmit profile.\r\n     */\r\n    AWTLogManager.setTransmitProfile = function (profileName) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.setTransmitProfile(profileName);\r\n        }\r\n    };\r\n    /**\r\n     * Loads custom transmission profiles. Each profile should have timers for\r\n     * high, normal, and low. Each profile should make sure\r\n     * that a each priority timer is a multiple of the priority higher than it.\r\n     * Setting the timer value to <i>-1</i> means the events for that priority will\r\n     * not be sent. Note that once a priority has been set to <i>not send</i>, then all priorities\r\n     * below it will also not be sent. The timers should be in the form of [low, normal, high].\r\n     * E.g, <i>Custom: [30,10,5]</i>.\r\n     * This method removes any previously loaded custom profiles.\r\n     * @param {object} profiles - A dictionary that contains the transmit profiles.\r\n     */\r\n    AWTLogManager.loadTransmitProfiles = function (profiles) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.loadTransmitProfiles(profiles);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the context sent with every event.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.setContext = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setProperty(name, value, type);\r\n    };\r\n    /**\r\n     * Sets the context sents with every event, and tags it as PII.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} pii                    - The kind of PII for the context property.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.setContextWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setPropertyWithPii(name, value, pii, type);\r\n    };\r\n    /**\r\n     * Sets the context sent with every event from this logger, and tags it as <i>customer content</i>.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} customerContent        - The kind of customer content for the context property, as one of the\r\n     * AWTCustomerContentKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.prototype.setContextWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setPropertyWithCustomerContent(name, value, customerContent, type);\r\n    };\r\n    /**\r\n     * Gets the logger for the specified tenant token.\r\n     * @param {string} tenantToken - A string that contains the tenant token.\r\n     * @return An AWTLogger object which sends data with the specified tenant token. If the tenant token is\r\n     * undefined, or null, or empty, then undefined is returned.\r\n     */\r\n    AWTLogManager.getLogger = function (tenantToken) {\r\n        var key = tenantToken;\r\n        if (!key || key === AWTLogManagerSettings_1.default.defaultTenantToken) {\r\n            key = '';\r\n        }\r\n        if (!this._loggers[tenantToken]) {\r\n            this._loggers[tenantToken] = new AWTLogger_1.default(tenantToken);\r\n        }\r\n        return this._loggers[tenantToken];\r\n    };\r\n    /**\r\n     * Adds a notification listener. The Aria SDK calls methods on the listener\r\n     * when an appropriate notification is raised.\r\n     * @param {object} listener - An AWTNotificationListener object.\r\n     */\r\n    AWTLogManager.addNotificationListener = function (listener) {\r\n        AWTNotificationManager_1.default.addNotificationListener(listener);\r\n    };\r\n    AWTLogManager._overrideValuesFromConfig = function (config) {\r\n        if (config.collectorUri) {\r\n            this._config.collectorUri = config.collectorUri;\r\n        }\r\n        if (config.cacheMemorySizeLimitInNumberOfEvents > 0) {\r\n            this._config.cacheMemorySizeLimitInNumberOfEvents = config.cacheMemorySizeLimitInNumberOfEvents;\r\n        }\r\n        if (config.httpXHROverride && config.httpXHROverride.sendPOST) {\r\n            this._config.httpXHROverride = config.httpXHROverride;\r\n        }\r\n        if (config.propertyStorageOverride && config.propertyStorageOverride.getProperty &&\r\n            config.propertyStorageOverride.setProperty) {\r\n            this._config.propertyStorageOverride = config.propertyStorageOverride;\r\n        }\r\n        if (config.userAgent) {\r\n            this._config.userAgent = config.userAgent;\r\n        }\r\n        if (config.disableCookiesUsage) {\r\n            this._config.disableCookiesUsage = config.disableCookiesUsage;\r\n        }\r\n        if (config.canSendStatEvent) {\r\n            this._config.canSendStatEvent = config.canSendStatEvent;\r\n        }\r\n    };\r\n    AWTLogManager._loggers = {};\r\n    AWTLogManager._isInitialized = false;\r\n    AWTLogManager._isDestroyed = false;\r\n    AWTLogManager._config = {\r\n        collectorUri: 'https://browser.pipe.aria.microsoft.com/Collector/3.0/',\r\n        cacheMemorySizeLimitInNumberOfEvents: 10000,\r\n        disableCookiesUsage: false,\r\n        canSendStatEvent: function (eventName) { return true; }\r\n    };\r\n    return AWTLogManager;\r\n}());\r\nexports.default = AWTLogManager;\r\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTLogManagerSettings.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar AWTEventProperties_1 = __webpack_require__(4);\r\nvar AWTSemanticContext_1 = __webpack_require__(8);\r\n/**\r\n* Class that stores LogManagers context.\r\n*/\r\nvar AWTLogManagerSettings = /** @class */ (function () {\r\n    function AWTLogManagerSettings() {\r\n    }\r\n    AWTLogManagerSettings.logManagerContext = new AWTEventProperties_1.default();\r\n    AWTLogManagerSettings.sessionEnabled = true;\r\n    AWTLogManagerSettings.loggingEnabled = false;\r\n    AWTLogManagerSettings.defaultTenantToken = '';\r\n    AWTLogManagerSettings.semanticContext = new AWTSemanticContext_1.default(true, AWTLogManagerSettings.logManagerContext);\r\n    return AWTLogManagerSettings;\r\n}());\r\nexports.default = AWTLogManagerSettings;\r\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nexports.__esModule = true;\r\nvar logger_1 = __webpack_require__(17);\r\nvar ARIA_SCRIPT = document.getElementById('ARIA-LOG');\r\nconsole.assert(!!ARIA_SCRIPT, 'the element with id=\"ARIA-LOG\" NOT exist in this document');\r\nvar CONFIG = document.getElementById('ARIA-LOG').dataset;\r\nvar TOKEN = CONFIG.token;\r\nvar LEVEL = (CONFIG.level || 'warn').toLocaleLowerCase();\r\nvar USER_ID = CONFIG.userid;\r\nvar CORELATION_ID = CONFIG.corelation || ((new Date).getTime() + '-' + Math.random());\r\nvar APP_NAME = CONFIG.appname || location.hostname;\r\nvar LOG_TABLE = (CONFIG.table || APP_NAME).replace(/[^\\w\\d]/g, '');\r\nvar VERBOSE = 'debug' in CONFIG ? CONFIG['debug'].toLowerCase() === \"true\" : true;\r\nconsole.assert(TOKEN && TOKEN.length > 0, 'data-token=\"token string\" MUST have an value');\r\nconsole.assert(LOG_TABLE.length >= 4, 'the table name MUST be 4-100 alphanumeric chars');\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"all\"] = 0] = \"all\";\r\n    LogLevel[LogLevel[\"trace\"] = 10] = \"trace\";\r\n    LogLevel[LogLevel[\"debug\"] = 20] = \"debug\";\r\n    LogLevel[LogLevel[\"info\"] = 400] = \"info\";\r\n    LogLevel[LogLevel[\"warn\"] = 500] = \"warn\";\r\n    LogLevel[LogLevel[\"error\"] = 600] = \"error\";\r\n    LogLevel[LogLevel[\"critical\"] = 700] = \"critical\";\r\n    LogLevel[LogLevel[\"alert\"] = 800] = \"alert\";\r\n})(LogLevel || (LogLevel = {}));\r\nvar _originConsole = {\r\n    log: console.log\r\n};\r\nfunction Log(level, action, content, attrs) {\r\n    var data = {\r\n        action: action,\r\n        title: document.title,\r\n        url: document.URL\r\n    };\r\n    for (var key in attrs) {\r\n        data[key] = attrs[key];\r\n    }\r\n    data.content = typeof content === 'object' ? JSON.stringify(content) : content;\r\n    if (level === \"telemetry\") {\r\n        logger_1.telemetry(data);\r\n    }\r\n    else if (!LEVEL || (LogLevel[level] >= LogLevel[LEVEL])) {\r\n        data.level = level;\r\n        logger_1.log(data);\r\n    }\r\n}\r\n;\r\nlogger_1.init(TOKEN, APP_NAME, LOG_TABLE, {\r\n    CorelationId: CORELATION_ID,\r\n    UserId: USER_ID\r\n});\r\nconsole.log = function () {\r\n    if (VERBOSE) {\r\n        _originConsole.log.apply(console, arguments);\r\n    }\r\n    if (arguments.length > 1 && arguments.length < 3) {\r\n        Log.apply(null, arguments);\r\n    }\r\n};\r\n['info', 'debug', 'warn', 'error'].forEach(function (key) {\r\n    _originConsole[key] = console[key];\r\n    console[key] = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (VERBOSE) {\r\n            _originConsole[key].apply(null, args);\r\n        }\r\n        if (args.length && args.length < 3) {\r\n            args.unshift(key);\r\n            Log.apply(Log, args);\r\n        }\r\n    };\r\n});\r\nif (CONFIG.flush) {\r\n    window.onbeforeunload = logger_1.flush;\r\n}\r\nwindow.onerror = function (msg, url, line, col, error) {\r\n    Log('error', msg, error, {\r\n        file: url,\r\n        line: line,\r\n        col: col\r\n    });\r\n};\r\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nexports.__esModule = true;\r\nvar webjs_sdk_1 = __webpack_require__(18);\r\nvar _logger;\r\nvar _token;\r\nvar _name = \"logging\";\r\nvar _table;\r\nvar _config = {};\r\nfunction getLogger() {\r\n    if (!_logger) {\r\n        webjs_sdk_1.AWTLogManager.initialize(_token);\r\n        _logger = webjs_sdk_1.AWTLogManager.getLogger();\r\n        _logger.setContext(\"AppName\", _name);\r\n        _logger.setContext(\"UserAgent\", navigator.userAgent);\r\n        for (var key in _config) {\r\n            _logger.setContext(key, _config[key]);\r\n        }\r\n    }\r\n    return _logger;\r\n}\r\nfunction init(token, name, table, config) {\r\n    _token = token;\r\n    _name = name;\r\n    _table = table;\r\n}\r\nexports.init = init;\r\nfunction log(data) {\r\n    return getLogger().logEvent({\r\n        name: _table || _name,\r\n        properties: data\r\n    });\r\n}\r\nexports.log = log;\r\nfunction telemetry(data) {\r\n    return getLogger().logEvent({\r\n        name: 'telemetry',\r\n        properties: data\r\n    });\r\n}\r\nexports.telemetry = telemetry;\r\nfunction flush() {\r\n    if (_logger) {\r\n        webjs_sdk_1.AWTLogManager.flushAndTeardown();\r\n        _logger = null;\r\n    }\r\n    return true;\r\n}\r\nexports.flush = flush;\r\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AriaSDK.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File to export public classes, interfaces and enums.\r\n*/\r\nvar Enums_1 = __webpack_require__(0);\r\nexports.AWTPropertyType = Enums_1.AWTPropertyType;\r\nexports.AWTPiiKind = Enums_1.AWTPiiKind;\r\nexports.AWTEventPriority = Enums_1.AWTEventPriority;\r\nexports.AWTEventsDroppedReason = Enums_1.AWTEventsDroppedReason;\r\nexports.AWTEventsRejectedReason = Enums_1.AWTEventsRejectedReason;\r\nexports.AWTCustomerContentKind = Enums_1.AWTCustomerContentKind;\r\nvar Enums_2 = __webpack_require__(6);\r\nexports.AWTUserIdType = Enums_2.AWTUserIdType;\r\nexports.AWTSessionState = Enums_2.AWTSessionState;\r\nvar DataModels_1 = __webpack_require__(10);\r\nexports.AWT_BEST_EFFORT = DataModels_1.AWT_BEST_EFFORT;\r\nexports.AWT_NEAR_REAL_TIME = DataModels_1.AWT_NEAR_REAL_TIME;\r\nexports.AWT_REAL_TIME = DataModels_1.AWT_REAL_TIME;\r\nvar AWTEventProperties_1 = __webpack_require__(4);\r\nexports.AWTEventProperties = AWTEventProperties_1.default;\r\nvar AWTLogger_1 = __webpack_require__(11);\r\nexports.AWTLogger = AWTLogger_1.default;\r\nvar AWTLogManager_1 = __webpack_require__(14);\r\nexports.AWTLogManager = AWTLogManager_1.default;\r\nvar AWTTransmissionManager_1 = __webpack_require__(31);\r\nexports.AWTTransmissionManager = AWTTransmissionManager_1.default;\r\nvar AWTSerializer_1 = __webpack_require__(7);\r\nexports.AWTSerializer = AWTSerializer_1.default;\r\nvar AWTSemanticContext_1 = __webpack_require__(8);\r\nexports.AWTSemanticContext = AWTSemanticContext_1.default;\r\nexports.AWT_COLLECTOR_URL_UNITED_STATES = 'https://us.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_GERMANY = 'https://de.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_JAPAN = 'https://jp.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_AUSTRALIA = 'https://au.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_EUROPE = 'https://eu.pipe.aria.microsoft.com/Collector/3.0/';\r\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = __webpack_require__(0);\r\nvar AWTHttpManager_1 = __webpack_require__(20);\r\nvar AWTTransmissionManagerCore_1 = __webpack_require__(3);\r\nvar AWTRecordBatcher_1 = __webpack_require__(30);\r\nvar AWTSerializer_1 = __webpack_require__(7);\r\nvar AWTNotificationManager_1 = __webpack_require__(2);\r\nvar RequestSizeLimitBytes = 2936012; //approx 2.8 Mb\r\nvar UploadNowCheckTimer = 250;\r\n/**\r\n * Class that manages adding events to inbound queues and batching of events\r\n * into requests.\r\n */\r\nvar AWTQueueManager = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {string} collectorUrl - The collector url to which the requests must be sent.\r\n     */\r\n    function AWTQueueManager(collectorUrl, _queueSizeLimit, xhrOverride) {\r\n        this._queueSizeLimit = _queueSizeLimit;\r\n        this._isCurrentlyUploadingNow = false;\r\n        this._uploadNowQueue = [];\r\n        this._shouldDropEventsOnPause = false;\r\n        this._paused = false;\r\n        this._queueSize = 0;\r\n        this._outboundQueue = [];\r\n        this._inboundQueues = {};\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High] = [];\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal] = [];\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low] = [];\r\n        this._addEmptyQueues();\r\n        this._batcher = new AWTRecordBatcher_1.default(RequestSizeLimitBytes, this._outboundQueue);\r\n        this._httpManager = new AWTHttpManager_1.default(this._outboundQueue, collectorUrl, this, xhrOverride);\r\n    }\r\n    /**\r\n     * Add an event to the appropriate inbound queue based on its priority.\r\n     * @param {object} event - The event to be added to the queue.\r\n     */\r\n    AWTQueueManager.prototype.addEvent = function (event) {\r\n        if (this._queueSize < this._queueSizeLimit) {\r\n            if (!this._paused || !this._shouldDropEventsOnPause) {\r\n                this._queueSize++;\r\n                this._inboundQueues[event.priority][this._inboundQueues[event.priority].length - 1].push(event);\r\n            }\r\n        }\r\n        else {\r\n            AWTNotificationManager_1.default.eventsDropped([event], Enums_1.AWTEventsDroppedReason.QueueFull);\r\n        }\r\n    };\r\n    /**\r\n     * Batch and send events currently in the queue for the given priority.\r\n     * @param {enum} priority - Priority for which to send events.\r\n     */\r\n    AWTQueueManager.prototype.sendEventsForPriorityAndAbove = function (priority) {\r\n        this._batchEvents(priority);\r\n        this._httpManager.sendQueuedRequests();\r\n    };\r\n    /**\r\n     * Check if the inbound queues or batcher has any events that can be sent presently.\r\n     * @return {boolean} True if there are events, false otherwise.\r\n     */\r\n    AWTQueueManager.prototype.hasEvents = function () {\r\n        return (this._inboundQueues[Enums_1.AWTEventPriority.High][0].length > 0 || this._inboundQueues[Enums_1.AWTEventPriority.Normal][0].length > 0\r\n            || this._inboundQueues[Enums_1.AWTEventPriority.Low][0].length > 0 || this._batcher.hasBatch())\r\n            && this._httpManager.hasIdleConnection();\r\n    };\r\n    /**\r\n     * Add back the events from a failed request back to the queue.\r\n     * @param {object} request - The request whose events need to be added back to the batcher.\r\n     */\r\n    AWTQueueManager.prototype.addBackRequest = function (request) {\r\n        if (!this._paused || !this._shouldDropEventsOnPause) {\r\n            for (var token in request) {\r\n                if (request.hasOwnProperty(token)) {\r\n                    for (var i = 0; i < request[token].length; ++i) {\r\n                        this.addEvent(request[token][i]);\r\n                    }\r\n                }\r\n            }\r\n            AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Batch all current events in the queues and send them.\r\n     */\r\n    AWTQueueManager.prototype.teardown = function () {\r\n        if (!this._paused) {\r\n            this._batchEvents(Enums_1.AWTEventPriority.Low);\r\n            this._httpManager.flush();\r\n        }\r\n    };\r\n    /**\r\n     * Sends events for all priority for the current inbound queue.\r\n     * This method adds new inbound queues to which new events will be added.\r\n     * @param {function} callback - The function to be called when uploadNow is finished.\r\n     */\r\n    AWTQueueManager.prototype.uploadNow = function (callback) {\r\n        var _this = this;\r\n        this._addEmptyQueues();\r\n        if (!this._isCurrentlyUploadingNow) {\r\n            this._isCurrentlyUploadingNow = true;\r\n            setTimeout(function () { return _this._uploadNow(callback); }, 0);\r\n        }\r\n        else {\r\n            this._uploadNowQueue.push(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Pause the tranmission of any requests\r\n     */\r\n    AWTQueueManager.prototype.pauseTransmission = function () {\r\n        this._paused = true;\r\n        this._httpManager.pause();\r\n        if (this.shouldDropEventsOnPause) {\r\n            this._queueSize -= (this._inboundQueues[Enums_1.AWTEventPriority.High][0].length +\r\n                this._inboundQueues[Enums_1.AWTEventPriority.Normal][0].length + this._inboundQueues[Enums_1.AWTEventPriority.Low][0].length);\r\n            this._inboundQueues[Enums_1.AWTEventPriority.High][0] = [];\r\n            this._inboundQueues[Enums_1.AWTEventPriority.Normal][0] = [];\r\n            this._inboundQueues[Enums_1.AWTEventPriority.Low][0] = [];\r\n            this._httpManager.removeQueuedRequests();\r\n        }\r\n    };\r\n    /**\r\n     * Resumes transmission of events.\r\n     */\r\n    AWTQueueManager.prototype.resumeTransmission = function () {\r\n        this._paused = false;\r\n        this._httpManager.resume();\r\n    };\r\n    /**\r\n     * Determines whether events in the queues should be dropped when transmission is paused.\r\n     */\r\n    AWTQueueManager.prototype.shouldDropEventsOnPause = function (shouldDropEventsOnPause) {\r\n        this._shouldDropEventsOnPause = shouldDropEventsOnPause;\r\n    };\r\n    /**\r\n     * Remove the first queues for all priorities in the inbound queues map. This is called\r\n     * when transmission manager has finished flushing the events in the old queues. We now make\r\n     * the next queue the primary queue.\r\n     */\r\n    AWTQueueManager.prototype._removeFirstQueues = function () {\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High].shift();\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal].shift();\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low].shift();\r\n    };\r\n    /**\r\n     * Add empty queues for all priorities in the inbound queues map. This is called\r\n     * when Transmission Manager is being flushed. This ensures that new events added\r\n     * after flush are stored separately till we flush the current events.\r\n     */\r\n    AWTQueueManager.prototype._addEmptyQueues = function () {\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High].push([]);\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal].push([]);\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low].push([]);\r\n    };\r\n    AWTQueueManager.prototype._batchEvents = function (priority) {\r\n        var priorityToProcess = Enums_1.AWTEventPriority.High;\r\n        while (priorityToProcess >= priority) {\r\n            while (this._inboundQueues[priorityToProcess][0].length > 0) {\r\n                var event_1 = this._inboundQueues[priorityToProcess][0].pop();\r\n                this._queueSize--;\r\n                if (!event_1.serializedEvent) {\r\n                    event_1.serializedEvent = AWTSerializer_1.default.getEventBlob(event_1);\r\n                }\r\n                this._batcher.addEventToBatch(event_1);\r\n            }\r\n            priorityToProcess--;\r\n        }\r\n        this._batcher.flushBatch();\r\n    };\r\n    AWTQueueManager.prototype._uploadNow = function (callback) {\r\n        var _this = this;\r\n        if (this.hasEvents()) {\r\n            this.sendEventsForPriorityAndAbove(Enums_1.AWTEventPriority.Low);\r\n        }\r\n        this._checkOutboundQueueEmptyAndSent(function () {\r\n            //Move the next queues to be primary\r\n            _this._removeFirstQueues();\r\n            if (callback !== null && callback !== undefined) {\r\n                callback();\r\n            }\r\n            if (_this._uploadNowQueue.length > 0) {\r\n                setTimeout(function () { return _this._uploadNow(_this._uploadNowQueue.shift()); }, 0);\r\n            }\r\n            else {\r\n                _this._isCurrentlyUploadingNow = false;\r\n                if (_this.hasEvents()) {\r\n                    AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    AWTQueueManager.prototype._checkOutboundQueueEmptyAndSent = function (callback) {\r\n        var _this = this;\r\n        if (this._httpManager.isCompletelyIdle()) {\r\n            callback();\r\n        }\r\n        else {\r\n            setTimeout(function () { return _this._checkOutboundQueueEmptyAndSent(callback); }, UploadNowCheckTimer);\r\n        }\r\n    };\r\n    return AWTQueueManager;\r\n}());\r\nexports.default = AWTQueueManager;\r\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = __webpack_require__(0);\r\nvar AWTSerializer_1 = __webpack_require__(7);\r\nvar AWTRetryPolicy_1 = __webpack_require__(27);\r\nvar AWTKillSwitch_1 = __webpack_require__(28);\r\nvar AWTClockSkewManager_1 = __webpack_require__(29);\r\nvar Version = __webpack_require__(13);\r\nvar Utils = __webpack_require__(1);\r\nvar AWTNotificationManager_1 = __webpack_require__(2);\r\nvar AWTTransmissionManagerCore_1 = __webpack_require__(3);\r\nvar MaxConnections = 2;\r\nvar MaxRetries = 1;\r\nvar Method = 'POST';\r\n/**\r\n * Class managing the sending of requests.\r\n */\r\nvar AWTHttpManager = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {object} requestQueue   - The queue that contains the requests to be sent.\r\n     * @param {string} collectorUrl   - The collector url to which the requests must be sent.\r\n     * @param {object} _queueManager  - The queue manager that we should add requests back to if needed.\r\n     * @param {object} _httpInterface - The http interface that should be used to send HTTP requests.\r\n     */\r\n    function AWTHttpManager(_requestQueue, collectorUrl, _queueManager, _httpInterface) {\r\n        var _this = this;\r\n        this._requestQueue = _requestQueue;\r\n        this._queueManager = _queueManager;\r\n        this._httpInterface = _httpInterface;\r\n        this._urlString = '?qsp=true&content-type=application%2Fbond-compact-binary&client-id=NO_AUTH&sdk-version='\r\n            + Version.FullVersionString;\r\n        this._killSwitch = new AWTKillSwitch_1.default();\r\n        this._paused = false;\r\n        this._clockSkewManager = new AWTClockSkewManager_1.default();\r\n        this._useBeacons = false;\r\n        this._activeConnections = 0;\r\n        if (!Utils.isUint8ArrayAvailable()) {\r\n            this._urlString += '&content-encoding=base64';\r\n        }\r\n        this._urlString = collectorUrl + this._urlString;\r\n        if (!this._httpInterface) {\r\n            this._useBeacons = !Utils.isReactNative(); //Only use beacons if not running in React Native\r\n            this._httpInterface = {\r\n                sendPOST: function (urlString, data, ontimeout, onerror, onload, sync) {\r\n                    if (Utils.useXDomainRequest()) {\r\n                        var xdr = new XDomainRequest();\r\n                        xdr.open(Method, urlString);\r\n                        //can't get the status code in xdr.\r\n                        xdr.onload = function () {\r\n                            // we will assume onload means the request succeeded.\r\n                            onload(200, null);\r\n                        };\r\n                        xdr.onerror = function () {\r\n                            // we will assume onerror means we need to drop the events.\r\n                            onerror(400, null);\r\n                        };\r\n                        xdr.ontimeout = function () {\r\n                            // we will assume ontimeout means we need to retry the events.\r\n                            ontimeout(500, null);\r\n                        };\r\n                        xdr.send(data);\r\n                    }\r\n                    else if (Utils.isReactNative()) {\r\n                        //Use the fetch API to send events in React Native\r\n                        fetch(urlString, {\r\n                            body: data,\r\n                            method: Method\r\n                        }).then(function (response) {\r\n                            var headerMap = {};\r\n                            if (response.headers) {\r\n                                response.headers.forEach(function (value, name) {\r\n                                    headerMap[name] = value;\r\n                                });\r\n                            }\r\n                            onload(response.status, headerMap);\r\n                        }).catch(function (error) {\r\n                            //In case there is an error in the request. Set the status to 0\r\n                            //so that the events can be retried later.\r\n                            onerror(0, {});\r\n                        });\r\n                    }\r\n                    else {\r\n                        var xhr_1 = new XMLHttpRequest();\r\n                        xhr_1.open(Method, urlString, !sync);\r\n                        xhr_1.onload = function () {\r\n                            onload(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.onerror = function () {\r\n                            onerror(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.ontimeout = function () {\r\n                            ontimeout(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.send(data);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Check if there is an idle connection overwhich we can send a request.\r\n     * @return {boolean} True if there is an idle connection, false otherwise.\r\n     */\r\n    AWTHttpManager.prototype.hasIdleConnection = function () {\r\n        return this._activeConnections < MaxConnections;\r\n    };\r\n    /**\r\n     * Send requests in the request queue up if there is an idle connection, sending is\r\n     * not pause and clock skew manager allows sending request.\r\n     */\r\n    AWTHttpManager.prototype.sendQueuedRequests = function () {\r\n        while (this.hasIdleConnection() && !this._paused && this._requestQueue.length > 0\r\n            && this._clockSkewManager.allowRequestSending()) {\r\n            this._activeConnections++;\r\n            this._sendRequest(this._requestQueue.pop(), 0, false);\r\n        }\r\n        //No more requests to send, tell TPM to try to schedule timer\r\n        //in case it was waiting for idle connections\r\n        if (this.hasIdleConnection()) {\r\n            AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Check if there are no active requests being sent.\r\n     * @return {boolean} True if idle, false otherwise.\r\n     */\r\n    AWTHttpManager.prototype.isCompletelyIdle = function () {\r\n        return this._activeConnections === 0;\r\n    };\r\n    /**\r\n     * Queue all the remaning requests to be sent. The requests will be\r\n     * sent using HTML5 Beacons if they are available.\r\n     */\r\n    AWTHttpManager.prototype.flush = function () {\r\n        while (this._requestQueue.length > 0) {\r\n            this._sendRequest(this._requestQueue.pop(), 0, true);\r\n        }\r\n    };\r\n    /**\r\n     * Pause the sending of requests. No new requests will be sent.\r\n     */\r\n    AWTHttpManager.prototype.pause = function () {\r\n        this._paused = true;\r\n    };\r\n    /**\r\n     * Resume the sending of requests.\r\n     */\r\n    AWTHttpManager.prototype.resume = function () {\r\n        this._paused = false;\r\n        this.sendQueuedRequests();\r\n    };\r\n    /**\r\n     * Removes any pending requests to be sent.\r\n     */\r\n    AWTHttpManager.prototype.removeQueuedRequests = function () {\r\n        this._requestQueue.length = 0;\r\n    };\r\n    AWTHttpManager.prototype._sendRequest = function (request, retryCount, isTeardown) {\r\n        var _this = this;\r\n        if (this._paused) {\r\n            this._activeConnections--;\r\n            this._queueManager.addBackRequest(request);\r\n            return;\r\n        }\r\n        var tokenCount = 0;\r\n        var apikey = '';\r\n        for (var token in request) {\r\n            if (request.hasOwnProperty(token)) {\r\n                if (!this._killSwitch.isTenantKilled(token)) {\r\n                    if (apikey.length > 0) {\r\n                        apikey += ',';\r\n                    }\r\n                    apikey += token;\r\n                    tokenCount++;\r\n                }\r\n                else {\r\n                    AWTNotificationManager_1.default.eventsDropped(request[token], Enums_1.AWTEventsDroppedReason.KillSwitch);\r\n                    delete request[token];\r\n                }\r\n            }\r\n        }\r\n        if (tokenCount > 0) {\r\n            var blob = AWTSerializer_1.default.getPayloadBlob(request, tokenCount);\r\n            var urlString = this._urlString + '&x-apikey=' + apikey + '&client-time-epoch-millis='\r\n                + Date.now().toString();\r\n            if (this._clockSkewManager.shouldAddClockSkewHeaders()) {\r\n                urlString = urlString + '&time-delta-to-apply-millis=' + this._clockSkewManager.getClockSkewHeaderValue();\r\n            }\r\n            var data = void 0;\r\n            if (!Utils.isUint8ArrayAvailable()) {\r\n                data = AWTSerializer_1.default.base64Encode(blob);\r\n            }\r\n            else {\r\n                data = new Uint8Array(blob);\r\n            }\r\n            //beacons will not be used if an http interface was passed by the customer\r\n            if (this._useBeacons && isTeardown && Utils.isBeaconsSupported()) {\r\n                navigator.sendBeacon(urlString, data);\r\n            }\r\n            else {\r\n                this._httpInterface.sendPOST(urlString, data, function (status, headers) {\r\n                    _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount);\r\n                }, function (status, headers) {\r\n                    _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount);\r\n                }, function (status, headers) {\r\n                    _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount);\r\n                }, false);\r\n            }\r\n        }\r\n        else if (!isTeardown) {\r\n            this._handleRequestFinished(null, {});\r\n        }\r\n    };\r\n    AWTHttpManager.prototype._retryRequestIfNeeded = function (status, headers, request, tokenCount, apikey, retryCount) {\r\n        var _this = this;\r\n        var shouldRetry = true;\r\n        if (typeof status !== 'undefined') {\r\n            if (headers) {\r\n                var killedTokens = this._killSwitch.setKillSwitchTenants(headers['kill-tokens'], headers['kill-duration-seconds']);\r\n                this._clockSkewManager.setClockSkew(headers['time-delta-millis']);\r\n                for (var i = 0; i < killedTokens.length; ++i) {\r\n                    AWTNotificationManager_1.default.eventsDropped(request[killedTokens[i]], Enums_1.AWTEventsDroppedReason.KillSwitch);\r\n                    delete request[killedTokens[i]];\r\n                    tokenCount--;\r\n                }\r\n            }\r\n            else {\r\n                this._clockSkewManager.setClockSkew(null);\r\n            }\r\n            if (status === 200) {\r\n                this._handleRequestFinished(true, request);\r\n                return;\r\n            }\r\n            if (!AWTRetryPolicy_1.default.shouldRetryForStatus(status) || tokenCount <= 0) {\r\n                shouldRetry = false;\r\n            }\r\n        }\r\n        if (shouldRetry) {\r\n            if (retryCount < MaxRetries) {\r\n                for (var token in request) {\r\n                    if (request.hasOwnProperty(token)) {\r\n                        AWTNotificationManager_1.default.eventsRetrying(request[token]);\r\n                    }\r\n                }\r\n                setTimeout(function () { return _this._sendRequest(request, retryCount + 1, false); }, AWTRetryPolicy_1.default.getMillisToBackoffForRetry(retryCount));\r\n            }\r\n            else {\r\n                this._activeConnections--;\r\n                AWTTransmissionManagerCore_1.default.backOffTransmission();\r\n                this._queueManager.addBackRequest(request);\r\n            }\r\n        }\r\n        else {\r\n            this._handleRequestFinished(false, request);\r\n        }\r\n    };\r\n    AWTHttpManager.prototype._handleRequestFinished = function (success, request) {\r\n        if (success) {\r\n            AWTTransmissionManagerCore_1.default.clearBackOff();\r\n        }\r\n        for (var token in request) {\r\n            if (request.hasOwnProperty(token)) {\r\n                if (success) {\r\n                    AWTNotificationManager_1.default.eventsSent(request[token]);\r\n                }\r\n                else {\r\n                    AWTNotificationManager_1.default.eventsDropped(request[token], Enums_1.AWTEventsDroppedReason.NonRetryableStatus);\r\n                }\r\n            }\r\n        }\r\n        this._activeConnections--;\r\n        this.sendQueuedRequests();\r\n    };\r\n    /**\r\n     * Converts the XHR getAllResponseHeaders to a map containing the header key and value.\r\n     */\r\n    AWTHttpManager.prototype._convertAllHeadersToMap = function (headersString) {\r\n        var headers = {};\r\n        if (headersString) {\r\n            var headersArray = headersString.split('\\n');\r\n            for (var i = 0; i < headersArray.length; ++i) {\r\n                var header = headersArray[i].split(': ');\r\n                headers[header[0]] = header[1];\r\n            }\r\n        }\r\n        return headers;\r\n    };\r\n    return AWTHttpManager;\r\n}());\r\nexports.default = AWTHttpManager;\r\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/**\r\n* microsoft.bond.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar bond_const_1 = __webpack_require__(22);\r\nexports._BondDataType = bond_const_1._BondDataType;\r\nvar _Encoding = __webpack_require__(23);\r\nexports._Encoding = _Encoding;\r\nvar IO = __webpack_require__(26);\r\nexports.IO = IO;\r\nvar microsoft_bond_primitives_1 = __webpack_require__(5);\r\nexports.Int64 = microsoft_bond_primitives_1.Int64;\r\nexports.UInt64 = microsoft_bond_primitives_1.UInt64;\r\nexports.Number = microsoft_bond_primitives_1.Number;\r\nvar CompactBinaryProtocolWriter = /** @class */ (function () {\r\n    function CompactBinaryProtocolWriter(stream) {\r\n        this._stream = stream;\r\n    }\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteBlob = function (blob) {\r\n        this._stream._Write(blob, 0, blob.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteBool = function (value) {\r\n        this._stream._WriteByte(value ? 1 : 0);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteContainerBegin = function (size, elementType) {\r\n        this._WriteUInt8(elementType);\r\n        this._WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteMapContainerBegin = function (size, keyType, valueType) {\r\n        this._WriteUInt8(keyType);\r\n        this._WriteUInt8(valueType);\r\n        this._WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteDouble = function (value) {\r\n        var array = _Encoding._Double_GetBytes(value);\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteFieldBegin = function (type, id, metadata) {\r\n        if (id <= 5) {\r\n            this._stream._WriteByte(type | (id << 5));\r\n        }\r\n        else if (id <= 0xff) {\r\n            this._stream._WriteByte(type | (6 << 5));\r\n            this._stream._WriteByte(id);\r\n        }\r\n        else {\r\n            this._stream._WriteByte(type | (7 << 5));\r\n            this._stream._WriteByte(id);\r\n            this._stream._WriteByte(id >> 8);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteInt32 = function (value) {\r\n        value = _Encoding._Zigzag_EncodeZigzag32(value);\r\n        this._WriteUInt32(value);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteInt64 = function (value) {\r\n        this._WriteUInt64(_Encoding._Zigzag_EncodeZigzag64(value));\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteString = function (value) {\r\n        if (value === '') {\r\n            this._WriteUInt32(0 /*length*/);\r\n        }\r\n        else {\r\n            var array = _Encoding._Utf8_GetBytes(value);\r\n            this._WriteUInt32(array.length);\r\n            this._stream._Write(array, 0, array.length);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteStructEnd = function (isBase) {\r\n        this._WriteUInt8(isBase ? bond_const_1._BondDataType._BT_STOP_BASE : bond_const_1._BondDataType._BT_STOP);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt32 = function (value) {\r\n        var array = _Encoding._Varint_GetBytes(microsoft_bond_primitives_1.Number._ToUInt32(value));\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt64 = function (value) {\r\n        var array = _Encoding._Varint64_GetBytes(value);\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt8 = function (value) {\r\n        this._stream._WriteByte(microsoft_bond_primitives_1.Number._ToUInt8(value));\r\n    };\r\n    return CompactBinaryProtocolWriter;\r\n}());\r\nexports.CompactBinaryProtocolWriter = CompactBinaryProtocolWriter;\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/**\r\n* bond_const.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Tool     : bondc, Version=3.0.1, Build=bond-git.debug.not\r\n//     Template : Microsoft.Bond.Rules.dll#TypeScript.tt\r\n//     File     : bond_const.ts\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost when\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\nvar _BondDataType;\r\n(function (_BondDataType) {\r\n    _BondDataType[_BondDataType[\"_BT_STOP\"] = 0] = \"_BT_STOP\";\r\n    _BondDataType[_BondDataType[\"_BT_STOP_BASE\"] = 1] = \"_BT_STOP_BASE\";\r\n    _BondDataType[_BondDataType[\"_BT_BOOL\"] = 2] = \"_BT_BOOL\";\r\n    _BondDataType[_BondDataType[\"_BT_DOUBLE\"] = 8] = \"_BT_DOUBLE\";\r\n    _BondDataType[_BondDataType[\"_BT_STRING\"] = 9] = \"_BT_STRING\";\r\n    _BondDataType[_BondDataType[\"_BT_STRUCT\"] = 10] = \"_BT_STRUCT\";\r\n    _BondDataType[_BondDataType[\"_BT_LIST\"] = 11] = \"_BT_LIST\";\r\n    _BondDataType[_BondDataType[\"_BT_MAP\"] = 13] = \"_BT_MAP\";\r\n    _BondDataType[_BondDataType[\"_BT_INT32\"] = 16] = \"_BT_INT32\";\r\n    _BondDataType[_BondDataType[\"_BT_INT64\"] = 17] = \"_BT_INT64\";\r\n})(_BondDataType = exports._BondDataType || (exports._BondDataType = {}));\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/**\r\n* microsoft.bond.encoding.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar microsoft_bond_primitives_1 = __webpack_require__(5);\r\nvar microsoft_bond_floatutils_1 = __webpack_require__(24);\r\nvar microsoft_bond_utils_1 = __webpack_require__(25);\r\nfunction _Utf8_GetBytes(value) {\r\n    var array = [];\r\n    for (var i = 0; i < value.length; ++i) {\r\n        var char = value.charCodeAt(i);\r\n        if (char < 0x80) {\r\n            array.push(char);\r\n        }\r\n        else if (char < 0x800) {\r\n            array.push(0xc0 | (char >> 6), 0x80 | (char & 0x3f));\r\n        }\r\n        else if (char < 0xd800 || char >= 0xe000) {\r\n            array.push(0xe0 | (char >> 12), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n        }\r\n        else {\r\n            char = 0x10000 + (((char & 0x3ff) << 10) | (value.charCodeAt(++i) & 0x3ff));\r\n            array.push(0xf0 | (char >> 18), 0x80 | ((char >> 12) & 0x3f), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n        }\r\n    }\r\n    return array;\r\n}\r\nexports._Utf8_GetBytes = _Utf8_GetBytes;\r\nfunction _Base64_GetString(inArray) {\r\n    var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n    var output = [];\r\n    var paddingBytes = inArray.length % 3;\r\n    var toBase64 = function (num) {\r\n        return [lookup.charAt((num >> 18) & 0x3F),\r\n            lookup.charAt((num >> 12) & 0x3F),\r\n            lookup.charAt((num >> 6) & 0x3F),\r\n            lookup.charAt(num & 0x3F)].join('');\r\n    };\r\n    for (var i = 0, length_1 = inArray.length - paddingBytes; i < length_1; i += 3) {\r\n        var temp = (inArray[i] << 16) + (inArray[i + 1] << 8) + (inArray[i + 2]);\r\n        output.push(toBase64(temp));\r\n    }\r\n    switch (paddingBytes) {\r\n        case 1:\r\n            var temp = inArray[inArray.length - 1];\r\n            output.push(lookup.charAt(temp >> 2));\r\n            output.push(lookup.charAt((temp << 4) & 0x3F));\r\n            output.push('==');\r\n            break;\r\n        case 2:\r\n            var temp2 = (inArray[inArray.length - 2] << 8) + (inArray[inArray.length - 1]);\r\n            output.push(lookup.charAt(temp2 >> 10));\r\n            output.push(lookup.charAt((temp2 >> 4) & 0x3F));\r\n            output.push(lookup.charAt((temp2 << 2) & 0x3F));\r\n            output.push('=');\r\n            break;\r\n    }\r\n    return output.join('');\r\n}\r\nexports._Base64_GetString = _Base64_GetString;\r\nfunction _Varint_GetBytes(value) {\r\n    var array = [];\r\n    while (value & 0xffffff80) {\r\n        array.push((value & 0x7f) | 0x80);\r\n        value >>>= 7;\r\n    }\r\n    array.push(value & 0x7f);\r\n    return array;\r\n}\r\nexports._Varint_GetBytes = _Varint_GetBytes;\r\nfunction _Varint64_GetBytes(value) {\r\n    var low = value.low;\r\n    var high = value.high;\r\n    var array = [];\r\n    while (high || (0xffffff80 & low)) {\r\n        array.push((low & 0x7f) | 0x80);\r\n        low = ((high & 0x7f) << 25) | (low >>> 7);\r\n        high >>>= 7;\r\n    }\r\n    array.push(low & 0x7f);\r\n    return array;\r\n}\r\nexports._Varint64_GetBytes = _Varint64_GetBytes;\r\n// Note: see notes of Float.\r\nfunction _Double_GetBytes(value) {\r\n    if (microsoft_bond_utils_1.BrowserChecker._IsDataViewSupport()) {\r\n        var view = new DataView(new ArrayBuffer(8));\r\n        view.setFloat64(0, value, true /*littleEndian*/);\r\n        var array = [];\r\n        for (var i = 0; i < 8; ++i) {\r\n            array.push(view.getUint8(i));\r\n        }\r\n        return array;\r\n    }\r\n    else {\r\n        return microsoft_bond_floatutils_1.FloatUtils._ConvertNumberToArray(value, true /*isDouble*/);\r\n    }\r\n}\r\nexports._Double_GetBytes = _Double_GetBytes;\r\nfunction _Zigzag_EncodeZigzag32(value) {\r\n    value = microsoft_bond_primitives_1.Number._ToInt32(value);\r\n    return ((value << 1) ^ (value >> (4 /*sizeof(int)*/ * 8 - 1)));\r\n}\r\nexports._Zigzag_EncodeZigzag32 = _Zigzag_EncodeZigzag32;\r\nfunction _Zigzag_EncodeZigzag64(value) {\r\n    var low = value.low;\r\n    var high = value.high;\r\n    var tmpH = (high << 1) | (low >>> 31);\r\n    var tmpL = low << 1;\r\n    if (high & 0x80000000) {\r\n        tmpH = ~tmpH;\r\n        tmpL = ~tmpL;\r\n    }\r\n    var res = new microsoft_bond_primitives_1.UInt64('0');\r\n    res.low = tmpL;\r\n    res.high = tmpH;\r\n    return res;\r\n}\r\nexports._Zigzag_EncodeZigzag64 = _Zigzag_EncodeZigzag64;\r\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* microsoft.bond.floatutils.ts\r\n* Copyright: Microsoft 2016\r\n*\r\n* This class will be used to convert float/double to byte array on browsers which don't support html5.\r\n*\r\n* Format: IEEE-754, littleEndian, http://en.wikipedia.org/wiki/IEEE_754-1985\r\n*\r\n*  \\note\r\n* 1. Don't have negative zero. All zero will be positive zero.\r\n* 2. If the buffer array passed to ConvertArrayToFloat() is actual NaN or Inifinity value,\r\n*    exception will be raised.\r\n*/\r\nvar FloatUtils = /** @class */ (function () {\r\n    function FloatUtils() {\r\n    }\r\n    FloatUtils._ConvertNumberToArray = function (num, isDouble) {\r\n        if (!num) {\r\n            return isDouble ? this._doubleZero : this._floatZero;\r\n        }\r\n        var exponentBits = isDouble ? 11 : 8;\r\n        var precisionBits = isDouble ? 52 : 23;\r\n        // follow IEEE-754, exponent bias is 2^(k-1)-1 where k is the number of bits\r\n        // in the exponent: http://en.wikipedia.org/wiki/Exponent_bias\r\n        var bias = (1 << (exponentBits - 1)) - 1;\r\n        var minExponent = 1 - bias;\r\n        var maxExponent = bias;\r\n        var sign = num < 0 ? 1 : 0;\r\n        num = Math.abs(num);\r\n        var intPart = Math.floor(num);\r\n        var floatPart = num - intPart;\r\n        var len = 2 * (bias + 2) + precisionBits;\r\n        var buffer = new Array(len);\r\n        var i = 0;\r\n        while (i < len) {\r\n            buffer[i++] = 0;\r\n        }\r\n        // caculate the intPart\r\n        i = bias + 2;\r\n        while (i && intPart) {\r\n            buffer[--i] = intPart % 2;\r\n            intPart = Math.floor(intPart / 2);\r\n        }\r\n        // caculate the floatPart\r\n        i = bias + 1;\r\n        while (i < len - 1 && floatPart > 0) {\r\n            floatPart *= 2;\r\n            if (floatPart >= 1) {\r\n                buffer[++i] = 1;\r\n                --floatPart;\r\n            }\r\n            else {\r\n                buffer[++i] = 0;\r\n            }\r\n        }\r\n        // find the first 1\r\n        var firstBit = 0;\r\n        while (firstBit < len && !buffer[firstBit]) {\r\n            firstBit++;\r\n        }\r\n        // caculate exponent\r\n        var exponent = bias + 1 - firstBit;\r\n        // caculate round\r\n        var lastBit = firstBit + precisionBits;\r\n        if (buffer[lastBit + 1]) {\r\n            for (i = lastBit; i > firstBit; --i) {\r\n                buffer[i] = 1 - buffer[i];\r\n                if (buffer) {\r\n                    break;\r\n                }\r\n            }\r\n            if (i === firstBit) {\r\n                ++exponent;\r\n            }\r\n        }\r\n        // check overflow\r\n        if (exponent > maxExponent || intPart) {\r\n            if (sign) {\r\n                return isDouble ? this._doubleNegInifinity : this._floatNegInifinity;\r\n            }\r\n            else {\r\n                return isDouble ? this._doubleInifinity : this._floatInifinity;\r\n            }\r\n        }\r\n        else if (exponent < minExponent) {\r\n            return isDouble ? this._doubleZero : this._floatZero;\r\n        }\r\n        // caculate the result\r\n        if (isDouble) {\r\n            var high = 0;\r\n            for (i = 0; i < 20; ++i) {\r\n                high = (high << 1) | buffer[++firstBit];\r\n            }\r\n            var low = 0;\r\n            for (; i < 52; ++i) {\r\n                low = (low << 1) | buffer[++firstBit];\r\n            }\r\n            high |= (exponent + bias) << 20;\r\n            high = (sign << 31) | (high & 0x7FFFFFFF);\r\n            var resArray = [low & 0xff, (low >> 8) & 0xff, (low >> 16) & 0xff, low >>> 24,\r\n                high & 0xff, (high >> 8) & 0xff, (high >> 16) & 0xff, high >>> 24];\r\n            return resArray;\r\n        }\r\n        else {\r\n            var result = 0;\r\n            for (i = 0; i < 23; ++i) {\r\n                result = (result << 1) | buffer[++firstBit];\r\n            }\r\n            result |= (exponent + bias) << 23;\r\n            result = (sign << 31) | (result & 0x7FFFFFFF);\r\n            var resArray = [result & 0xff, (result >> 8) & 0xff, (result >> 16) & 0xff, result >>> 24];\r\n            return resArray;\r\n        }\r\n    };\r\n    FloatUtils._floatZero = [0x00, 0x00, 0x00, 0x00];\r\n    FloatUtils._doubleZero = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\r\n    FloatUtils._floatInifinity = [0x00, 0x00, 0x80, 0x7F];\r\n    FloatUtils._floatNegInifinity = [0x00, 0x00, 0x80, 0xFF];\r\n    FloatUtils._doubleInifinity = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f];\r\n    FloatUtils._doubleNegInifinity = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff];\r\n    return FloatUtils;\r\n}());\r\nexports.FloatUtils = FloatUtils;\r\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/**\r\n* microsoft.bond.utils.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar BrowserChecker = /** @class */ (function () {\r\n    function BrowserChecker() {\r\n    }\r\n    BrowserChecker._IsDataViewSupport = function () {\r\n        return typeof ArrayBuffer !== 'undefined' &&\r\n            typeof DataView !== 'undefined';\r\n    };\r\n    return BrowserChecker;\r\n}());\r\nexports.BrowserChecker = BrowserChecker;\r\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* microsoft.bond.io.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nvar microsoft_bond_primitives_1 = __webpack_require__(5);\r\nvar MemoryStream = /** @class */ (function () {\r\n    function MemoryStream() {\r\n        this._buffer = [];\r\n    }\r\n    /*override*/\r\n    MemoryStream.prototype._WriteByte = function (byte) {\r\n        this._buffer.push(microsoft_bond_primitives_1.Number._ToByte(byte));\r\n    };\r\n    /*override*/\r\n    MemoryStream.prototype._Write = function (buffer, offset, count) {\r\n        while (count--) {\r\n            this._WriteByte(buffer[offset++]);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the array of unsigned bytes from which this stream was created.\r\n     */\r\n    MemoryStream.prototype._GetBuffer = function () {\r\n        return this._buffer;\r\n    };\r\n    return MemoryStream;\r\n}());\r\nexports.MemoryStream = MemoryStream;\r\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTRetryPolicy.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar RandomizationLowerThreshold = 0.8;\r\nvar RandomizationUpperThreshold = 1.2;\r\nvar BaseBackoff = 3000;\r\nvar MaxBackoff = 120000;\r\n/**\r\n* Class for retry policy.\r\n*/\r\nvar AWTRetryPolicy = /** @class */ (function () {\r\n    function AWTRetryPolicy() {\r\n    }\r\n    /**\r\n     * Determine if the request should be retried for the given status code.\r\n     * The below expression reads that we should only retry for:\r\n     *      - HttpStatusCodes that are smaller than 300.\r\n     *      - HttpStatusCodes greater or equal to 500 (except for 501-NotImplement\r\n     *        and 505-HttpVersionNotSupport).\r\n     *      - HttpStatusCode 408-RequestTimeout.\r\n     * This is based on Microsoft.WindowsAzure.Storage.RetryPolicies.ExponentialRetry class\r\n     * @param {number} httpStatusCode - The status code returned for the request.\r\n     * @return {boolean} True if request should be retried, false otherwise.\r\n     */\r\n    AWTRetryPolicy.shouldRetryForStatus = function (httpStatusCode) {\r\n        /* */\r\n        return !((httpStatusCode >= 300 && httpStatusCode < 500 && httpStatusCode !== 408)\r\n            || (httpStatusCode === 501)\r\n            || (httpStatusCode === 505));\r\n    };\r\n    /**\r\n     * Gets the number of milliseconds to back off before retrying the request. The\r\n     * back off duration is exponentially scaled based on the number of retries already\r\n     * done for the request.\r\n     * @param {number} retriesSoFar - The number of times the request has already been retried.\r\n     * @return {number} The back off duration for the request before it can be retried.\r\n     */\r\n    AWTRetryPolicy.getMillisToBackoffForRetry = function (retriesSoFar) {\r\n        var waitDuration = 0;\r\n        var minBackoff = BaseBackoff * RandomizationLowerThreshold;\r\n        var maxBackoff = BaseBackoff * RandomizationUpperThreshold;\r\n        var randomBackoff = Math.floor(Math.random() * (maxBackoff - minBackoff)) + minBackoff;\r\n        waitDuration = Math.pow(4, retriesSoFar) * randomBackoff;\r\n        return Math.min(waitDuration, MaxBackoff);\r\n    };\r\n    return AWTRetryPolicy;\r\n}());\r\nexports.default = AWTRetryPolicy;\r\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/**\r\n* AWTKillSwitch.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SecToMsMultiplier = 1000;\r\n/**\r\n* Class to stop certain tenants sending events.\r\n*/\r\nvar AWTKillSwitch = /** @class */ (function () {\r\n    function AWTKillSwitch() {\r\n        this._killedTokenDictionary = {};\r\n    }\r\n    /**\r\n     * Set the tenants that are to be killed along with the duration. If the duration is\r\n     * a special value identifying that the tokens are too be killed for only this request, then\r\n     * a array of tokens is returned.\r\n     * @param {string} killedTokens - Tokens that are too be marked to be killed.\r\n     * @param {string} killDuration - The duration for which the tokens are to be killed.\r\n     * @return {string[]} The tokens that are killed only for this given request.\r\n     */\r\n    AWTKillSwitch.prototype.setKillSwitchTenants = function (killTokens, killDuration) {\r\n        if (killTokens && killDuration) {\r\n            try {\r\n                var killedTokens = killTokens.split(',');\r\n                if (killDuration === 'this-request-only') {\r\n                    return killedTokens;\r\n                }\r\n                var durationMs = parseInt(killDuration, 10) * SecToMsMultiplier;\r\n                for (var i = 0; i < killedTokens.length; ++i) {\r\n                    this._killedTokenDictionary[killedTokens[i]] = Date.now() + durationMs;\r\n                }\r\n            }\r\n            catch (ex) {\r\n                return [];\r\n            }\r\n        }\r\n        return [];\r\n    };\r\n    /**\r\n     * Determing if the given tenant token has been killed for the moment.\r\n     * @param {string} tenantToken - The token to be checked.\r\n     * @return {boolean} True if token has been killed, false otherwise.\r\n     */\r\n    AWTKillSwitch.prototype.isTenantKilled = function (tenantToken) {\r\n        if (this._killedTokenDictionary[tenantToken] !== undefined && this._killedTokenDictionary[tenantToken] > Date.now()) {\r\n            return true;\r\n        }\r\n        delete this._killedTokenDictionary[tenantToken];\r\n        return false;\r\n    };\r\n    return AWTKillSwitch;\r\n}());\r\nexports.default = AWTKillSwitch;\r\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTClockSkewManager.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\n/**\r\n* Class to manage clock skew correction.\r\n*/\r\nvar AWTClockSkewManager = /** @class */ (function () {\r\n    function AWTClockSkewManager() {\r\n        this._allowRequestSending = true;\r\n        this._shouldAddClockSkewHeaders = true;\r\n        this._isFirstRequest = true;\r\n        this._clockSkewHeaderValue = 'use-collector-delta';\r\n        this._clockSkewSet = false;\r\n    }\r\n    /**\r\n     * Determine if the request can be sent.\r\n     * @return {boolean} True if requests can be sent, false otherwise.\r\n     */\r\n    AWTClockSkewManager.prototype.allowRequestSending = function () {\r\n        if (this._isFirstRequest) {\r\n            this._isFirstRequest = false;\r\n            this._allowRequestSending = false;\r\n            return true;\r\n        }\r\n        return this._allowRequestSending;\r\n    };\r\n    /**\r\n     * Determine if clock skew headers should be added to the request.\r\n     * @return {boolean} True if clock skew headers should be added, false otherwise.\r\n     */\r\n    AWTClockSkewManager.prototype.shouldAddClockSkewHeaders = function () {\r\n        return this._shouldAddClockSkewHeaders;\r\n    };\r\n    /**\r\n     * Gets the clock skew header value.\r\n     * @return {string} The clock skew header value.\r\n     */\r\n    AWTClockSkewManager.prototype.getClockSkewHeaderValue = function () {\r\n        return this._clockSkewHeaderValue;\r\n    };\r\n    /**\r\n     * Sets the clock skew header value. Once clock skew is set this method\r\n     * is no-op.\r\n     * @param {string} timeDeltaInMillis - Time delta to be saved as the clock skew header value.\r\n     */\r\n    AWTClockSkewManager.prototype.setClockSkew = function (timeDeltaInMillis) {\r\n        if (!this._clockSkewSet) {\r\n            if (timeDeltaInMillis) {\r\n                this._clockSkewHeaderValue = timeDeltaInMillis;\r\n            }\r\n            else {\r\n                this._shouldAddClockSkewHeaders = false;\r\n            }\r\n            this._clockSkewSet = true;\r\n            this._allowRequestSending = true;\r\n        }\r\n    };\r\n    return AWTClockSkewManager;\r\n}());\r\nexports.default = AWTClockSkewManager;\r\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTNotificationManager_1 = __webpack_require__(2);\r\nvar Enums_1 = __webpack_require__(0);\r\n/**\r\n* Class to batch events.\r\n*/\r\nvar AWTRecordBatcher = /** @class */ (function () {\r\n    function AWTRecordBatcher(_maxRequestSize, _outboundQueue) {\r\n        this._maxRequestSize = _maxRequestSize;\r\n        this._outboundQueue = _outboundQueue;\r\n        this._currentBatch = {};\r\n        this._currentBatchSize = 0;\r\n    }\r\n    /**\r\n     * Add an event to the current batch.\r\n     * @param {object} event - The event that needs to be batched.\r\n     */\r\n    AWTRecordBatcher.prototype.addEventToBatch = function (event) {\r\n        if (event.serializedEvent.length > this._maxRequestSize) {\r\n            //single event too big\r\n            AWTNotificationManager_1.default.eventsRejected([event], Enums_1.AWTEventsRejectedReason.SizeLimitExceeded);\r\n        }\r\n        else {\r\n            if (this._currentBatchSize + event.serializedEvent.length > this._maxRequestSize) {\r\n                this.flushBatch();\r\n            }\r\n            if (this._currentBatch[event.apiKey] === undefined) {\r\n                this._currentBatch[event.apiKey] = [];\r\n            }\r\n            this._currentBatch[event.apiKey].push(event);\r\n            this._currentBatchSize += event.serializedEvent.length;\r\n        }\r\n    };\r\n    /**\r\n     * Flush the current batch so that it is added to the outbound queue.\r\n     */\r\n    AWTRecordBatcher.prototype.flushBatch = function () {\r\n        if (this._currentBatchSize > 0) {\r\n            this._outboundQueue.push(this._currentBatch);\r\n            this._currentBatch = {};\r\n            this._currentBatchSize = 0;\r\n        }\r\n    };\r\n    /**\r\n     * Check if there is a batch that contains events.\r\n     */\r\n    AWTRecordBatcher.prototype.hasBatch = function () {\r\n        return this._currentBatchSize > 0;\r\n    };\r\n    return AWTRecordBatcher;\r\n}());\r\nexports.default = AWTRecordBatcher;\r\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTTransmissionManagerCore_1 = __webpack_require__(3);\r\n/**\r\n * The AWTTransmissionManager calss is a wrapper class that exposes some of the\r\n * Transmission functionality needed by other Aria modules.\r\n */\r\nvar AWTTransmissionManager = /** @class */ (function () {\r\n    function AWTTransmissionManager() {\r\n    }\r\n    /**\r\n     * Sets the event handler used by the tranmission manager.\r\n     * The default event handler is the Inbound queue manager. This handler\r\n     * is used to batch and send events to Aria. If you intend to send events\r\n     * to Aria please make sure that your event handler forwards events to the Inbound\r\n     * Queue Manager. You can retrieve the Inbound Queue Manager by calling\r\n     * getEventsHandler before you set your handler.\r\n     * @param {object} eventsHandler - An AWTEventHandler event handler used by the tranmission\r\n     * manager.\r\n     */\r\n    AWTTransmissionManager.setEventsHandler = function (eventsHandler) {\r\n        AWTTransmissionManagerCore_1.default.setEventsHandler(eventsHandler);\r\n    };\r\n    /**\r\n     * Gets the current event handler used by the tranmission manager.\r\n     * @return {object} An AWTEventHandler event handler used by the tranmission manager.\r\n     */\r\n    AWTTransmissionManager.getEventsHandler = function () {\r\n        return AWTTransmissionManagerCore_1.default.getEventsHandler();\r\n    };\r\n    /**\r\n     * The scheduleTimer method tries to schedule the waiting period after which events are sent. If there are\r\n     * no events to be sent, or if there is already a timer scheduled, or if the\r\n     * http manager doesn't have any idle connections, then this method is no-op.\r\n     */\r\n    AWTTransmissionManager.scheduleTimer = function () {\r\n        AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n    };\r\n    return AWTTransmissionManager;\r\n}());\r\nexports.default = AWTTransmissionManager;\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// logger.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c8a99fba08b353983452","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Enums.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing the enums.\r\n*/\r\n/**\r\n * The AWTPropertyType enumeration contains a set of values that specify types of properties.\r\n * @enum {number}\r\n */\r\nvar AWTPropertyType;\r\n(function (AWTPropertyType) {\r\n    /**\r\n     * Property type is unspecified.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Unspecified\"] = 0] = \"Unspecified\";\r\n    /**\r\n     * A string.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"String\"] = 1] = \"String\";\r\n    /**\r\n     * A 64-bit integer.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Int64\"] = 2] = \"Int64\";\r\n    /**\r\n     * A double.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Double\"] = 3] = \"Double\";\r\n    /**\r\n     * A boolean.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Boolean\"] = 4] = \"Boolean\";\r\n})(AWTPropertyType = exports.AWTPropertyType || (exports.AWTPropertyType = {}));\r\n/**\r\n * The AWTPiiKind enumeration contains a set of values that specify the kind of PII (Personal Identifiable Information).\r\n * @enum {number}\r\n */\r\nvar AWTPiiKind;\r\n(function (AWTPiiKind) {\r\n    /**\r\n     * No kind.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * An LDAP distinguished name. For example, CN=Jeff Smith,OU=Sales,DC=Fabrikam,DC=COM.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"DistinguishedName\"] = 1] = \"DistinguishedName\";\r\n    /**\r\n     * Generic information.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"GenericData\"] = 2] = \"GenericData\";\r\n    /**\r\n     * An IPV4 Internet address. For example, 192.0.2.1.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPV4Address\"] = 3] = \"IPV4Address\";\r\n    /**\r\n     * An IPV6 Internet address. For example, 2001:0db8:85a3:0000:0000:8a2e:0370:7334.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPv6Address\"] = 4] = \"IPv6Address\";\r\n    /**\r\n     * The Subject of an e-mail message.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"MailSubject\"] = 5] = \"MailSubject\";\r\n    /**\r\n     * A telephone number.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"PhoneNumber\"] = 6] = \"PhoneNumber\";\r\n    /**\r\n     * A query string.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"QueryString\"] = 7] = \"QueryString\";\r\n    /**\r\n     * An SIP (Session Internet Protocol) address.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"SipAddress\"] = 8] = \"SipAddress\";\r\n    /**\r\n     * An e-mail address.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"SmtpAddress\"] = 9] = \"SmtpAddress\";\r\n    /**\r\n     * An user ID.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Identity\"] = 10] = \"Identity\";\r\n    /**\r\n     * A URI (Uniform Resource Identifier).\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Uri\"] = 11] = \"Uri\";\r\n    /**\r\n     * The fully-qualified domain name.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Fqdn\"] = 12] = \"Fqdn\";\r\n    /**\r\n     * Scrubs the last octet in a IPV4 Internet address.\r\n     * For example: 10.121.227.147 becomes 10.121.227.*\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPV4AddressLegacy\"] = 13] = \"IPV4AddressLegacy\";\r\n})(AWTPiiKind = exports.AWTPiiKind || (exports.AWTPiiKind = {}));\r\n/**\r\n * The AWTCustomerContentKind enumeration contains a set of values that specify the kind of customer content.\r\n * @enum {number}\r\n */\r\nvar AWTCustomerContentKind;\r\n(function (AWTCustomerContentKind) {\r\n    /**\r\n     * No kind.\r\n     */\r\n    AWTCustomerContentKind[AWTCustomerContentKind[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * Generic content.\r\n     */\r\n    AWTCustomerContentKind[AWTCustomerContentKind[\"GenericContent\"] = 1] = \"GenericContent\";\r\n})(AWTCustomerContentKind = exports.AWTCustomerContentKind || (exports.AWTCustomerContentKind = {}));\r\n/**\r\n * The AWTEventPriority enumeration contains a set of values that specify an event's priority.\r\n * @enum {number}\r\n */\r\nvar AWTEventPriority;\r\n(function (AWTEventPriority) {\r\n    /**\r\n     * Low priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"Low\"] = 1] = \"Low\";\r\n    /**\r\n     * Normal priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"Normal\"] = 2] = \"Normal\";\r\n    /**\r\n     * High priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"High\"] = 3] = \"High\";\r\n})(AWTEventPriority = exports.AWTEventPriority || (exports.AWTEventPriority = {}));\r\n/**\r\n * The AWTEventsDroppedReason enumeration contains a set of values that specify the reason for dropping an event.\r\n * @enum {number}\r\n */\r\nvar AWTEventsDroppedReason;\r\n(function (AWTEventsDroppedReason) {\r\n    /**\r\n     * Status set to non-retryable.\r\n     */\r\n    AWTEventsDroppedReason[AWTEventsDroppedReason[\"NonRetryableStatus\"] = 1] = \"NonRetryableStatus\";\r\n    /**\r\n     * The user ended the app.\r\n     */\r\n    AWTEventsDroppedReason[AWTEventsDroppedReason[\"KillSwitch\"] = 2] = \"KillSwitch\";\r\n    /**\r\n     * The event queue is full.\r\n     */\r\n    AWTEventsDroppedReason[AWTEventsDroppedReason[\"QueueFull\"] = 3] = \"QueueFull\";\r\n})(AWTEventsDroppedReason = exports.AWTEventsDroppedReason || (exports.AWTEventsDroppedReason = {}));\r\n/**\r\n * The AWTEventsRejectedReason enumeration contains a set of values that specify the reason for rejecting an event.\r\n * @enum {number}\r\n */\r\nvar AWTEventsRejectedReason;\r\n(function (AWTEventsRejectedReason) {\r\n    /**\r\n     * The event is invalid.\r\n     */\r\n    AWTEventsRejectedReason[AWTEventsRejectedReason[\"InvalidEvent\"] = 1] = \"InvalidEvent\";\r\n    /**\r\n     * The size of the event is too large.\r\n     */\r\n    AWTEventsRejectedReason[AWTEventsRejectedReason[\"SizeLimitExceeded\"] = 2] = \"SizeLimitExceeded\";\r\n})(AWTEventsRejectedReason = exports.AWTEventsRejectedReason || (exports.AWTEventsRejectedReason = {}));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/Enums.js\n// module id = 0\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Utils.ts\r\n* @author  Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing utility functions.\r\n*/\r\nvar microsoft_bond_primitives_1 = require(\"../bond/microsoft.bond.primitives\");\r\nvar Enums_1 = require(\"./Enums\");\r\nvar GuidRegex = /[xy]/g;\r\nvar MSTillUnixEpoch = 62135596800000;\r\nvar MSToTicksMultiplier = 10000;\r\nexports.EventNameAndTypeRegex = /^[a-zA-Z]([a-zA-Z0-9]|_){2,98}[a-zA-Z0-9]$/;\r\nexports.EventNameDotRegex = /\\./g;\r\nexports.PropertyNameRegex = /^[a-zA-Z](([a-zA-Z0-9|_|\\.]){0,98}[a-zA-Z0-9])?$/;\r\nexports.StatsApiKey = 'a387cfcf60114a43a7699f9fbb49289e-9bceb9fe-1c06-460f-96c5-6a0b247358bc-7238';\r\nvar beaconsSupported = null;\r\nvar uInt8ArraySupported = null;\r\nvar useXDR = null;\r\n/**\r\n * Converts a number to Bond Int64.\r\n * @param {number} value - The number to be converted.\r\n * @return {object} The Int64 value for the passed number.\r\n */\r\nfunction numberToBondInt64(value) {\r\n    // Construct bond timestamp for aria\r\n    var bond_value = new microsoft_bond_primitives_1.Int64('0');\r\n    bond_value.low = value & 0xffffffff;\r\n    bond_value.high = Math.floor(value / 0x100000000);\r\n    return bond_value;\r\n}\r\nexports.numberToBondInt64 = numberToBondInt64;\r\n/**\r\n * Creates a new GUID.\r\n * @return {string} A GUID.\r\n */\r\nfunction newGuid() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(GuidRegex, function (c) {\r\n        var r = (Math.random() * 16 | 0), v = (c === 'x' ? r : r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\nexports.newGuid = newGuid;\r\n/**\r\n * Checks if the type of value is a string.\r\n * @param {string} value - Value to be checked.\r\n * @return {boolean} True if the value is a string, false otherwise.\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string';\r\n}\r\nexports.isString = isString;\r\n/**\r\n * Converts milliseconds to ticks since 00:00:00 Jan 1, 0001.\r\n * @param {number} msToTicks - The milliseconds value to be converted.\r\n * @return {number} The value of the milliseconds in .Net Ticks.\r\n */\r\nfunction msToTicks(timeInMs) {\r\n    return (timeInMs + MSTillUnixEpoch) * MSToTicksMultiplier;\r\n}\r\nexports.msToTicks = msToTicks;\r\n/**\r\n * Gets the tenant id from the tenant token.\r\n * @param {string} apiKey - The token from which the tenant id is to be extracted.\r\n * @return {string} The tenant id.\r\n */\r\nfunction getTenantId(apiKey) {\r\n    var indexTenantId = apiKey.indexOf('-');\r\n    if (indexTenantId > -1) {\r\n        return apiKey.substring(0, indexTenantId);\r\n    }\r\n    return '';\r\n}\r\nexports.getTenantId = getTenantId;\r\n/**\r\n * Checks if HTML5 Beacons are supported in the current environment.\r\n * @return {boolean} True if supported, false otherwise.\r\n */\r\nfunction isBeaconsSupported() {\r\n    if (beaconsSupported === null) {\r\n        beaconsSupported = typeof navigator !== 'undefined' && Boolean(navigator.sendBeacon);\r\n    }\r\n    return beaconsSupported;\r\n}\r\nexports.isBeaconsSupported = isBeaconsSupported;\r\n/**\r\n * Checks if Uint8Array are available in the current environment. Safari and Firefox along with\r\n * ReactNative are known to not support Uint8Array properly.\r\n * @return {boolean} True if available, false otherwise.\r\n */\r\nfunction isUint8ArrayAvailable() {\r\n    if (uInt8ArraySupported === null) {\r\n        uInt8ArraySupported = typeof Uint8Array !== 'undefined' && !isSafariOrFirefox() && !isReactNative();\r\n    }\r\n    return uInt8ArraySupported;\r\n}\r\nexports.isUint8ArrayAvailable = isUint8ArrayAvailable;\r\n/**\r\n * Checks if the value is an AWTEventPriority.\r\n * @param {enum} value - The value that needs to be checked.\r\n * @return {boolean} True if the value is in AWTEventPriority, false otherwise.\r\n */\r\nfunction isPriority(value) {\r\n    if (!isNaN(value) && value !== null && value >= 1 && value <= 3) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexports.isPriority = isPriority;\r\n/**\r\n * Sanitizes the Property. It checks the that the property name and value are valid. It also\r\n * checks/populates the correct type and pii of the property value.\r\n * @param {string} name                           - The property name.\r\n * @param {string|number|boolean|object} property - The property value or an AWTEventProperty containing value,\r\n * type ,pii and customer content.\r\n * @return {object} AWTEventProperty containing valid name, value, pii and type or null if invalid.\r\n */\r\nfunction sanitizeProperty(name, property) {\r\n    if (typeof property === 'string' || typeof property === 'number' || typeof property === 'boolean') {\r\n        property = { value: property, type: Enums_1.AWTPropertyType.Unspecified };\r\n    }\r\n    if (!exports.PropertyNameRegex.test(name) || property === undefined || property === null\r\n        || property.value === null || property.value === undefined || property.value === '') {\r\n        return null;\r\n    }\r\n    property.type = sanitizePropertyType(property.value, property.type);\r\n    if (!property.type) {\r\n        return null;\r\n    }\r\n    if (typeof property.pii === 'undefined') {\r\n        property.pii = Enums_1.AWTPiiKind.NotSet;\r\n    }\r\n    if (typeof property.cc === 'undefined') {\r\n        property.cc = Enums_1.AWTCustomerContentKind.NotSet;\r\n    }\r\n    return isPii(property.pii) && isCustomerContent(property.cc) &&\r\n        //ensure that only one of pii or customer content can be set\r\n        (property.cc > 0 ? property.pii === Enums_1.AWTPiiKind.NotSet : true) ? property : null;\r\n}\r\nexports.sanitizeProperty = sanitizeProperty;\r\n/**\r\n * Converts a date object into an ISO string. This is needed because not all browsers support ISO string format\r\n * on the date.\r\n * @param {object} date - The date which needs to be converted to ISO format.\r\n * @return {string} The date in ISO format.\r\n */\r\nfunction getISOString(date) {\r\n    return date.getUTCFullYear() + '-' +\r\n        twoDigit(date.getUTCMonth() + 1) + '-' +\r\n        twoDigit(date.getUTCDate()) + 'T' +\r\n        twoDigit(date.getUTCHours()) + ':' +\r\n        twoDigit(date.getUTCMinutes()) + ':' +\r\n        twoDigit(date.getUTCSeconds()) + '.' +\r\n        threeDigit(date.getUTCMilliseconds()) + 'Z';\r\n}\r\nexports.getISOString = getISOString;\r\nfunction useXDomainRequest() {\r\n    if (useXDR === null) {\r\n        var conn = new XMLHttpRequest();\r\n        if (typeof conn.withCredentials === 'undefined' &&\r\n            typeof XDomainRequest !== 'undefined') {\r\n            useXDR = true;\r\n        }\r\n        else {\r\n            useXDR = false;\r\n        }\r\n    }\r\n    return useXDR;\r\n}\r\nexports.useXDomainRequest = useXDomainRequest;\r\nfunction isReactNative() {\r\n    // If running in React Native, navigator.product will be populated\r\n    if (typeof navigator !== 'undefined' && navigator.product) {\r\n        return navigator.product === 'ReactNative';\r\n    }\r\n    return false;\r\n}\r\nexports.isReactNative = isReactNative;\r\nfunction twoDigit(n) {\r\n    // Format integers to have at least two digits.\r\n    return n < 10 ? '0' + n : n.toString();\r\n}\r\nfunction threeDigit(n) {\r\n    // Format integers to have at least three digits.\r\n    if (n < 10) {\r\n        return '00' + n;\r\n    }\r\n    else if (n < 100) {\r\n        return '0' + n;\r\n    }\r\n    return n.toString();\r\n}\r\nfunction sanitizePropertyType(value, type) {\r\n    if (!isPropertyType(type) || type === Enums_1.AWTPropertyType.Unspecified) {\r\n        return getCorrectType(value);\r\n    }\r\n    if (type === Enums_1.AWTPropertyType.String && typeof value === 'string') {\r\n        return type;\r\n    }\r\n    if ((type === Enums_1.AWTPropertyType.Double || type === Enums_1.AWTPropertyType.Int64) && typeof value === 'number') {\r\n        if (type === Enums_1.AWTPropertyType.Int64 && value % 1 !== 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return type;\r\n        }\r\n    }\r\n    if (type === Enums_1.AWTPropertyType.Boolean && typeof value === 'boolean') {\r\n        return type;\r\n    }\r\n}\r\nfunction getCorrectType(value) {\r\n    switch (typeof value) {\r\n        case 'string':\r\n            return Enums_1.AWTPropertyType.String;\r\n        case 'boolean':\r\n            return Enums_1.AWTPropertyType.Boolean;\r\n        case 'number':\r\n            return Enums_1.AWTPropertyType.Double;\r\n    }\r\n    return Enums_1.AWTPropertyType.Unspecified;\r\n}\r\nfunction isPii(value) {\r\n    if (!isNaN(value) && value !== null && value >= 0 && value <= 13) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isCustomerContent(value) {\r\n    if (!isNaN(value) && value !== null && value >= 0 && value <= 1) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isPropertyType(value) {\r\n    if (!isNaN(value) && value !== null && value >= 0 && value <= 4) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isSafariOrFirefox() {\r\n    // If non-browser navigator will be undefined\r\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n        var ua = navigator.userAgent.toLowerCase();\r\n        if ((ua.indexOf('safari') >= 0 || ua.indexOf('firefox') >= 0) && ua.indexOf('chrome') < 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/Utils.js\n// module id = 1\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nvar AWTNotificationManager = /** @class */ (function () {\r\n    function AWTNotificationManager() {\r\n    }\r\n    /**\r\n     * Adds a notification listener.\r\n     * @param {object} listener - The notification listener to be added.\r\n     */\r\n    AWTNotificationManager.addNotificationListener = function (listener) {\r\n        this.listeners.push(listener);\r\n    };\r\n    /**\r\n     * Notification for events sent.\r\n     * @param {object[]} events - The array of events that have been sent.\r\n     */\r\n    AWTNotificationManager.eventsSent = function (events) {\r\n        var _this = this;\r\n        var _loop_1 = function (i) {\r\n            if (this_1.listeners[i].eventsSent) {\r\n                setTimeout(function () { return _this.listeners[i].eventsSent(events); }, 0);\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being dropped.\r\n     * @param {object[]} events - The array of events that have been dropped.\r\n     * @param {enum} reason     - The reason for which the SDK dropped the events.\r\n     */\r\n    AWTNotificationManager.eventsDropped = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_2 = function (i) {\r\n            if (this_2.listeners[i].eventsDropped) {\r\n                setTimeout(function () { return _this.listeners[i].eventsDropped(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_2 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_2(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being retried when the request failed with a retryable status.\r\n     * @param {object[]} events - The array of events that are being retried.\r\n     */\r\n    AWTNotificationManager.eventsRetrying = function (events) {\r\n        var _this = this;\r\n        var _loop_3 = function (i) {\r\n            if (this_3.listeners[i].eventsRetrying) {\r\n                setTimeout(function () { return _this.listeners[i].eventsRetrying(events); }, 0);\r\n            }\r\n        };\r\n        var this_3 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_3(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being rejected.\r\n     * @param {object[]} events - The array of events that have been rejected.\r\n     * @param {enum} reason     - The reason for which the SDK rejeceted the events.\r\n     */\r\n    AWTNotificationManager.eventsRejected = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_4 = function (i) {\r\n            if (this_4.listeners[i].eventsRejected) {\r\n                setTimeout(function () { return _this.listeners[i].eventsRejected(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_4 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_4(i);\r\n        }\r\n    };\r\n    AWTNotificationManager.listeners = [];\r\n    return AWTNotificationManager;\r\n}());\r\nexports.default = AWTNotificationManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTNotificationManager.js\n// module id = 2\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTTransmissionManagerCore.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar DataModels_1 = require(\"./DataModels\");\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar AWTQueueManager_1 = require(\"./AWTQueueManager\");\r\nvar AWTStatsManager_1 = require(\"../common/AWTStatsManager\");\r\nvar AWTEventProperties_1 = require(\"./AWTEventProperties\");\r\nvar AWTLogManager_1 = require(\"./AWTLogManager\");\r\nvar Utils = require(\"../common/Utils\");\r\nvar MaxBackoffCount = 4;\r\nvar MinDurationBetweenUploadNow = 30000; //30 sec\r\nvar StatName = 'awt_stats';\r\n/**\r\n * Class that manages the timers for when to send events. It also\r\n * handles flush and flushAndTeardown. This class also allows setting\r\n * new event handlers. The default event handler is the Inbound Queue Manager.\r\n */\r\nvar AWTTransmissionManagerCore = /** @class */ (function () {\r\n    function AWTTransmissionManagerCore() {\r\n    }\r\n    /**\r\n     * Sets the event handler to be used by the tranmission manager.\r\n     * The default event handler is the Inbound queue manager. This handler\r\n     * is used to batch and send events to Aria. If you intend to send events\r\n     * to Aria please make sure your event handler forwards events to the Inbound\r\n     * Queue Manager. You can retrieve the Inbound Queue Manager by calling\r\n     * getEventsHandler before you set your handler.\r\n     * @param {object} eventsHandler - The new events handler to be used by the tranmission\r\n     * manager.\r\n     */\r\n    AWTTransmissionManagerCore.setEventsHandler = function (eventsHandler) {\r\n        this._eventHandler = eventsHandler;\r\n    };\r\n    /**\r\n     * Gets the current event handler used by the tranmission manager.\r\n     * @return {object} The event handler currently used by the tranmission manager.\r\n     */\r\n    AWTTransmissionManagerCore.getEventsHandler = function () {\r\n        return this._eventHandler;\r\n    };\r\n    /**\r\n     * Try to schedule the timer after which events will be sent. If there are\r\n     * no events to be sent, or there is already a timer scheduled, or the\r\n     * http manager doesn't have any idle connections this method is no-op.\r\n     */\r\n    AWTTransmissionManagerCore.scheduleTimer = function () {\r\n        var _this = this;\r\n        var timer = this._profiles[this._currentProfile][2];\r\n        if (this._timeout < 0 && timer >= 0 && !this._paused) {\r\n            if (this._eventHandler.hasEvents()) {\r\n                //If the transmission is backed off make the timer atleast 1 sec to allow for backoff.\r\n                if (timer === 0 && this._currentBackoffCount > 0) {\r\n                    timer = 1;\r\n                }\r\n                this._timeout = setTimeout(function () { return _this._batchAndSendEvents(); }, timer * (1 << this._currentBackoffCount) * 1000);\r\n            }\r\n            else {\r\n                this._timerCount = 0;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Initialize the transmission manager. After this method is called events are\r\n     * accepted for tranmission.\r\n     * @param {object} config - The configuration passed during AWTLogManager initialize.\r\n     */\r\n    AWTTransmissionManagerCore.initialize = function (config) {\r\n        var _this = this;\r\n        this._newEventsAllowed = true;\r\n        this._config = config;\r\n        this._eventHandler = new AWTQueueManager_1.default(config.collectorUri, config.cacheMemorySizeLimitInNumberOfEvents, config.httpXHROverride);\r\n        this._initializeProfiles();\r\n        AWTStatsManager_1.default.initialize(function (stats, tenantId) {\r\n            if (_this._config.canSendStatEvent(StatName)) {\r\n                var event_1 = new AWTEventProperties_1.default(StatName);\r\n                event_1.setEventPriority(Enums_1.AWTEventPriority.High);\r\n                event_1.setProperty('TenantId', tenantId);\r\n                for (var statKey in stats) {\r\n                    if (stats.hasOwnProperty(statKey)) {\r\n                        event_1.setProperty(statKey, stats[statKey].toString());\r\n                    }\r\n                }\r\n                AWTLogManager_1.default.getLogger(Utils.StatsApiKey).logEvent(event_1);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Set the transmit profile to be used. This will change the tranmission timers\r\n     * based on the transmit profile.\r\n     * @param {string} profileName - The name of the transmit profile to be used.\r\n     */\r\n    AWTTransmissionManagerCore.setTransmitProfile = function (profileName) {\r\n        if (this._currentProfile !== profileName && this._profiles[profileName] !== undefined) {\r\n            this.clearTimeout();\r\n            this._currentProfile = profileName;\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Load custom tranmission profiles. Each profile should have timers for\r\n     * high, normal and low.  Each profile should make sure\r\n     * that a each priority timer is a multiple of the priority higher than it.\r\n     * Setting the timer value to -1 means that the events for that priority will\r\n     * not be sent. Note that once a priority has been set to not send, all priorities\r\n     * below it will also not be sent. The timers should be in the form of [low, normal, high].\r\n     * e.g Custom: [30,10,5]\r\n     * This also removes any previously loaded custom profiles.\r\n     * @param {object} profiles - A dictionary containing the transmit profiles.\r\n     */\r\n    AWTTransmissionManagerCore.loadTransmitProfiles = function (profiles) {\r\n        this._resetTransmitProfiles();\r\n        for (var profileName in profiles) {\r\n            if (profiles.hasOwnProperty(profileName)) {\r\n                if (profiles[profileName].length !== 3) {\r\n                    continue;\r\n                }\r\n                //Make sure if a higher priority is set to not send then dont send lower priority\r\n                for (var i = 2; i >= 0; --i) {\r\n                    if (profiles[profileName][i] < 0) {\r\n                        for (var j = i; j >= 0; --j) {\r\n                            profiles[profileName][j] = -1;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                //Make sure each priority is multiple of the priority higher then it. If not a multiple\r\n                //we round up so that it becomes a multiple.\r\n                for (var i = 2; i > 0; --i) {\r\n                    if (profiles[profileName][i] > 0 && profiles[profileName][i - 1] > 0) {\r\n                        var timerMultiplier = profiles[profileName][i - 1] / profiles[profileName][i];\r\n                        profiles[profileName][i - 1] = Math.ceil(timerMultiplier) * profiles[profileName][i];\r\n                    }\r\n                }\r\n                this._profiles[profileName] = profiles[profileName];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Pass the event to the event handler and try to schedule the timer.\r\n     * @param {object} event - The event to be sent.\r\n     */\r\n    AWTTransmissionManagerCore.sendEvent = function (event) {\r\n        if (this._newEventsAllowed) {\r\n            this._eventHandler.addEvent(event);\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Sends events for all priority for the current inbound queue.\r\n     * This method adds new inbound queues to which new events will be added.\r\n     * Note: If LogManager is paused or flush is called again in less than 30 sec\r\n     * then flush will be no-op and the callback will not be called.\r\n     * @param {function} callback - The function to be called when flush is finished.\r\n     */\r\n    AWTTransmissionManagerCore.flush = function (callback) {\r\n        var currentTime = (new Date()).getTime();\r\n        if (!this._paused && this._lastUploadNowCall + MinDurationBetweenUploadNow < currentTime) {\r\n            this._lastUploadNowCall = currentTime;\r\n            if (this._timeout > -1) {\r\n                clearTimeout(this._timeout);\r\n                this._timeout = -1;\r\n            }\r\n            this._eventHandler.uploadNow(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Pauses transmission. It pauses the http manager and also clears timers.\r\n     */\r\n    AWTTransmissionManagerCore.pauseTransmission = function () {\r\n        if (!this._paused) {\r\n            this.clearTimeout();\r\n            this._eventHandler.pauseTransmission();\r\n            this._paused = true;\r\n        }\r\n    };\r\n    /**\r\n     * Resumes tranmission. It resumes the http manager and tries to schedule the timer.\r\n     */\r\n    AWTTransmissionManagerCore.resumeTransmision = function () {\r\n        if (this._paused) {\r\n            this._paused = false;\r\n            this._eventHandler.resumeTransmission();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Stops allowing new events being added for tranmission. It also batches all\r\n     * events currently in the queue and creates requests from them to be sent.\r\n     */\r\n    AWTTransmissionManagerCore.flushAndTeardown = function () {\r\n        //No op if offline storage is added\r\n        AWTStatsManager_1.default.teardown();\r\n        this._newEventsAllowed = false;\r\n        this.clearTimeout();\r\n        this._eventHandler.teardown();\r\n    };\r\n    /**\r\n     * Backs off tranmission. This exponentially increases all the timers.\r\n     */\r\n    AWTTransmissionManagerCore.backOffTransmission = function () {\r\n        if (this._currentBackoffCount < MaxBackoffCount) {\r\n            this._currentBackoffCount++;\r\n            this.clearTimeout();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Clears backoff for tranmission.\r\n     */\r\n    AWTTransmissionManagerCore.clearBackOff = function () {\r\n        if (this._currentBackoffCount > 0) {\r\n            this._currentBackoffCount = 0;\r\n            this.clearTimeout();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Resets the transmit profiles to the default profiles of Real Time, Near Real Time\r\n     * and Best Effort. This removes all the custom profiles that were loaded.\r\n     */\r\n    AWTTransmissionManagerCore._resetTransmitProfiles = function () {\r\n        this.clearTimeout();\r\n        this._initializeProfiles();\r\n        this._currentProfile = DataModels_1.AWT_REAL_TIME;\r\n        this.scheduleTimer();\r\n    };\r\n    AWTTransmissionManagerCore.clearTimeout = function () {\r\n        if (this._timeout > 0) {\r\n            clearTimeout(this._timeout);\r\n            this._timeout = -1;\r\n            this._timerCount = 0;\r\n        }\r\n    };\r\n    AWTTransmissionManagerCore._batchAndSendEvents = function () {\r\n        var priority = Enums_1.AWTEventPriority.High;\r\n        this._timerCount++;\r\n        if (this._timerCount * this._profiles[this._currentProfile][2] === this._profiles[this._currentProfile][0]) {\r\n            priority = Enums_1.AWTEventPriority.Low;\r\n            this._timerCount = 0;\r\n        }\r\n        else if (this._timerCount * this._profiles[this._currentProfile][2] === this._profiles[this._currentProfile][1]) {\r\n            priority = Enums_1.AWTEventPriority.Normal;\r\n        }\r\n        this._eventHandler.sendEventsForPriorityAndAbove(priority);\r\n        this._timeout = -1;\r\n        this.scheduleTimer();\r\n    };\r\n    AWTTransmissionManagerCore._initializeProfiles = function () {\r\n        this._profiles = {};\r\n        this._profiles['REAL_TIME'] = [4, 2, 1];\r\n        this._profiles['NEAR_REAL_TIME'] = [12, 6, 3];\r\n        this._profiles['BEST_EFFOR'] = [36, 18, 9];\r\n    };\r\n    AWTTransmissionManagerCore._newEventsAllowed = false;\r\n    AWTTransmissionManagerCore._currentProfile = DataModels_1.AWT_REAL_TIME;\r\n    AWTTransmissionManagerCore._timeout = -1;\r\n    AWTTransmissionManagerCore._currentBackoffCount = 0;\r\n    AWTTransmissionManagerCore._paused = false;\r\n    AWTTransmissionManagerCore._timerCount = 0;\r\n    AWTTransmissionManagerCore._lastUploadNowCall = 0;\r\n    return AWTTransmissionManagerCore;\r\n}());\r\nexports.default = AWTTransmissionManagerCore;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTTransmissionManagerCore.js\n// module id = 3\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTEventProperties.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Utils = require(\"../common/Utils\");\r\nvar Enums_1 = require(\"../common/Enums\");\r\n/**\r\n* The AWTEventProperties class is used for creating an event.\r\n*/\r\nvar AWTEventProperties = /** @class */ (function () {\r\n    /**\r\n     * The AWTEventProperties class constructor.\r\n     * @constructor\r\n     * @param {string} - [Optional] The name of the event.\r\n     */\r\n    function AWTEventProperties(name) {\r\n        this._event = { name: '', properties: {} };\r\n        if (name) {\r\n            this.setName(name);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the name of the event.\r\n     * @param {string} name - The name of the event.\r\n     */\r\n    AWTEventProperties.prototype.setName = function (name) {\r\n        this._event.name = name;\r\n    };\r\n    /**\r\n     * Gets the name of the event.\r\n     * @return {string|undefined} - The name of the event, or undefined if the name has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getName = function () {\r\n        if (!this._event.name || !Utils.isString(this._event.name)) {\r\n            return undefined;\r\n        }\r\n        return this._event.name;\r\n    };\r\n    /**\r\n     * Sets the base type of the event.\r\n     * @param {string} type - The base type of the event.\r\n     */\r\n    AWTEventProperties.prototype.setType = function (type) {\r\n        this._event.type = type;\r\n    };\r\n    /**\r\n     * Gets the base type of the event.\r\n     * @return {string|undefined} The base type of the event, or undefined if the base type has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getType = function () {\r\n        if (!this._event.type || !Utils.isString(this._event.type)) {\r\n            return undefined;\r\n        }\r\n        return this._event.type;\r\n    };\r\n    /**\r\n     * Sets the timestamp for the event.\r\n     * @param {number} timestampInEpochMillis - The timestamp (in milliseconds) since UNIX Epoch.\r\n     */\r\n    AWTEventProperties.prototype.setTimestamp = function (timestampInEpochMillis) {\r\n        this._event.timestamp = timestampInEpochMillis;\r\n    };\r\n    /**\r\n     * Gets the timestamp for the event.\r\n     * @return {number|undefined} The timestamp for the event, or undefined if it has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getTimestamp = function () {\r\n        if (!this._event.timestamp || isNaN(this._event.timestamp)) {\r\n            return undefined;\r\n        }\r\n        return this._event.timestamp;\r\n    };\r\n    /**\r\n     * Sets the priority for sending the event. The default priority\r\n     * of the event is Normal.\r\n     * @param {enum} priority - An AWTEventPriority enumeration value that specifies the priority of the event.\r\n     */\r\n    AWTEventProperties.prototype.setEventPriority = function (priority) {\r\n        if (Utils.isPriority(priority)) {\r\n            this._event.priority = priority;\r\n        }\r\n    };\r\n    /**\r\n     * Gets the priority for the event.\r\n     * @return {AWTEventPriority} - An AWTEventPriority enumeration value that specifies the priority of the event.\r\n     */\r\n    AWTEventProperties.prototype.getEventPriority = function () {\r\n        return this._event.priority;\r\n    };\r\n    /**\r\n     * Sets a property with a name and value. Optionally sets the property type.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setProperty = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: Enums_1.AWTPiiKind.NotSet, cc: Enums_1.AWTCustomerContentKind.NotSet };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Sets a property with a name, a value, and a PII. Optionally sets the property type.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} pii                    - The kind of PII for the property.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setPropertyWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: pii, cc: Enums_1.AWTCustomerContentKind.NotSet };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Sets a property with name, value and customer content. Optionally set the property type of the value.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} customerContent        - The customer content kind for the property.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setPropertyWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: Enums_1.AWTPiiKind.NotSet, cc: customerContent };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Gets the properties currently added to the event.\r\n     * @return {object} A Map<string, AWTEventProperty> containing the current properties.\r\n     */\r\n    AWTEventProperties.prototype.getPropertyMap = function () {\r\n        return this._event.properties;\r\n    };\r\n    /**\r\n     * Gets the event from this event properties object.\r\n     * @return {object} The event properties compiled into AWTEventData.\r\n     */\r\n    AWTEventProperties.prototype.getEvent = function () {\r\n        return this._event;\r\n    };\r\n    return AWTEventProperties;\r\n}());\r\nexports.default = AWTEventProperties;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTEventProperties.js\n// module id = 4\n// module chunks = 0","\"use strict\";\r\n/**\r\n* microsoft.bond.primitives.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Int64 = /** @class */ (function () {\r\n    function Int64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n        if (this.low < 0) {\r\n            this.high = -1;\r\n        }\r\n    }\r\n    Int64.prototype._Equals = function (numberStr) {\r\n        var tmp = new Int64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return Int64;\r\n}());\r\nexports.Int64 = Int64;\r\nvar UInt64 = /** @class */ (function () {\r\n    function UInt64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n    }\r\n    UInt64.prototype._Equals = function (numberStr) {\r\n        var tmp = new UInt64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return UInt64;\r\n}());\r\nexports.UInt64 = UInt64;\r\nvar Number = /** @class */ (function () {\r\n    function Number() {\r\n    }\r\n    Number._ToByte = function (value) {\r\n        return this._ToUInt8(value);\r\n    };\r\n    Number._ToUInt8 = function (value) {\r\n        return value & 0xff;\r\n    };\r\n    Number._ToInt32 = function (value) {\r\n        var signMask = (value & 0x80000000);\r\n        return (value & 0x7fffffff) | signMask;\r\n    };\r\n    Number._ToUInt32 = function (value) {\r\n        return value & 0xffffffff;\r\n    };\r\n    return Number;\r\n}());\r\nexports.Number = Number;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.primitives.js\n// module id = 5\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Enums.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing the enums.\r\n*/\r\n/**\r\n * The AWTUserIdType enumeration contains a set of values that specify the type of user ID.\r\n * @enum {number}\r\n */\r\nvar AWTUserIdType;\r\n(function (AWTUserIdType) {\r\n    /**\r\n     * The user ID type is unknown.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * Microsoft Account ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MSACID\"] = 1] = \"MSACID\";\r\n    /**\r\n     * Microsoft .NET Passport Unique ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MSAPUID\"] = 2] = \"MSAPUID\";\r\n    /**\r\n     * Anonymous user ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"ANID\"] = 3] = \"ANID\";\r\n    /**\r\n     * Organization customer ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"OrgIdCID\"] = 4] = \"OrgIdCID\";\r\n    /**\r\n     * Microsoft Exchange Passport ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"OrgIdPUID\"] = 5] = \"OrgIdPUID\";\r\n    /**\r\n     * User object ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"UserObjectId\"] = 6] = \"UserObjectId\";\r\n    /**\r\n     * Skype ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Skype\"] = 7] = \"Skype\";\r\n    /**\r\n     * Yammer ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Yammer\"] = 8] = \"Yammer\";\r\n    /**\r\n     * E-mail address.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"EmailAddress\"] = 9] = \"EmailAddress\";\r\n    /**\r\n     * Telephone number.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"PhoneNumber\"] = 10] = \"PhoneNumber\";\r\n    /**\r\n     * SIP address.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"SipAddress\"] = 11] = \"SipAddress\";\r\n    /**\r\n     * Multiple unit identity.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MUID\"] = 12] = \"MUID\";\r\n})(AWTUserIdType = exports.AWTUserIdType || (exports.AWTUserIdType = {}));\r\n/**\r\n * The AWTSessionState enumeration contains a set of values that indicate the session state.\r\n * @enum {number}\r\n */\r\nvar AWTSessionState;\r\n(function (AWTSessionState) {\r\n    /**\r\n     * Session started.\r\n     */\r\n    AWTSessionState[AWTSessionState[\"Started\"] = 0] = \"Started\";\r\n    /**\r\n     * Session ended.\r\n     */\r\n    AWTSessionState[AWTSessionState[\"Ended\"] = 1] = \"Ended\";\r\n})(AWTSessionState = exports.AWTSessionState || (exports.AWTSessionState = {}));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/Enums.js\n// module id = 6\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTSerializer.ts\r\n* @author Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Bond = require(\"../bond/microsoft.bond\");\r\nvar Enums_1 = require(\"./Enums\");\r\nvar Utils = require(\"./Utils\");\r\n/**\r\n* Class to handle serialization of event and request.\r\n* Currently uses Bond for serialization. Please note that this may be subject to change.\r\n*/\r\nvar AWTSerializer = /** @class */ (function () {\r\n    function AWTSerializer() {\r\n    }\r\n    /**\r\n     * Serialies a request using Bond.\r\n     * @param {object} requestDictionary - A dictionary containing the token to event mapping.\r\n     * @param {number} tokenCount        - Number of tenant tokens to be sent in the request.\r\n     * @return {number[]} The serialized bond request.\r\n     */\r\n    AWTSerializer.getPayloadBlob = function (requestDictionary, tokenCount) {\r\n        var stream = new Bond.IO.MemoryStream();\r\n        var writer = new Bond.CompactBinaryProtocolWriter(stream);\r\n        //Write TokenToDataPackagesMap\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 3, null);\r\n        writer._WriteMapContainerBegin(tokenCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_LIST);\r\n        for (var token in requestDictionary) {\r\n            if (requestDictionary.hasOwnProperty(token)) {\r\n                //write token\r\n                writer._WriteString(token);\r\n                var dataPackage = requestDictionary[token];\r\n                // Write list of DataPackages\r\n                writer._WriteContainerBegin(1, Bond._BondDataType._BT_STRUCT);\r\n                // Source\r\n                writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 2, null);\r\n                writer._WriteString('act_default_source');\r\n                // DataPackageId\r\n                writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 5, null);\r\n                writer._WriteString(Utils.newGuid());\r\n                // Timestamp\r\n                writer._WriteFieldBegin(Bond._BondDataType._BT_INT64, 6, null);\r\n                writer._WriteInt64(Utils.numberToBondInt64(Date.now()));\r\n                // Records\r\n                writer._WriteFieldBegin(Bond._BondDataType._BT_LIST, 8, null);\r\n                writer._WriteContainerBegin(dataPackage.length, Bond._BondDataType._BT_STRUCT);\r\n                for (var i = 0; i < dataPackage.length; ++i) {\r\n                    writer._WriteBlob(dataPackage[i].serializedEvent);\r\n                }\r\n                writer._WriteStructEnd(false);\r\n            }\r\n        }\r\n        // End ClientCollector\r\n        writer._WriteStructEnd(false);\r\n        return stream._GetBuffer();\r\n    };\r\n    /**\r\n     * Bond serialize the event.\r\n     * @param {object} eventData - The event that needs to be serialized.\r\n     * @return {number[]} The serialized bond event.\r\n     */\r\n    AWTSerializer.getEventBlob = function (eventData) {\r\n        var stream = new Bond.IO.MemoryStream();\r\n        var writer = new Bond.CompactBinaryProtocolWriter(stream);\r\n        // ID\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 1, null);\r\n        writer._WriteString(eventData.id);\r\n        // Timestamp\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_INT64, 3, null);\r\n        writer._WriteInt64(Utils.numberToBondInt64(eventData.timestamp));\r\n        // Type\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 5, null);\r\n        writer._WriteString(eventData.type);\r\n        // Event Type\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 6, null);\r\n        writer._WriteString(eventData.name);\r\n        var propsString = {};\r\n        var propStringCount = 0;\r\n        var propsInt64 = {};\r\n        var propInt64Count = 0;\r\n        var propsDouble = {};\r\n        var propDoubleCount = 0;\r\n        var propsBool = {};\r\n        var propBoolCount = 0;\r\n        var piiProps = {};\r\n        var piiPropCount = 0;\r\n        var ccProps = {};\r\n        var ccPropCount = 0;\r\n        // Iterate across event data properties and separate based on pii\r\n        for (var key in eventData.properties) {\r\n            if (eventData.properties.hasOwnProperty(key)) {\r\n                var property = eventData.properties[key];\r\n                if (property.cc > 0) {\r\n                    ccProps[key] = property;\r\n                    ccPropCount++;\r\n                }\r\n                else if (property.pii > 0) {\r\n                    piiProps[key] = property;\r\n                    piiPropCount++;\r\n                }\r\n                else {\r\n                    switch (property.type) {\r\n                        case Enums_1.AWTPropertyType.String:\r\n                            propsString[key] = property.value;\r\n                            propStringCount++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Int64:\r\n                            propsInt64[key] = property.value;\r\n                            propInt64Count++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Double:\r\n                            propsDouble[key] = property.value;\r\n                            propDoubleCount++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Boolean:\r\n                            propsBool[key] = property.value;\r\n                            propBoolCount++;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //Extension map\r\n        if (propStringCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 13, null);\r\n            writer._WriteMapContainerBegin(propStringCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRING);\r\n            for (var key in propsString) {\r\n                if (propsString.hasOwnProperty(key)) {\r\n                    var value = propsString[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteString(value.toString());\r\n                }\r\n            }\r\n        }\r\n        // Pii\r\n        if (piiPropCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 30, null);\r\n            writer._WriteMapContainerBegin(piiPropCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRUCT);\r\n            for (var key in piiProps) {\r\n                if (piiProps.hasOwnProperty(key)) {\r\n                    var property = piiProps[key];\r\n                    writer._WriteString(key);\r\n                    // PII Data\r\n                    // O365 scrubber type\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 1, null);\r\n                    writer._WriteInt32(1);\r\n                    // PII Kind\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 2, null);\r\n                    writer._WriteInt32(property.pii);\r\n                    // Value\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 3, null);\r\n                    writer._WriteString(property.value.toString());\r\n                    writer._WriteStructEnd(false);\r\n                }\r\n            }\r\n        }\r\n        // TypedExtensionBoolean map\r\n        if (propBoolCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 31, null);\r\n            writer._WriteMapContainerBegin(propBoolCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_BOOL);\r\n            for (var key in propsBool) {\r\n                if (propsBool.hasOwnProperty(key)) {\r\n                    var value = propsBool[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteBool(value);\r\n                }\r\n            }\r\n        }\r\n        //TypedExtensionInt64 map\r\n        if (propInt64Count) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 33, null);\r\n            writer._WriteMapContainerBegin(propInt64Count, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_INT64);\r\n            for (var key in propsInt64) {\r\n                if (propsInt64.hasOwnProperty(key)) {\r\n                    var value = propsInt64[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteInt64(Utils.numberToBondInt64(value));\r\n                }\r\n            }\r\n        }\r\n        //TypedExtensionDouble map\r\n        if (propDoubleCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 34, null);\r\n            writer._WriteMapContainerBegin(propDoubleCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_DOUBLE);\r\n            for (var key in propsDouble) {\r\n                if (propsDouble.hasOwnProperty(key)) {\r\n                    var value = propsDouble[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteDouble(value);\r\n                }\r\n            }\r\n        }\r\n        //CustomerContentExtensions map\r\n        if (ccPropCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 36, null);\r\n            writer._WriteMapContainerBegin(ccPropCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRUCT);\r\n            for (var key in ccProps) {\r\n                if (ccProps.hasOwnProperty(key)) {\r\n                    var property = ccProps[key];\r\n                    writer._WriteString(key);\r\n                    // CustomerContent Data\r\n                    // CustomerContentKind\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 1, null);\r\n                    writer._WriteInt32(property.cc);\r\n                    // RawContent\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 2, null);\r\n                    writer._WriteString(property.value.toString());\r\n                    writer._WriteStructEnd(false);\r\n                }\r\n            }\r\n        }\r\n        writer._WriteStructEnd(false);\r\n        return stream._GetBuffer();\r\n    };\r\n    /**\r\n     * Base64 encode the given number[].\r\n     * @param {number[]} data - The data to be base64 encoded.\r\n     * @return {string} The base64 encoded data.\r\n     */\r\n    AWTSerializer.base64Encode = function (data) {\r\n        return Bond._Encoding._Base64_GetString(data);\r\n    };\r\n    return AWTSerializer;\r\n}());\r\nexports.default = AWTSerializer;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTSerializer.js\n// module id = 7\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTAutoCollection_1 = require(\"./AWTAutoCollection\");\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar Enums_2 = require(\"./Enums\");\r\nvar UI_IDTYPE = 'UserInfo.IdType';\r\n/**\r\n *  Class to allow users to set semantic context properties.\r\n */\r\nvar AWTSemanticContext = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {boolean} _allowDeviceFields - Allow setting of device semantic context.\r\n     * @param {object} _properties         - The event properties where to add the semantic context.\r\n     */\r\n    function AWTSemanticContext(_allowDeviceFields, _properties) {\r\n        this._allowDeviceFields = _allowDeviceFields;\r\n        this._properties = _properties;\r\n    }\r\n    /**\r\n     * Sets the field AppInfo.Id with the given value.\r\n     * @param {string} appId  - The Id uniquely identifies the App from this this event originated.\r\n     * In the multi-tenant Aria Platform, this is the Application Id of the\r\n     * registered Application. Example, \"735d47645f7c4de69964e2c01888d6b6\".\r\n     */\r\n    AWTSemanticContext.prototype.setAppId = function (appId) {\r\n        this._addContext('AppInfo.Id', appId);\r\n    };\r\n    /**\r\n     * Sets the field AppInfo.Version with the given value.\r\n     * @param {string} appVersion  - The version of the App, retrieved programmatically where possible. This\r\n     * is app/platform dependent. Examples such as \"7.0.0.100\" for Skype,\r\n     * or \"12.0.30723.00 Update 3\" for Microsoft Visual Studio Ultimate 2013\r\n     */\r\n    AWTSemanticContext.prototype.setAppVersion = function (appVersion) {\r\n        this._addContext('AppInfo.Version', appVersion);\r\n    };\r\n    /**\r\n     * Sets the field AppInfo.Language with the given value.\r\n     * @param {string} appLanguage  - Language of the App in IETF language tag format, as described in RFC 4646.\r\n     * Examples of acceptable values include \"en\", \"pt-BR\" and \"zh-Hant-CN\".\r\n     */\r\n    AWTSemanticContext.prototype.setAppLanguage = function (appLanguage) {\r\n        this._addContext('AppInfo.Language', appLanguage);\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceId  - The device Id uniquely identifies the physical device, using platform\r\n     * available API's. This allows correlation against Aria Hardware Inventory.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceId = function (deviceId) {\r\n        if (this._allowDeviceFields) {\r\n            AWTAutoCollection_1.default.checkAndSaveDeviceId(deviceId);\r\n            this._addContext('DeviceInfo.Id', deviceId);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.OsName with the given value.\r\n     * @param {string} deviceOsName  - The name of the OS. The SDK should ensure this is a limited normalized\r\n     * set. Asimov is using very high level value e.g. Windows/Android/iOS.\r\n     * Examples such as \"iOS\" or \"Windows Phone\".\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceOsName = function (deviceOsName) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.OsName', deviceOsName);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.OsVersion with the given value.\r\n     * @param {string} deviceOsVersion  - The version of the OS, retrieved programmatically, which can be used\r\n     * for aggregation or filtering for scenarios like real time monitoring\r\n     * or metrics reporting. Flurry and GA provide aggregation at this level.\r\n     * Examples such as \"8.1.2\" for iOS, or \"8.1\" for Windows Phone.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceOsVersion = function (deviceOsVersion) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.OsVersion', deviceOsVersion);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceBrowserName  - he name of the OS. The SDK should ensure this is a limited normalized set.\r\n     * Examples such as \"Chrome\" or \"Edge\".\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceBrowserName = function (deviceBrowserName) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.BrowserName', deviceBrowserName);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceBrowserVersion  - The version of the browser, retrieved programmatically, which can be used\r\n     * for aggregation or filtering for scenarios like real time monitoring or metrics reporting.\r\n     * Examples such as \"57.0.2987.133\" for Chrome, or \"15.15063\" for Edge.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceBrowserVersion = function (deviceBrowserVersion) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.BrowserVersion', deviceBrowserVersion);\r\n        }\r\n    };\r\n    /**\r\n     * Set the device manufacturer context information of telemetry event.\r\n     * Can only be set at the LogManager level. Setting it via the object obtained from ILogger\r\n     * will be no-op.\r\n     * @param {string} deviceMake The manufacturer of the device, retrieved\r\n     *            programmatically where possible and is app/platform specific\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceMake = function (deviceMake) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.Make', deviceMake);\r\n        }\r\n    };\r\n    /**\r\n     * Set the device model context information of telemetry event.\r\n     * Can only be set at the LogManager level. Setting it via the object obtained from ILogger\r\n     * will be no-op.\r\n     * @param {string} deviceModel The model of the device, retrieved programmatically\r\n     *            where possible and is app/platform specific\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceModel = function (deviceModel) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.Model', deviceModel);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.Id with the given value.\r\n     * @param {string} userId     - The id uniquely identifies the user in an application-specific\r\n     * user namespace, such as a Skype ID in the Skype App. This may be empty for Apps\r\n     * which do not require user sign-in.\r\n     * @param {enum} pii        - Optional pii type for the user id.\r\n     * @param {enum} userIdType - Optional id type for the user id.\r\n     */\r\n    AWTSemanticContext.prototype.setUserId = function (userId, pii, userIdType) {\r\n        if (!isNaN(userIdType) && userIdType !== null && userIdType >= 0 && userIdType <= 12) {\r\n            this._addContext(UI_IDTYPE, userIdType.toString());\r\n        }\r\n        else {\r\n            var inferredUserIdType = void 0;\r\n            switch (pii) {\r\n                case Enums_1.AWTPiiKind.SipAddress:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.SipAddress;\r\n                    break;\r\n                case Enums_1.AWTPiiKind.PhoneNumber:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.PhoneNumber;\r\n                    break;\r\n                case Enums_1.AWTPiiKind.SmtpAddress:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.EmailAddress;\r\n                    break;\r\n                default:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.Unknown;\r\n                    break;\r\n            }\r\n            this._addContext(UI_IDTYPE, inferredUserIdType.toString());\r\n        }\r\n        if (isNaN(pii) || pii === null || pii === Enums_1.AWTPiiKind.NotSet || pii > 13) {\r\n            switch (userIdType) {\r\n                case Enums_2.AWTUserIdType.Skype:\r\n                    pii = Enums_1.AWTPiiKind.Identity;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.EmailAddress:\r\n                    pii = Enums_1.AWTPiiKind.SmtpAddress;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.PhoneNumber:\r\n                    pii = Enums_1.AWTPiiKind.PhoneNumber;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.SipAddress:\r\n                    pii = Enums_1.AWTPiiKind.SipAddress;\r\n                    break;\r\n                default:\r\n                    pii = Enums_1.AWTPiiKind.NotSet;\r\n                    break;\r\n            }\r\n        }\r\n        this._addContextWithPii('UserInfo.Id', userId, pii);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.AdvertisingId with the given value.\r\n     * @param {string} userAdvertisingId  - The AdvertisingId is the user-specific device id obtainable through\r\n     * platform API's. This may not be available if users choose to opt-out\r\n     * of this id, or if the underlying platform does not support it.\r\n     */\r\n    AWTSemanticContext.prototype.setUserAdvertisingId = function (userAdvertisingId) {\r\n        this._addContext('UserInfo.AdvertisingId', userAdvertisingId);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.TimeZone with the given value.\r\n     * @param {string} userTimeZone  - The user's time zone relative to UTC, in ISO 8601 time zone format.\r\n     * Examples of acceptable values include \"+00\", \"+07:00\", and \"-1130\".\r\n     */\r\n    AWTSemanticContext.prototype.setUserTimeZone = function (userTimeZone) {\r\n        this._addContext('UserInfo.TimeZone', userTimeZone);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.Language with the given value.\r\n     * @param {string} userLanguage  - The user's language in IETF language tag format, as described in RFC 4646.\r\n     * Examples of acceptable values include \"en\", \"pt-BR\" and \"zh-Hant-CN\".\r\n     */\r\n    AWTSemanticContext.prototype.setUserLanguage = function (userLanguage) {\r\n        this._addContext('UserInfo.Language', userLanguage);\r\n    };\r\n    AWTSemanticContext.prototype._addContext = function (key, value) {\r\n        if (typeof value === 'string') {\r\n            this._properties.setProperty(key, value);\r\n        }\r\n    };\r\n    AWTSemanticContext.prototype._addContextWithPii = function (key, value, pii) {\r\n        if (typeof value === 'string') {\r\n            this._properties.setPropertyWithPii(key, value, pii);\r\n        }\r\n    };\r\n    return AWTSemanticContext;\r\n}());\r\nexports.default = AWTSemanticContext;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTSemanticContext.js\n// module id = 8\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTAutoCollection.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Utils = require(\"../common/Utils\");\r\nvar DEVICE_ID_COOKIE = 'MicrosoftApplicationsTelemetryDeviceId';\r\nvar FIRSTLAUNCHTIME_COOKIE = 'MicrosoftApplicationsTelemetryFirstLaunchTime';\r\nvar BROWSERS = {\r\n    MSIE: 'MSIE',\r\n    CHROME: 'Chrome',\r\n    FIREFOX: 'Firefox',\r\n    SAFARI: 'Safari',\r\n    EDGE: 'Edge',\r\n    ELECTRON: 'Electron',\r\n    SKYPE_SHELL: 'SkypeShell',\r\n    PHANTOMJS: 'PhantomJS',\r\n    OPERA: 'Opera'\r\n};\r\nvar OPERATING_SYSTEMS = {\r\n    WINDOWS: 'Windows',\r\n    MACOSX: 'Mac OS X',\r\n    WINDOWS_PHONE: 'Windows Phone',\r\n    WINDOWS_RT: 'Windows RT',\r\n    IOS: 'iOS',\r\n    ANDROID: 'Android',\r\n    LINUX: 'Linux',\r\n    UNKNOWN: 'Unknown'\r\n};\r\nvar OSNAMEREGEX = {\r\n    WIN: /(windows|win32)/i,\r\n    WINRT: / arm;/i,\r\n    WINPHONE: /windows\\sphone\\s\\d+\\.\\d+/i,\r\n    OSX: /(macintosh|mac os x)/i,\r\n    IOS: /(iPad|iPhone|iPod)(?=.*like Mac OS X)/i,\r\n    LINUX: /(linux|joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk)/i,\r\n    ANDROID: /android/i\r\n};\r\nvar VERSION_MAPPINGS = {\r\n    '5.1': 'XP',\r\n    '6.0': 'Vista',\r\n    '6.1': '7',\r\n    '6.2': '8',\r\n    '6.3': '8.1',\r\n    '10.0': '10'\r\n};\r\nvar REGEX_VERSION = '([\\\\d,.]+)';\r\nvar REGEX_VERSION_MAC = '([\\\\d,_,.]+)';\r\nvar UNKNOWN = 'Unknown';\r\nvar UNDEFINED = 'undefined';\r\n/**\r\n * Class that stores semantic properties.\r\n */\r\nvar AWTAutoCollection = /** @class */ (function () {\r\n    function AWTAutoCollection() {\r\n    }\r\n    /**\r\n     * Add a property storage override to override the usage of document.cookie to store\r\n     * properties. The property storage object should implement both getProperty and setProperty, otherwise\r\n     * it will be rejected.\r\n     * @param {object} propertyStorage - Property storage object which is used for storing SDK properties.\r\n     * @return {boolean} True if the property storage override was accepted, false otherwise.\r\n     */\r\n    AWTAutoCollection.addPropertyStorageOverride = function (propertyStorage) {\r\n        if (propertyStorage) {\r\n            this._propertyStorage = propertyStorage;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Auto collect semantic context properties.\r\n     * @param {object} semantContext   - The semantic context to use to set auto collected information.\r\n     * @param {boolean} disableCookies - Determines if setting cookies is disabled.\r\n     * @param {object} userAgent       - UserAgent string to be used for auto collection of semantic properties.\r\n     */\r\n    AWTAutoCollection.autoCollect = function (semanticContext, disableCookies, userAgent) {\r\n        this._semanticContext = semanticContext;\r\n        this._disableCookies = disableCookies;\r\n        this._autoCollect();\r\n        if (!userAgent && typeof navigator !== UNDEFINED) {\r\n            userAgent = navigator.userAgent || '';\r\n        }\r\n        this._autoCollectFromUserAgent(userAgent);\r\n        if (this._disableCookies && !this._propertyStorage) {\r\n            this._deleteCookie(DEVICE_ID_COOKIE);\r\n            this._deleteCookie(FIRSTLAUNCHTIME_COOKIE);\r\n            return;\r\n        }\r\n        //Only collect device id if it can be stored\r\n        if (this._propertyStorage || (this._areCookiesAvailable && !this._disableCookies)) {\r\n            this._autoCollectDeviceId();\r\n        }\r\n    };\r\n    /**\r\n     * Checks if the device id stored is the same as the new device id. If they are not,\r\n     * store the new id and store a new first launch time.\r\n     * @param {string} deviceId - The new device id.\r\n     */\r\n    AWTAutoCollection.checkAndSaveDeviceId = function (deviceId) {\r\n        if (deviceId) {\r\n            var oldDeviceId = this._getData(DEVICE_ID_COOKIE);\r\n            if (oldDeviceId !== deviceId) {\r\n                this._saveData(DEVICE_ID_COOKIE, deviceId);\r\n                this._saveData(FIRSTLAUNCHTIME_COOKIE, Utils.getISOString(new Date()));\r\n            }\r\n            this.firstLaunchTime = this._getData(FIRSTLAUNCHTIME_COOKIE);\r\n        }\r\n    };\r\n    /**\r\n     * Auto collect the device SDK Id.\r\n     */\r\n    AWTAutoCollection._autoCollectDeviceId = function () {\r\n        var deviceId = this._getData(DEVICE_ID_COOKIE);\r\n        if (!deviceId) {\r\n            deviceId = Utils.newGuid();\r\n            this.checkAndSaveDeviceId(deviceId);\r\n        }\r\n        else {\r\n            this.firstLaunchTime = this._getData(FIRSTLAUNCHTIME_COOKIE);\r\n        }\r\n        this._semanticContext.setDeviceId(deviceId);\r\n    };\r\n    AWTAutoCollection._autoCollect = function () {\r\n        //Get app language\r\n        if (typeof document !== UNDEFINED && document.documentElement) {\r\n            this._semanticContext.setAppLanguage(document.documentElement.lang);\r\n        }\r\n        //Get user language\r\n        if (typeof navigator !== UNDEFINED) {\r\n            this._semanticContext.setUserLanguage(navigator.userLanguage || navigator.language);\r\n        }\r\n        //Get time zone\r\n        var timeZone = new Date().getTimezoneOffset();\r\n        var minutes = timeZone % 60;\r\n        var hours = (timeZone - minutes) / 60;\r\n        var timeZonePrefix = '+';\r\n        if (hours > 0) {\r\n            timeZonePrefix = '-';\r\n        }\r\n        hours = Math.abs(hours);\r\n        minutes = Math.abs(minutes);\r\n        this._semanticContext.setUserTimeZone(timeZonePrefix + (hours < 10 ? '0' + hours : hours.toString()) + ':'\r\n            + (minutes < 10 ? '0' + minutes : minutes.toString()));\r\n    };\r\n    AWTAutoCollection._autoCollectFromUserAgent = function (userAgent) {\r\n        if (userAgent) {\r\n            var browserName = this._getBrowserName(userAgent);\r\n            this._semanticContext.setDeviceBrowserName(browserName);\r\n            this._semanticContext.setDeviceBrowserVersion(this._getBrowserVersion(userAgent, browserName));\r\n            var osName = this._getOsName(userAgent);\r\n            this._semanticContext.setDeviceOsName(osName);\r\n            this._semanticContext.setDeviceOsVersion(this._getOsVersion(userAgent, osName));\r\n        }\r\n    };\r\n    AWTAutoCollection._getBrowserName = function (userAgent) {\r\n        //Check for Opera first        \r\n        if (this._userAgentContainsString('OPR/', userAgent)) {\r\n            return BROWSERS.OPERA;\r\n        }\r\n        //Check for Phantom JS\r\n        if (this._userAgentContainsString(BROWSERS.PHANTOMJS, userAgent)) {\r\n            return BROWSERS.PHANTOMJS;\r\n        }\r\n        //Check for Edge\r\n        if (this._userAgentContainsString(BROWSERS.EDGE, userAgent)) {\r\n            return BROWSERS.EDGE;\r\n        }\r\n        //Check for Electron\r\n        if (this._userAgentContainsString(BROWSERS.ELECTRON, userAgent)) {\r\n            return BROWSERS.ELECTRON;\r\n        }\r\n        //Check for Chrome\r\n        if (this._userAgentContainsString(BROWSERS.CHROME, userAgent)) {\r\n            return BROWSERS.CHROME;\r\n        }\r\n        //Check for Internet Explorer\r\n        if (this._userAgentContainsString('Trident', userAgent)) {\r\n            return BROWSERS.MSIE;\r\n        }\r\n        //Check for Firefox\r\n        if (this._userAgentContainsString(BROWSERS.FIREFOX, userAgent)) {\r\n            return BROWSERS.FIREFOX;\r\n        }\r\n        //Check for Safari\r\n        if (this._userAgentContainsString(BROWSERS.SAFARI, userAgent)) {\r\n            return BROWSERS.SAFARI;\r\n        }\r\n        //Check for Skype shell\r\n        if (this._userAgentContainsString(BROWSERS.SKYPE_SHELL, userAgent)) {\r\n            return BROWSERS.SKYPE_SHELL;\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._userAgentContainsString = function (searchString, userAgent) {\r\n        return userAgent.indexOf(searchString) > -1;\r\n    };\r\n    AWTAutoCollection._getBrowserVersion = function (userAgent, browserName) {\r\n        if (browserName === BROWSERS.MSIE) {\r\n            return this._getIeVersion(userAgent);\r\n        }\r\n        else {\r\n            return this._getOtherVersion(browserName, userAgent);\r\n        }\r\n    };\r\n    AWTAutoCollection._getIeVersion = function (userAgent) {\r\n        var classicIeVersionMatches = userAgent.match(new RegExp(BROWSERS.MSIE + ' ' + REGEX_VERSION));\r\n        if (classicIeVersionMatches) {\r\n            return classicIeVersionMatches[1];\r\n        }\r\n        else {\r\n            var ieVersionMatches = userAgent.match(new RegExp('rv:' + REGEX_VERSION));\r\n            if (ieVersionMatches) {\r\n                return ieVersionMatches[1];\r\n            }\r\n        }\r\n    };\r\n    AWTAutoCollection._getOtherVersion = function (browserString, userAgent) {\r\n        if (browserString === BROWSERS.SAFARI) {\r\n            browserString = 'Version';\r\n        }\r\n        var matches = userAgent.match(new RegExp(browserString + '/' + REGEX_VERSION));\r\n        if (matches) {\r\n            return matches[1];\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getOsName = function (userAgent) {\r\n        if (userAgent.match(OSNAMEREGEX.WINPHONE)) {\r\n            return OPERATING_SYSTEMS.WINDOWS_PHONE;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.WINRT)) {\r\n            return OPERATING_SYSTEMS.WINDOWS_RT;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.IOS)) {\r\n            return OPERATING_SYSTEMS.IOS;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.ANDROID)) {\r\n            return OPERATING_SYSTEMS.ANDROID;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.LINUX)) {\r\n            return OPERATING_SYSTEMS.LINUX;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.OSX)) {\r\n            return OPERATING_SYSTEMS.MACOSX;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.WIN)) {\r\n            return OPERATING_SYSTEMS.WINDOWS;\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getOsVersion = function (userAgent, osName) {\r\n        if (osName === OPERATING_SYSTEMS.WINDOWS) {\r\n            return this._getWindowsVersion(userAgent);\r\n        }\r\n        if (osName === OPERATING_SYSTEMS.MACOSX) {\r\n            return this._getMacOsxVersion(userAgent);\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getWindowsVersion = function (userAgent) {\r\n        var ntVersionMatches = userAgent.match(new RegExp('Windows NT ' + REGEX_VERSION));\r\n        if (ntVersionMatches && VERSION_MAPPINGS[ntVersionMatches[1]]) {\r\n            return VERSION_MAPPINGS[ntVersionMatches[1]];\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getMacOsxVersion = function (userAgent) {\r\n        var macOsxVersionInUserAgentMatches = userAgent.match(new RegExp(OPERATING_SYSTEMS.MACOSX + ' ' + REGEX_VERSION_MAC));\r\n        if (macOsxVersionInUserAgentMatches) {\r\n            var versionString = macOsxVersionInUserAgentMatches[1].replace(/_/g, '.');\r\n            if (versionString) {\r\n                var delimiter = this._getDelimiter(versionString);\r\n                if (delimiter) {\r\n                    var components = versionString.split(delimiter);\r\n                    return components[0];\r\n                }\r\n                else {\r\n                    return versionString;\r\n                }\r\n            }\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getDelimiter = function (versionString) {\r\n        if (versionString.indexOf('.') > -1) {\r\n            return '.';\r\n        }\r\n        if (versionString.indexOf('_') > -1) {\r\n            return '_';\r\n        }\r\n        return null;\r\n    };\r\n    AWTAutoCollection._saveData = function (name, value) {\r\n        if (this._propertyStorage) {\r\n            this._propertyStorage.setProperty(name, value);\r\n        }\r\n        else if (this._areCookiesAvailable) {\r\n            //Expires in 365 days\r\n            var date = new Date();\r\n            date.setTime(date.getTime() + 31536000000 /*365 days in milliseconds*/);\r\n            var expires = 'expires=' + date.toUTCString();\r\n            document.cookie = name + '=' + value + '; ' + expires;\r\n        }\r\n    };\r\n    AWTAutoCollection._getData = function (name) {\r\n        if (this._propertyStorage) {\r\n            return this._propertyStorage.getProperty(name) || '';\r\n        }\r\n        else if (this._areCookiesAvailable) {\r\n            name = name + '=';\r\n            var ca = document.cookie.split(';');\r\n            for (var i = 0; i < ca.length; i++) {\r\n                var c = ca[i];\r\n                var j = 0;\r\n                while (c.charAt(j) === ' ') {\r\n                    j++;\r\n                }\r\n                c = c.substring(j);\r\n                if (c.indexOf(name) === 0) {\r\n                    return c.substring(name.length, c.length);\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n    AWTAutoCollection._deleteCookie = function (name) {\r\n        if (this._areCookiesAvailable) {\r\n            document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n        }\r\n    };\r\n    AWTAutoCollection._disableCookies = false;\r\n    AWTAutoCollection._areCookiesAvailable = typeof document !== UNDEFINED && typeof document.cookie !== UNDEFINED;\r\n    return AWTAutoCollection;\r\n}());\r\nexports.default = AWTAutoCollection;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTAutoCollection.js\n// module id = 9\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AWT_REAL_TIME = 'REAL_TIME';\r\nexports.AWT_NEAR_REAL_TIME = 'NEAR_REAL_TIME';\r\nexports.AWT_BEST_EFFORT = 'BEST_EFFORT';\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/DataModels.js\n// module id = 10\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTLogger.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar Enums_2 = require(\"./Enums\");\r\nvar AWTEventProperties_1 = require(\"./AWTEventProperties\");\r\nvar Utils = require(\"../common/Utils\");\r\nvar AWTStatsManager_1 = require(\"../common/AWTStatsManager\");\r\nvar AWTNotificationManager_1 = require(\"../common/AWTNotificationManager\");\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\nvar AWTLogManagerSettings_1 = require(\"./AWTLogManagerSettings\");\r\nvar Version = require(\"./Version\");\r\nvar AWTSemanticContext_1 = require(\"./AWTSemanticContext\");\r\nvar AWTAutoCollection_1 = require(\"./AWTAutoCollection\");\r\n/**\r\n* The AWTLogger class defines a logger.\r\n*/\r\nvar AWTLogger = /** @class */ (function () {\r\n    /**\r\n     * The AWTLogger class constructor.\r\n     * @constructor\r\n     * @param {string} _apiKey - The API key (also known as application key, and tenant token).\r\n     */\r\n    function AWTLogger(_apiKey) {\r\n        this._apiKey = _apiKey;\r\n        this._contextProperties = new AWTEventProperties_1.default();\r\n        this._semanticContext = new AWTSemanticContext_1.default(false, this._contextProperties);\r\n        this._sessionStartTime = 0;\r\n        this._createInitId();\r\n    }\r\n    /**\r\n     * Sets the context sent with every event from this logger.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContext = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setProperty(name, value, type);\r\n    };\r\n    /**\r\n     * Sets context that will be sent with every event from this logger, and tags it as PII.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} pii                    - The kind of PII for the context property, as one of the AWTPiiKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContextWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setPropertyWithPii(name, value, pii, type);\r\n    };\r\n    /**\r\n     * Sets the context that sent with every event from this logger, and tags it as customer content.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} customerContent        - The customer content kind, as one of the AWTCustomerContentKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContextWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setPropertyWithCustomerContent(name, value, customerContent, type);\r\n    };\r\n    /**\r\n     * Gets the logger semantic context.\r\n     * <b>Note:</b> Device properties are not permitted at the logger level, but you can set them\r\n     * at the global level using the AWTLogManager class.\r\n     *\r\n     * @return A AWTSemanticContext object that you can use to set common semantic properties.\r\n     */\r\n    AWTLogger.prototype.getSemanticContext = function () {\r\n        return this._semanticContext;\r\n    };\r\n    /**\r\n     * Logs a custom event with the specified name and fields - to track information\r\n     * such as how a particular feature is used.\r\n     * @param {Object} event - Can be either an AWTEventProperties object or an AWTEventData object or an event name.\r\n     */\r\n    AWTLogger.prototype.logEvent = function (event) {\r\n        if (AWTLogManagerSettings_1.default.loggingEnabled) {\r\n            if (!this._apiKey) {\r\n                this._apiKey = AWTLogManagerSettings_1.default.defaultTenantToken;\r\n                this._createInitId();\r\n            }\r\n            var sanitizeProperties = true;\r\n            if (Utils.isString(event)) {\r\n                event = {\r\n                    name: event\r\n                };\r\n            }\r\n            else if (event instanceof AWTEventProperties_1.default) {\r\n                event = event.getEvent();\r\n                //AWTEventProperties will already sanitize properties\r\n                sanitizeProperties = false;\r\n            }\r\n            AWTStatsManager_1.default.eventReceived(this._apiKey);\r\n            AWTLogger._logEvent(AWTLogger._getInternalEvent(event, this._apiKey), sanitizeProperties, this._contextProperties);\r\n        }\r\n    };\r\n    /**\r\n     * Logs the session state.\r\n     * <b>Note:</b> Calling Logging session <i>start</i> while a session already exists will produce a no-op. Similarly, calling logging\r\n     * session <i>end</i> while a session does not exist will also produce a no-op.\r\n     * @param {enum} state         - The session's state.\r\n     * @param {obbject} properties - [Optional] Properties of the session event as either a AWTEventProperties object,\r\n     * or a AWTEventData object.\r\n     */\r\n    AWTLogger.prototype.logSession = function (state, properties) {\r\n        if (AWTLogManagerSettings_1.default.sessionEnabled) {\r\n            var sessionEvent = {\r\n                name: 'session',\r\n                type: 'session',\r\n                properties: {}\r\n            };\r\n            AWTLogger._addPropertiesToEvent(sessionEvent, properties);\r\n            sessionEvent.priority = Enums_1.AWTEventPriority.High;\r\n            if (state === Enums_2.AWTSessionState.Started) {\r\n                if (this._sessionStartTime > 0) {\r\n                    //Session start called out of order. Session start time being non zero indicates an ongoing session.\r\n                    return;\r\n                }\r\n                this._sessionStartTime = (new Date()).getTime();\r\n                this._sessionId = Utils.newGuid();\r\n                this.setContext('Session.Id', this._sessionId);\r\n            }\r\n            else if (state === Enums_2.AWTSessionState.Ended) {\r\n                if (this._sessionStartTime === 0) {\r\n                    //Session end called out of order. Session start time being zero indicates no ongoing session.\r\n                    return;\r\n                }\r\n                var sessionDurationSec = Math.floor(((new Date()).getTime() - this._sessionStartTime) / 1000);\r\n                sessionEvent.properties['Session.Id'] = this._sessionId;\r\n                sessionEvent.properties['Session.Duration'] = sessionDurationSec.toString();\r\n                sessionEvent.properties['Session.DurationBucket'] =\r\n                    AWTLogger._getSessionDurationFromTime(sessionDurationSec);\r\n                this._sessionStartTime = 0;\r\n                this.setContext('Session.Id', null);\r\n                this._sessionId = undefined;\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n            sessionEvent.properties['Session.FirstLaunchTime'] = AWTAutoCollection_1.default.firstLaunchTime;\r\n            sessionEvent.properties['Session.State'] = state.toString();\r\n            this.logEvent(sessionEvent);\r\n        }\r\n    };\r\n    /**\r\n     * Gets the session ID for the ongoing session.\r\n     * @return {string} A string that contains the session ID for the ongoing session. Returns undefined if there is\r\n     * no ongoing session.\r\n     */\r\n    AWTLogger.prototype.getSessionId = function () {\r\n        return this._sessionId;\r\n    };\r\n    /**\r\n     * Logs a failure event, such as an application exception.\r\n     * @param {string} signature  - A string that identifies the bucket of the failure.\r\n     * @param {string} detail     - A string that contains the a description of the failure.\r\n     * @param {string} category   - [Optional] A string that identifies the category of the failure, such as an application error,\r\n     * a hang, or a crash.\r\n     * @param {string} id         - [Optional] A string that that uniquely identifies this failure.\r\n     * @param {object} properties - [Optional] Properties of the failure event, as either an AWTEventProperties object or an\r\n     * AWTEventData object. This value can also be null.\r\n     */\r\n    AWTLogger.prototype.logFailure = function (signature, detail, category, id, properties) {\r\n        if (!signature || !detail) {\r\n            return;\r\n        }\r\n        var failureEvent = {\r\n            name: 'failure',\r\n            type: 'failure',\r\n            properties: {}\r\n        };\r\n        AWTLogger._addPropertiesToEvent(failureEvent, properties);\r\n        failureEvent.properties['Failure.Signature'] = signature;\r\n        failureEvent.properties['Failure.Detail'] = detail;\r\n        if (category) {\r\n            failureEvent.properties['Failure.Category'] = category;\r\n        }\r\n        if (id) {\r\n            failureEvent.properties['Failure.Id'] = id;\r\n        }\r\n        failureEvent.priority = Enums_1.AWTEventPriority.High;\r\n        this.logEvent(failureEvent);\r\n    };\r\n    /**\r\n     * Logs a page view event which is normally a result of a user action on a UI page - such as search query,\r\n     * a content request, or a page navigation.\r\n     *\r\n     * @param {string} id          - A string that uniquely identifies this page.\r\n     * @param {string} pageName    - The name of the page.\r\n     * @param {string} category    - [Optional] A string that contains the category to which this page belongs.\r\n     * @param {string} uri         - [Optional] A string that contains the URI of this page.\r\n     * @param {string} referrerUri - [Optional] A string that contains the URI that refers to this page.\r\n     * @param {object} properties  - [Optional] Properties of the page view event, as an AWTEventProperties object.\r\n     * This value can also be null.\r\n     */\r\n    AWTLogger.prototype.logPageView = function (id, pageName, category, uri, referrerUri, properties) {\r\n        if (!id || !pageName) {\r\n            return;\r\n        }\r\n        var pageViewEvent = {\r\n            name: 'pageview',\r\n            type: 'pageview',\r\n            properties: {}\r\n        };\r\n        AWTLogger._addPropertiesToEvent(pageViewEvent, properties);\r\n        pageViewEvent.properties['PageView.Id'] = id;\r\n        pageViewEvent.properties['PageView.Name'] = pageName;\r\n        if (category) {\r\n            pageViewEvent.properties['PageView.Category'] = category;\r\n        }\r\n        if (uri) {\r\n            pageViewEvent.properties['PageView.Uri'] = uri;\r\n        }\r\n        if (referrerUri) {\r\n            pageViewEvent.properties['PageView.ReferrerUri'] = referrerUri;\r\n        }\r\n        this.logEvent(pageViewEvent);\r\n    };\r\n    AWTLogger.prototype._createInitId = function () {\r\n        // If no init ID for this tenant token exists, create one\r\n        if (!AWTLogger._initIdMap[this._apiKey] && this._apiKey) {\r\n            AWTLogger._initIdMap[this._apiKey] = Utils.newGuid();\r\n        }\r\n    };\r\n    AWTLogger._addPropertiesToEvent = function (event, propertiesEvent) {\r\n        if (propertiesEvent) {\r\n            if (propertiesEvent instanceof AWTEventProperties_1.default) {\r\n                propertiesEvent = propertiesEvent.getEvent();\r\n            }\r\n            if (propertiesEvent.name) {\r\n                event.name = propertiesEvent.name;\r\n            }\r\n            if (propertiesEvent.priority) {\r\n                event.priority = propertiesEvent.priority;\r\n            }\r\n            for (var name_1 in propertiesEvent.properties) {\r\n                if (propertiesEvent.properties.hasOwnProperty(name_1)) {\r\n                    event.properties[name_1] = propertiesEvent.properties[name_1];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AWTLogger._getSessionDurationFromTime = function (timeInSec) {\r\n        if (timeInSec < 0) {\r\n            return 'Undefined';\r\n        }\r\n        else if (timeInSec <= 3) {\r\n            return 'UpTo3Sec';\r\n        }\r\n        else if (timeInSec <= 10) {\r\n            return 'UpTo10Sec';\r\n        }\r\n        else if (timeInSec <= 30) {\r\n            return 'UpTo30Sec';\r\n        }\r\n        else if (timeInSec <= 60) {\r\n            return 'UpTo60Sec';\r\n        }\r\n        else if (timeInSec <= 180) {\r\n            return 'UpTo3Min';\r\n        }\r\n        else if (timeInSec <= 600) {\r\n            return 'UpTo10Min';\r\n        }\r\n        else if (timeInSec <= 1800) {\r\n            return 'UpTo30Min';\r\n        }\r\n        return 'Above30Min';\r\n    };\r\n    AWTLogger._logEvent = function (eventWithMetaData, sanitizeProperties, contextProperties) {\r\n        if (!eventWithMetaData.name) {\r\n            AWTNotificationManager_1.default.eventsRejected([eventWithMetaData], Enums_1.AWTEventsRejectedReason.InvalidEvent);\r\n            return;\r\n        }\r\n        eventWithMetaData.name = eventWithMetaData.name.toLowerCase();\r\n        //Check if name is a string and replace . with _ if it is. Drop otherwise.\r\n        eventWithMetaData.name = eventWithMetaData.name.replace(Utils.EventNameDotRegex, '_');\r\n        if (!eventWithMetaData.type) {\r\n            eventWithMetaData.type = 'custom';\r\n        }\r\n        else {\r\n            eventWithMetaData.type = eventWithMetaData.type.toLowerCase();\r\n        }\r\n        //Validate name and type and drop if invalid\r\n        if (!Utils.EventNameAndTypeRegex.test(eventWithMetaData.name) || !Utils.EventNameAndTypeRegex.test(eventWithMetaData.type)) {\r\n            AWTNotificationManager_1.default.eventsRejected([eventWithMetaData], Enums_1.AWTEventsRejectedReason.InvalidEvent);\r\n            return;\r\n        }\r\n        if (isNaN(eventWithMetaData.timestamp)) {\r\n            eventWithMetaData.timestamp = (new Date()).getTime();\r\n        }\r\n        // Event Properties\r\n        if (sanitizeProperties && eventWithMetaData.properties) {\r\n            for (var name_2 in eventWithMetaData.properties) {\r\n                if (eventWithMetaData.properties.hasOwnProperty(name_2)) {\r\n                    eventWithMetaData.properties[name_2] = Utils.sanitizeProperty(name_2, eventWithMetaData.properties[name_2]);\r\n                    if (eventWithMetaData.properties[name_2] === null) {\r\n                        delete eventWithMetaData.properties[name_2];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //If no properties create one for EventInfo and context \r\n        if (!eventWithMetaData.properties) {\r\n            eventWithMetaData.properties = {};\r\n        }\r\n        // Logger ContextProperties\r\n        this._addContextIfAbsent(eventWithMetaData, contextProperties.getPropertyMap());\r\n        // LogManager ContextProperties\r\n        this._addContextIfAbsent(eventWithMetaData, AWTLogManagerSettings_1.default.logManagerContext.getPropertyMap());\r\n        //Add event info\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.InitId', this._getInitId(eventWithMetaData.apiKey));\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Sequence', this._getSequenceId(eventWithMetaData.apiKey));\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.SdkVersion', Version.FullVersionString);\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Name', eventWithMetaData.name);\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Time', (new Date(eventWithMetaData.timestamp)).toISOString());\r\n        if (!Utils.isPriority(eventWithMetaData.priority)) {\r\n            eventWithMetaData.priority = Enums_1.AWTEventPriority.Normal;\r\n        }\r\n        this._sendEvent(eventWithMetaData);\r\n    };\r\n    AWTLogger._addContextIfAbsent = function (event, contextProperties) {\r\n        if (contextProperties) {\r\n            for (var name_3 in contextProperties) {\r\n                if (contextProperties.hasOwnProperty(name_3)) {\r\n                    if (!event.properties[name_3]) {\r\n                        event.properties[name_3] = contextProperties[name_3];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AWTLogger._setDefaultProperty = function (event, name, value) {\r\n        event.properties[name] = { value: value, pii: Enums_1.AWTPiiKind.NotSet, type: Enums_1.AWTPropertyType.String };\r\n    };\r\n    AWTLogger._sendEvent = function (event) {\r\n        AWTTransmissionManagerCore_1.default.sendEvent(event);\r\n    };\r\n    AWTLogger._getInternalEvent = function (event, apiKey) {\r\n        var internalEvent = event;\r\n        internalEvent.id = Utils.newGuid();\r\n        internalEvent.apiKey = apiKey;\r\n        return internalEvent;\r\n    };\r\n    AWTLogger._getInitId = function (apiKey) {\r\n        return AWTLogger._initIdMap[apiKey];\r\n    };\r\n    AWTLogger._getSequenceId = function (apiKey) {\r\n        if (AWTLogger._sequenceIdMap[apiKey] === undefined) {\r\n            AWTLogger._sequenceIdMap[apiKey] = 0;\r\n        }\r\n        return (++AWTLogger._sequenceIdMap[apiKey]).toString();\r\n    };\r\n    AWTLogger._sequenceIdMap = {};\r\n    AWTLogger._initIdMap = {};\r\n    return AWTLogger;\r\n}());\r\nexports.default = AWTLogger;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogger.js\n// module id = 11\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTStatsManager.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Utils = require(\"./Utils\");\r\nvar AWTNotificationManager_1 = require(\"./AWTNotificationManager\");\r\nvar StatsTimer = 60000;\r\n/**\r\n* Class that manages the stats.\r\n*/\r\nvar AWTStatsManager = /** @class */ (function () {\r\n    function AWTStatsManager() {\r\n    }\r\n    /**\r\n     * Intiailizes the stats collection.\r\n     * @param {function} sendStats - The function to call when the stats are ready to be sent.\r\n     */\r\n    AWTStatsManager.initialize = function (sendStats) {\r\n        var _this = this;\r\n        this._sendStats = sendStats;\r\n        this._isInitalized = true;\r\n        AWTNotificationManager_1.default.addNotificationListener({\r\n            eventsSent: function (events) {\r\n                _this._addStat('records_sent_count', events.length, events[0].apiKey);\r\n            },\r\n            eventsDropped: function (events, reason) {\r\n                _this._addStat('records_dropped_count', events.length, events[0].apiKey);\r\n            },\r\n            eventsRejected: function (events, reason) {\r\n                _this._addStat('r_count', events.length, events[0].apiKey);\r\n            },\r\n            eventsRetrying: null\r\n        });\r\n        setTimeout(function () { return _this.flush(); }, StatsTimer);\r\n    };\r\n    /**\r\n     * Flush the current stats and stop the stats collection.\r\n     */\r\n    AWTStatsManager.teardown = function () {\r\n        if (this._isInitalized) {\r\n            this.flush();\r\n            this._isInitalized = false;\r\n        }\r\n    };\r\n    /**\r\n     * Increments the stat for event received.\r\n     * @param {string} apiKey - The apiKey for which the event was received\r\n     */\r\n    AWTStatsManager.eventReceived = function (apiKey) {\r\n        AWTStatsManager._addStat('records_received_count', 1, apiKey);\r\n    };\r\n    /**\r\n     * Creates an event for each tenant token which had a stat and calls the\r\n     * sendStats for that token.\r\n     */\r\n    AWTStatsManager.flush = function () {\r\n        var _this = this;\r\n        if (this._isInitalized) {\r\n            for (var tenantId in this._stats) {\r\n                if (this._stats.hasOwnProperty(tenantId)) {\r\n                    this._sendStats(this._stats[tenantId], tenantId);\r\n                }\r\n            }\r\n            this._stats = {};\r\n            setTimeout(function () { return _this.flush(); }, StatsTimer);\r\n        }\r\n    };\r\n    AWTStatsManager._addStat = function (statName, value, apiKey) {\r\n        if (this._isInitalized && apiKey !== Utils.StatsApiKey) {\r\n            var tenantId = Utils.getTenantId(apiKey);\r\n            if (!this._stats[tenantId]) {\r\n                this._stats[tenantId] = {};\r\n            }\r\n            if (!this._stats[tenantId][statName]) {\r\n                this._stats[tenantId][statName] = value;\r\n            }\r\n            else {\r\n                this._stats[tenantId][statName] = this._stats[tenantId][statName] + value;\r\n            }\r\n        }\r\n    };\r\n    AWTStatsManager._isInitalized = false;\r\n    AWTStatsManager._stats = {};\r\n    return AWTStatsManager;\r\n}());\r\nexports.default = AWTStatsManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTStatsManager.js\n// module id = 12\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Version.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File for SDK version.\r\n*/\r\nexports.Version = '1.2.0';\r\nexports.FullVersionString = 'AWT-Web-JS-' + exports.Version;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/Version.js\n// module id = 13\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar AWTLogManagerSettings_1 = require(\"./AWTLogManagerSettings\");\r\nvar AWTLogger_1 = require(\"./AWTLogger\");\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\nvar AWTNotificationManager_1 = require(\"../common/AWTNotificationManager\");\r\nvar AWTAutoCollection_1 = require(\"./AWTAutoCollection\");\r\n/**\r\n* The AWTLogManager class manages the Aria SDK.\r\n*/\r\nvar AWTLogManager = /** @class */ (function () {\r\n    function AWTLogManager() {\r\n    }\r\n    /**\r\n    * Initializes the log manager. After this method is called, events are\r\n    * accepted for transmission.\r\n    * @param {string} tenantToken - A string that contains the default tenant token.\r\n    * @param {object} config      - [Optional] Configuration settings for initialize, as an AWTLogConfiguration object.\r\n    */\r\n    AWTLogManager.initialize = function (tenantToken, configuration) {\r\n        if (configuration === void 0) { configuration = {}; }\r\n        if (this._isInitialized) {\r\n            return;\r\n        }\r\n        this._isInitialized = true;\r\n        AWTLogManagerSettings_1.default.defaultTenantToken = tenantToken;\r\n        this._overrideValuesFromConfig(configuration);\r\n        if (this._config.disableCookiesUsage && !this._config.propertyStorageOverride) {\r\n            AWTLogManagerSettings_1.default.sessionEnabled = false;\r\n        }\r\n        AWTAutoCollection_1.default.addPropertyStorageOverride(this._config.propertyStorageOverride);\r\n        AWTAutoCollection_1.default.autoCollect(AWTLogManagerSettings_1.default.semanticContext, this._config.disableCookiesUsage, this._config.userAgent);\r\n        //Create sender\r\n        AWTTransmissionManagerCore_1.default.initialize(this._config);\r\n        AWTLogManagerSettings_1.default.loggingEnabled = true;\r\n        return this.getLogger();\r\n    };\r\n    /**\r\n     * Gets the global semantic context.\r\n     *\r\n     * @return A AWTSemanticContext object, through which you can set common semantic properties.\r\n     */\r\n    AWTLogManager.getSemanticContext = function () {\r\n        return AWTLogManagerSettings_1.default.semanticContext;\r\n    };\r\n    /**\r\n     * Asynchronously sends events currently in the queue. New events added\r\n     * are sent after the current flush finishes. The passed callback is\r\n     * called when flush finishes. <b>Note:</b> If LogManager is paused, or if\r\n     * flush is called again in less than 30 seconds, then flush is no-op, and\r\n     * the callback is not called.\r\n     * @param {function} callback - The function that is called when flush finishes.\r\n     */\r\n    AWTLogManager.flush = function (callback) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.flush(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Prevents new events from being added for transmission. It also batches all\r\n     * events currently in the queue, and creates requests for them to be sent. If\r\n     * HTML5 Beacons are supported, then they will be used.\r\n     */\r\n    AWTLogManager.flushAndTeardown = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            this._isDestroyed = true;\r\n            AWTTransmissionManagerCore_1.default.flushAndTeardown();\r\n            AWTLogManagerSettings_1.default.loggingEnabled = false;\r\n        }\r\n    };\r\n    /**\r\n     * Pasues the transmission of events.\r\n     */\r\n    AWTLogManager.pauseTransmission = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.pauseTransmission();\r\n        }\r\n    };\r\n    /**\r\n     * Resumes the tranmission of events.\r\n     */\r\n    AWTLogManager.resumeTransmision = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.resumeTransmision();\r\n        }\r\n    };\r\n    /**\r\n     * Sets the transmit profile. This changes the transmission timers\r\n     * based on the transmit profile.\r\n     * @param {string} profileName - A string that contains the name of the transmit profile.\r\n     */\r\n    AWTLogManager.setTransmitProfile = function (profileName) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.setTransmitProfile(profileName);\r\n        }\r\n    };\r\n    /**\r\n     * Loads custom transmission profiles. Each profile should have timers for\r\n     * high, normal, and low. Each profile should make sure\r\n     * that a each priority timer is a multiple of the priority higher than it.\r\n     * Setting the timer value to <i>-1</i> means the events for that priority will\r\n     * not be sent. Note that once a priority has been set to <i>not send</i>, then all priorities\r\n     * below it will also not be sent. The timers should be in the form of [low, normal, high].\r\n     * E.g, <i>Custom: [30,10,5]</i>.\r\n     * This method removes any previously loaded custom profiles.\r\n     * @param {object} profiles - A dictionary that contains the transmit profiles.\r\n     */\r\n    AWTLogManager.loadTransmitProfiles = function (profiles) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.loadTransmitProfiles(profiles);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the context sent with every event.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.setContext = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setProperty(name, value, type);\r\n    };\r\n    /**\r\n     * Sets the context sents with every event, and tags it as PII.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} pii                    - The kind of PII for the context property.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.setContextWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setPropertyWithPii(name, value, pii, type);\r\n    };\r\n    /**\r\n     * Sets the context sent with every event from this logger, and tags it as <i>customer content</i>.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} customerContent        - The kind of customer content for the context property, as one of the\r\n     * AWTCustomerContentKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.prototype.setContextWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setPropertyWithCustomerContent(name, value, customerContent, type);\r\n    };\r\n    /**\r\n     * Gets the logger for the specified tenant token.\r\n     * @param {string} tenantToken - A string that contains the tenant token.\r\n     * @return An AWTLogger object which sends data with the specified tenant token. If the tenant token is\r\n     * undefined, or null, or empty, then undefined is returned.\r\n     */\r\n    AWTLogManager.getLogger = function (tenantToken) {\r\n        var key = tenantToken;\r\n        if (!key || key === AWTLogManagerSettings_1.default.defaultTenantToken) {\r\n            key = '';\r\n        }\r\n        if (!this._loggers[tenantToken]) {\r\n            this._loggers[tenantToken] = new AWTLogger_1.default(tenantToken);\r\n        }\r\n        return this._loggers[tenantToken];\r\n    };\r\n    /**\r\n     * Adds a notification listener. The Aria SDK calls methods on the listener\r\n     * when an appropriate notification is raised.\r\n     * @param {object} listener - An AWTNotificationListener object.\r\n     */\r\n    AWTLogManager.addNotificationListener = function (listener) {\r\n        AWTNotificationManager_1.default.addNotificationListener(listener);\r\n    };\r\n    AWTLogManager._overrideValuesFromConfig = function (config) {\r\n        if (config.collectorUri) {\r\n            this._config.collectorUri = config.collectorUri;\r\n        }\r\n        if (config.cacheMemorySizeLimitInNumberOfEvents > 0) {\r\n            this._config.cacheMemorySizeLimitInNumberOfEvents = config.cacheMemorySizeLimitInNumberOfEvents;\r\n        }\r\n        if (config.httpXHROverride && config.httpXHROverride.sendPOST) {\r\n            this._config.httpXHROverride = config.httpXHROverride;\r\n        }\r\n        if (config.propertyStorageOverride && config.propertyStorageOverride.getProperty &&\r\n            config.propertyStorageOverride.setProperty) {\r\n            this._config.propertyStorageOverride = config.propertyStorageOverride;\r\n        }\r\n        if (config.userAgent) {\r\n            this._config.userAgent = config.userAgent;\r\n        }\r\n        if (config.disableCookiesUsage) {\r\n            this._config.disableCookiesUsage = config.disableCookiesUsage;\r\n        }\r\n        if (config.canSendStatEvent) {\r\n            this._config.canSendStatEvent = config.canSendStatEvent;\r\n        }\r\n    };\r\n    AWTLogManager._loggers = {};\r\n    AWTLogManager._isInitialized = false;\r\n    AWTLogManager._isDestroyed = false;\r\n    AWTLogManager._config = {\r\n        collectorUri: 'https://browser.pipe.aria.microsoft.com/Collector/3.0/',\r\n        cacheMemorySizeLimitInNumberOfEvents: 10000,\r\n        disableCookiesUsage: false,\r\n        canSendStatEvent: function (eventName) { return true; }\r\n    };\r\n    return AWTLogManager;\r\n}());\r\nexports.default = AWTLogManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogManager.js\n// module id = 14\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTLogManagerSettings.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar AWTEventProperties_1 = require(\"./AWTEventProperties\");\r\nvar AWTSemanticContext_1 = require(\"./AWTSemanticContext\");\r\n/**\r\n* Class that stores LogManagers context.\r\n*/\r\nvar AWTLogManagerSettings = /** @class */ (function () {\r\n    function AWTLogManagerSettings() {\r\n    }\r\n    AWTLogManagerSettings.logManagerContext = new AWTEventProperties_1.default();\r\n    AWTLogManagerSettings.sessionEnabled = true;\r\n    AWTLogManagerSettings.loggingEnabled = false;\r\n    AWTLogManagerSettings.defaultTenantToken = '';\r\n    AWTLogManagerSettings.semanticContext = new AWTSemanticContext_1.default(true, AWTLogManagerSettings.logManagerContext);\r\n    return AWTLogManagerSettings;\r\n}());\r\nexports.default = AWTLogManagerSettings;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogManagerSettings.js\n// module id = 15\n// module chunks = 0","import { log, init, telemetry, flush } from \"./logger\";\r\n\r\n/**\r\n * 配置\r\n */\r\nconst ARIA_SCRIPT = document.getElementById('ARIA-LOG');\r\nconsole.assert(!!ARIA_SCRIPT, 'the element with id=\"ARIA-LOG\" NOT exist in this document');\r\n\r\nconst CONFIG = document.getElementById('ARIA-LOG').dataset;\r\n\r\nconst TOKEN = CONFIG.token;\r\nconst LEVEL = (CONFIG.level || 'warn').toLocaleLowerCase();\r\nconst USER_ID = CONFIG.userid;\r\nconst CORELATION_ID = CONFIG.corelation || ((new Date).getTime() + '-' + Math.random());\r\nconst APP_NAME = CONFIG.appname || location.hostname;\r\nconst LOG_TABLE = (CONFIG.table || APP_NAME).replace(/[^\\w\\d]/g, '');\r\nconst VERBOSE = 'debug' in CONFIG ? CONFIG['debug'].toLowerCase() === \"true\" : true;\r\n\r\nconsole.assert(TOKEN && TOKEN.length > 0, 'data-token=\"token string\" MUST have an value');\r\nconsole.assert(LOG_TABLE.length >= 4, 'the table name MUST be 4-100 alphanumeric chars');\r\n\r\n\r\n/**\r\n * 日志级别\r\n */\r\nenum LogLevel {\r\n    all = 0,\r\n    trace = 10,\r\n    debug = 20,\r\n    info = 400,\r\n    warn = 500,\r\n    error = 600,\r\n    critical = 700,\r\n    alert = 800,\r\n}\r\n/**\r\n * 原始console API\r\n */\r\nconst _originConsole: Console | any = {\r\n    log: console.log\r\n};\r\n\r\n/**\r\n* @param {string} level 日志级别小写\r\n* @param {string} action 日志关键action或者位置\r\n* @param {any?} content 内容可以是string,数字或者Object\r\n*/\r\nfunction Log(level: string, action: string, content?: any, attrs?: any) {\r\n    var data: any = {\r\n        action: action,\r\n        title: document.title,\r\n        url: document.URL\r\n    }\r\n    for (var key in attrs) {\r\n        data[key] = attrs[key];\r\n    }\r\n    data.content = typeof content === 'object' ? JSON.stringify(content) : content;\r\n    if (level === \"telemetry\") {\r\n        telemetry(data);\r\n    } else if (!LEVEL || (LogLevel[level] >= LogLevel[LEVEL])) {\r\n        data.level = level;\r\n        log(data);\r\n    }\r\n};\r\n\r\n\r\n\r\n/**\r\n * 初始化设置\r\n */\r\ninit(TOKEN, APP_NAME, LOG_TABLE, {\r\n    CorelationId: CORELATION_ID,\r\n    UserId: USER_ID,\r\n});\r\n\r\n/**\r\n * 日志接口覆盖\r\n */\r\nconsole.log = function () {\r\n    if (VERBOSE) {\r\n        _originConsole.log.apply(console, arguments);\r\n    }\r\n    if (arguments.length > 1 && arguments.length < 3) {\r\n        Log.apply(null, arguments);\r\n    }\r\n};\r\n\r\n/**\r\n * 接口扩展\r\n */\r\n['info', 'debug', 'warn', 'error'].forEach(key => {\r\n    _originConsole[key] = console[key];\r\n    console[key] = function (...args) {\r\n        if (VERBOSE) {\r\n            _originConsole[key].apply(null, args);\r\n        }\r\n        if (args.length && args.length < 3) {\r\n            args.unshift(key);\r\n            Log.apply(Log, args);\r\n        }\r\n    }\r\n});\r\n\r\n//关闭前清空\r\nif(CONFIG.flush){\r\n    window.onbeforeunload = flush;    \r\n}\r\n\r\n//捕获全局错误\r\n\r\nwindow.onerror = function (msg, url, line, col, error) {\r\n    Log('error', msg, error, {\r\n        file: url,\r\n        line: line,\r\n        col: col,\r\n    })\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import { AWTLogManager, AWTLogger, AWTEventProperty, AWTPiiKind, AWTEventData } from '@aria/webjs-sdk';\r\n\r\n// AWTLogger logger\r\n\r\n\r\nlet _logger: AWTLogger;\r\n// var _manager: AWTLogManager;\r\nlet _token: string;\r\nlet _name: string = \"logging\";\r\nlet _table: string;\r\nlet _config = {};\r\n\r\nfunction getLogger(): AWTLogger {\r\n    if (!_logger) {\r\n        // _manager = \r\n        AWTLogManager.initialize(_token);\r\n        _logger = AWTLogManager.getLogger();\r\n        _logger.setContext(\"AppName\", _name);\r\n        _logger.setContext(\"UserAgent\", navigator.userAgent);\r\n        for (var key in _config) {\r\n            _logger.setContext(key, _config[key]);\r\n        }\r\n    }\r\n    return _logger;\r\n}\r\n\r\n// export function setToken(token: string): void {\r\n//     _token = token;\r\n// }\r\n\r\n// export function setName(name: string): void {\r\n//     _name = name;\r\n// }\r\n\r\nexport function init(token: string, name: string, table?: string, config?: Object): void {\r\n    _token = token;\r\n    _name = name;\r\n    _table = table;\r\n}\r\n\r\n/**\r\n * 记录日志\r\n * @param data -  data to log\r\n */\r\nexport function log(data: any): void {\r\n    return getLogger().logEvent({\r\n        name: _table || _name,\r\n        properties: data,\r\n    });\r\n}\r\n\r\n/**\r\n * 统计数据\r\n * @param data - data to telemetry\r\n */\r\nexport function telemetry(data): void {\r\n    return getLogger().logEvent({\r\n        name: 'telemetry',\r\n        properties: data\r\n    });\r\n}\r\n\r\nexport function flush(): boolean {\r\n    if (_logger) {\r\n        AWTLogManager.flushAndTeardown();\r\n        _logger = null;\r\n    }\r\n    return true;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/logger.ts","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AriaSDK.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File to export public classes, interfaces and enums.\r\n*/\r\nvar Enums_1 = require(\"../common/Enums\");\r\nexports.AWTPropertyType = Enums_1.AWTPropertyType;\r\nexports.AWTPiiKind = Enums_1.AWTPiiKind;\r\nexports.AWTEventPriority = Enums_1.AWTEventPriority;\r\nexports.AWTEventsDroppedReason = Enums_1.AWTEventsDroppedReason;\r\nexports.AWTEventsRejectedReason = Enums_1.AWTEventsRejectedReason;\r\nexports.AWTCustomerContentKind = Enums_1.AWTCustomerContentKind;\r\nvar Enums_2 = require(\"./Enums\");\r\nexports.AWTUserIdType = Enums_2.AWTUserIdType;\r\nexports.AWTSessionState = Enums_2.AWTSessionState;\r\nvar DataModels_1 = require(\"./DataModels\");\r\nexports.AWT_BEST_EFFORT = DataModels_1.AWT_BEST_EFFORT;\r\nexports.AWT_NEAR_REAL_TIME = DataModels_1.AWT_NEAR_REAL_TIME;\r\nexports.AWT_REAL_TIME = DataModels_1.AWT_REAL_TIME;\r\nvar AWTEventProperties_1 = require(\"./AWTEventProperties\");\r\nexports.AWTEventProperties = AWTEventProperties_1.default;\r\nvar AWTLogger_1 = require(\"./AWTLogger\");\r\nexports.AWTLogger = AWTLogger_1.default;\r\nvar AWTLogManager_1 = require(\"./AWTLogManager\");\r\nexports.AWTLogManager = AWTLogManager_1.default;\r\nvar AWTTransmissionManager_1 = require(\"./AWTTransmissionManager\");\r\nexports.AWTTransmissionManager = AWTTransmissionManager_1.default;\r\nvar AWTSerializer_1 = require(\"../common/AWTSerializer\");\r\nexports.AWTSerializer = AWTSerializer_1.default;\r\nvar AWTSemanticContext_1 = require(\"./AWTSemanticContext\");\r\nexports.AWTSemanticContext = AWTSemanticContext_1.default;\r\nexports.AWT_COLLECTOR_URL_UNITED_STATES = 'https://us.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_GERMANY = 'https://de.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_JAPAN = 'https://jp.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_AUSTRALIA = 'https://au.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_EUROPE = 'https://eu.pipe.aria.microsoft.com/Collector/3.0/';\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AriaSDK.js\n// module id = 18\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar AWTHttpManager_1 = require(\"./AWTHttpManager\");\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\nvar AWTRecordBatcher_1 = require(\"../common/AWTRecordBatcher\");\r\nvar AWTSerializer_1 = require(\"../common/AWTSerializer\");\r\nvar AWTNotificationManager_1 = require(\"../common/AWTNotificationManager\");\r\nvar RequestSizeLimitBytes = 2936012; //approx 2.8 Mb\r\nvar UploadNowCheckTimer = 250;\r\n/**\r\n * Class that manages adding events to inbound queues and batching of events\r\n * into requests.\r\n */\r\nvar AWTQueueManager = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {string} collectorUrl - The collector url to which the requests must be sent.\r\n     */\r\n    function AWTQueueManager(collectorUrl, _queueSizeLimit, xhrOverride) {\r\n        this._queueSizeLimit = _queueSizeLimit;\r\n        this._isCurrentlyUploadingNow = false;\r\n        this._uploadNowQueue = [];\r\n        this._shouldDropEventsOnPause = false;\r\n        this._paused = false;\r\n        this._queueSize = 0;\r\n        this._outboundQueue = [];\r\n        this._inboundQueues = {};\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High] = [];\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal] = [];\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low] = [];\r\n        this._addEmptyQueues();\r\n        this._batcher = new AWTRecordBatcher_1.default(RequestSizeLimitBytes, this._outboundQueue);\r\n        this._httpManager = new AWTHttpManager_1.default(this._outboundQueue, collectorUrl, this, xhrOverride);\r\n    }\r\n    /**\r\n     * Add an event to the appropriate inbound queue based on its priority.\r\n     * @param {object} event - The event to be added to the queue.\r\n     */\r\n    AWTQueueManager.prototype.addEvent = function (event) {\r\n        if (this._queueSize < this._queueSizeLimit) {\r\n            if (!this._paused || !this._shouldDropEventsOnPause) {\r\n                this._queueSize++;\r\n                this._inboundQueues[event.priority][this._inboundQueues[event.priority].length - 1].push(event);\r\n            }\r\n        }\r\n        else {\r\n            AWTNotificationManager_1.default.eventsDropped([event], Enums_1.AWTEventsDroppedReason.QueueFull);\r\n        }\r\n    };\r\n    /**\r\n     * Batch and send events currently in the queue for the given priority.\r\n     * @param {enum} priority - Priority for which to send events.\r\n     */\r\n    AWTQueueManager.prototype.sendEventsForPriorityAndAbove = function (priority) {\r\n        this._batchEvents(priority);\r\n        this._httpManager.sendQueuedRequests();\r\n    };\r\n    /**\r\n     * Check if the inbound queues or batcher has any events that can be sent presently.\r\n     * @return {boolean} True if there are events, false otherwise.\r\n     */\r\n    AWTQueueManager.prototype.hasEvents = function () {\r\n        return (this._inboundQueues[Enums_1.AWTEventPriority.High][0].length > 0 || this._inboundQueues[Enums_1.AWTEventPriority.Normal][0].length > 0\r\n            || this._inboundQueues[Enums_1.AWTEventPriority.Low][0].length > 0 || this._batcher.hasBatch())\r\n            && this._httpManager.hasIdleConnection();\r\n    };\r\n    /**\r\n     * Add back the events from a failed request back to the queue.\r\n     * @param {object} request - The request whose events need to be added back to the batcher.\r\n     */\r\n    AWTQueueManager.prototype.addBackRequest = function (request) {\r\n        if (!this._paused || !this._shouldDropEventsOnPause) {\r\n            for (var token in request) {\r\n                if (request.hasOwnProperty(token)) {\r\n                    for (var i = 0; i < request[token].length; ++i) {\r\n                        this.addEvent(request[token][i]);\r\n                    }\r\n                }\r\n            }\r\n            AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Batch all current events in the queues and send them.\r\n     */\r\n    AWTQueueManager.prototype.teardown = function () {\r\n        if (!this._paused) {\r\n            this._batchEvents(Enums_1.AWTEventPriority.Low);\r\n            this._httpManager.flush();\r\n        }\r\n    };\r\n    /**\r\n     * Sends events for all priority for the current inbound queue.\r\n     * This method adds new inbound queues to which new events will be added.\r\n     * @param {function} callback - The function to be called when uploadNow is finished.\r\n     */\r\n    AWTQueueManager.prototype.uploadNow = function (callback) {\r\n        var _this = this;\r\n        this._addEmptyQueues();\r\n        if (!this._isCurrentlyUploadingNow) {\r\n            this._isCurrentlyUploadingNow = true;\r\n            setTimeout(function () { return _this._uploadNow(callback); }, 0);\r\n        }\r\n        else {\r\n            this._uploadNowQueue.push(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Pause the tranmission of any requests\r\n     */\r\n    AWTQueueManager.prototype.pauseTransmission = function () {\r\n        this._paused = true;\r\n        this._httpManager.pause();\r\n        if (this.shouldDropEventsOnPause) {\r\n            this._queueSize -= (this._inboundQueues[Enums_1.AWTEventPriority.High][0].length +\r\n                this._inboundQueues[Enums_1.AWTEventPriority.Normal][0].length + this._inboundQueues[Enums_1.AWTEventPriority.Low][0].length);\r\n            this._inboundQueues[Enums_1.AWTEventPriority.High][0] = [];\r\n            this._inboundQueues[Enums_1.AWTEventPriority.Normal][0] = [];\r\n            this._inboundQueues[Enums_1.AWTEventPriority.Low][0] = [];\r\n            this._httpManager.removeQueuedRequests();\r\n        }\r\n    };\r\n    /**\r\n     * Resumes transmission of events.\r\n     */\r\n    AWTQueueManager.prototype.resumeTransmission = function () {\r\n        this._paused = false;\r\n        this._httpManager.resume();\r\n    };\r\n    /**\r\n     * Determines whether events in the queues should be dropped when transmission is paused.\r\n     */\r\n    AWTQueueManager.prototype.shouldDropEventsOnPause = function (shouldDropEventsOnPause) {\r\n        this._shouldDropEventsOnPause = shouldDropEventsOnPause;\r\n    };\r\n    /**\r\n     * Remove the first queues for all priorities in the inbound queues map. This is called\r\n     * when transmission manager has finished flushing the events in the old queues. We now make\r\n     * the next queue the primary queue.\r\n     */\r\n    AWTQueueManager.prototype._removeFirstQueues = function () {\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High].shift();\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal].shift();\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low].shift();\r\n    };\r\n    /**\r\n     * Add empty queues for all priorities in the inbound queues map. This is called\r\n     * when Transmission Manager is being flushed. This ensures that new events added\r\n     * after flush are stored separately till we flush the current events.\r\n     */\r\n    AWTQueueManager.prototype._addEmptyQueues = function () {\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High].push([]);\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal].push([]);\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low].push([]);\r\n    };\r\n    AWTQueueManager.prototype._batchEvents = function (priority) {\r\n        var priorityToProcess = Enums_1.AWTEventPriority.High;\r\n        while (priorityToProcess >= priority) {\r\n            while (this._inboundQueues[priorityToProcess][0].length > 0) {\r\n                var event_1 = this._inboundQueues[priorityToProcess][0].pop();\r\n                this._queueSize--;\r\n                if (!event_1.serializedEvent) {\r\n                    event_1.serializedEvent = AWTSerializer_1.default.getEventBlob(event_1);\r\n                }\r\n                this._batcher.addEventToBatch(event_1);\r\n            }\r\n            priorityToProcess--;\r\n        }\r\n        this._batcher.flushBatch();\r\n    };\r\n    AWTQueueManager.prototype._uploadNow = function (callback) {\r\n        var _this = this;\r\n        if (this.hasEvents()) {\r\n            this.sendEventsForPriorityAndAbove(Enums_1.AWTEventPriority.Low);\r\n        }\r\n        this._checkOutboundQueueEmptyAndSent(function () {\r\n            //Move the next queues to be primary\r\n            _this._removeFirstQueues();\r\n            if (callback !== null && callback !== undefined) {\r\n                callback();\r\n            }\r\n            if (_this._uploadNowQueue.length > 0) {\r\n                setTimeout(function () { return _this._uploadNow(_this._uploadNowQueue.shift()); }, 0);\r\n            }\r\n            else {\r\n                _this._isCurrentlyUploadingNow = false;\r\n                if (_this.hasEvents()) {\r\n                    AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    AWTQueueManager.prototype._checkOutboundQueueEmptyAndSent = function (callback) {\r\n        var _this = this;\r\n        if (this._httpManager.isCompletelyIdle()) {\r\n            callback();\r\n        }\r\n        else {\r\n            setTimeout(function () { return _this._checkOutboundQueueEmptyAndSent(callback); }, UploadNowCheckTimer);\r\n        }\r\n    };\r\n    return AWTQueueManager;\r\n}());\r\nexports.default = AWTQueueManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTQueueManager.js\n// module id = 19\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar AWTSerializer_1 = require(\"../common/AWTSerializer\");\r\nvar AWTRetryPolicy_1 = require(\"../common/AWTRetryPolicy\");\r\nvar AWTKillSwitch_1 = require(\"../common/AWTKillSwitch\");\r\nvar AWTClockSkewManager_1 = require(\"../common/AWTClockSkewManager\");\r\nvar Version = require(\"./Version\");\r\nvar Utils = require(\"../common/Utils\");\r\nvar AWTNotificationManager_1 = require(\"../common/AWTNotificationManager\");\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\nvar MaxConnections = 2;\r\nvar MaxRetries = 1;\r\nvar Method = 'POST';\r\n/**\r\n * Class managing the sending of requests.\r\n */\r\nvar AWTHttpManager = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {object} requestQueue   - The queue that contains the requests to be sent.\r\n     * @param {string} collectorUrl   - The collector url to which the requests must be sent.\r\n     * @param {object} _queueManager  - The queue manager that we should add requests back to if needed.\r\n     * @param {object} _httpInterface - The http interface that should be used to send HTTP requests.\r\n     */\r\n    function AWTHttpManager(_requestQueue, collectorUrl, _queueManager, _httpInterface) {\r\n        var _this = this;\r\n        this._requestQueue = _requestQueue;\r\n        this._queueManager = _queueManager;\r\n        this._httpInterface = _httpInterface;\r\n        this._urlString = '?qsp=true&content-type=application%2Fbond-compact-binary&client-id=NO_AUTH&sdk-version='\r\n            + Version.FullVersionString;\r\n        this._killSwitch = new AWTKillSwitch_1.default();\r\n        this._paused = false;\r\n        this._clockSkewManager = new AWTClockSkewManager_1.default();\r\n        this._useBeacons = false;\r\n        this._activeConnections = 0;\r\n        if (!Utils.isUint8ArrayAvailable()) {\r\n            this._urlString += '&content-encoding=base64';\r\n        }\r\n        this._urlString = collectorUrl + this._urlString;\r\n        if (!this._httpInterface) {\r\n            this._useBeacons = !Utils.isReactNative(); //Only use beacons if not running in React Native\r\n            this._httpInterface = {\r\n                sendPOST: function (urlString, data, ontimeout, onerror, onload, sync) {\r\n                    if (Utils.useXDomainRequest()) {\r\n                        var xdr = new XDomainRequest();\r\n                        xdr.open(Method, urlString);\r\n                        //can't get the status code in xdr.\r\n                        xdr.onload = function () {\r\n                            // we will assume onload means the request succeeded.\r\n                            onload(200, null);\r\n                        };\r\n                        xdr.onerror = function () {\r\n                            // we will assume onerror means we need to drop the events.\r\n                            onerror(400, null);\r\n                        };\r\n                        xdr.ontimeout = function () {\r\n                            // we will assume ontimeout means we need to retry the events.\r\n                            ontimeout(500, null);\r\n                        };\r\n                        xdr.send(data);\r\n                    }\r\n                    else if (Utils.isReactNative()) {\r\n                        //Use the fetch API to send events in React Native\r\n                        fetch(urlString, {\r\n                            body: data,\r\n                            method: Method\r\n                        }).then(function (response) {\r\n                            var headerMap = {};\r\n                            if (response.headers) {\r\n                                response.headers.forEach(function (value, name) {\r\n                                    headerMap[name] = value;\r\n                                });\r\n                            }\r\n                            onload(response.status, headerMap);\r\n                        }).catch(function (error) {\r\n                            //In case there is an error in the request. Set the status to 0\r\n                            //so that the events can be retried later.\r\n                            onerror(0, {});\r\n                        });\r\n                    }\r\n                    else {\r\n                        var xhr_1 = new XMLHttpRequest();\r\n                        xhr_1.open(Method, urlString, !sync);\r\n                        xhr_1.onload = function () {\r\n                            onload(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.onerror = function () {\r\n                            onerror(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.ontimeout = function () {\r\n                            ontimeout(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.send(data);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Check if there is an idle connection overwhich we can send a request.\r\n     * @return {boolean} True if there is an idle connection, false otherwise.\r\n     */\r\n    AWTHttpManager.prototype.hasIdleConnection = function () {\r\n        return this._activeConnections < MaxConnections;\r\n    };\r\n    /**\r\n     * Send requests in the request queue up if there is an idle connection, sending is\r\n     * not pause and clock skew manager allows sending request.\r\n     */\r\n    AWTHttpManager.prototype.sendQueuedRequests = function () {\r\n        while (this.hasIdleConnection() && !this._paused && this._requestQueue.length > 0\r\n            && this._clockSkewManager.allowRequestSending()) {\r\n            this._activeConnections++;\r\n            this._sendRequest(this._requestQueue.pop(), 0, false);\r\n        }\r\n        //No more requests to send, tell TPM to try to schedule timer\r\n        //in case it was waiting for idle connections\r\n        if (this.hasIdleConnection()) {\r\n            AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Check if there are no active requests being sent.\r\n     * @return {boolean} True if idle, false otherwise.\r\n     */\r\n    AWTHttpManager.prototype.isCompletelyIdle = function () {\r\n        return this._activeConnections === 0;\r\n    };\r\n    /**\r\n     * Queue all the remaning requests to be sent. The requests will be\r\n     * sent using HTML5 Beacons if they are available.\r\n     */\r\n    AWTHttpManager.prototype.flush = function () {\r\n        while (this._requestQueue.length > 0) {\r\n            this._sendRequest(this._requestQueue.pop(), 0, true);\r\n        }\r\n    };\r\n    /**\r\n     * Pause the sending of requests. No new requests will be sent.\r\n     */\r\n    AWTHttpManager.prototype.pause = function () {\r\n        this._paused = true;\r\n    };\r\n    /**\r\n     * Resume the sending of requests.\r\n     */\r\n    AWTHttpManager.prototype.resume = function () {\r\n        this._paused = false;\r\n        this.sendQueuedRequests();\r\n    };\r\n    /**\r\n     * Removes any pending requests to be sent.\r\n     */\r\n    AWTHttpManager.prototype.removeQueuedRequests = function () {\r\n        this._requestQueue.length = 0;\r\n    };\r\n    AWTHttpManager.prototype._sendRequest = function (request, retryCount, isTeardown) {\r\n        var _this = this;\r\n        if (this._paused) {\r\n            this._activeConnections--;\r\n            this._queueManager.addBackRequest(request);\r\n            return;\r\n        }\r\n        var tokenCount = 0;\r\n        var apikey = '';\r\n        for (var token in request) {\r\n            if (request.hasOwnProperty(token)) {\r\n                if (!this._killSwitch.isTenantKilled(token)) {\r\n                    if (apikey.length > 0) {\r\n                        apikey += ',';\r\n                    }\r\n                    apikey += token;\r\n                    tokenCount++;\r\n                }\r\n                else {\r\n                    AWTNotificationManager_1.default.eventsDropped(request[token], Enums_1.AWTEventsDroppedReason.KillSwitch);\r\n                    delete request[token];\r\n                }\r\n            }\r\n        }\r\n        if (tokenCount > 0) {\r\n            var blob = AWTSerializer_1.default.getPayloadBlob(request, tokenCount);\r\n            var urlString = this._urlString + '&x-apikey=' + apikey + '&client-time-epoch-millis='\r\n                + Date.now().toString();\r\n            if (this._clockSkewManager.shouldAddClockSkewHeaders()) {\r\n                urlString = urlString + '&time-delta-to-apply-millis=' + this._clockSkewManager.getClockSkewHeaderValue();\r\n            }\r\n            var data = void 0;\r\n            if (!Utils.isUint8ArrayAvailable()) {\r\n                data = AWTSerializer_1.default.base64Encode(blob);\r\n            }\r\n            else {\r\n                data = new Uint8Array(blob);\r\n            }\r\n            //beacons will not be used if an http interface was passed by the customer\r\n            if (this._useBeacons && isTeardown && Utils.isBeaconsSupported()) {\r\n                navigator.sendBeacon(urlString, data);\r\n            }\r\n            else {\r\n                this._httpInterface.sendPOST(urlString, data, function (status, headers) {\r\n                    _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount);\r\n                }, function (status, headers) {\r\n                    _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount);\r\n                }, function (status, headers) {\r\n                    _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount);\r\n                }, false);\r\n            }\r\n        }\r\n        else if (!isTeardown) {\r\n            this._handleRequestFinished(null, {});\r\n        }\r\n    };\r\n    AWTHttpManager.prototype._retryRequestIfNeeded = function (status, headers, request, tokenCount, apikey, retryCount) {\r\n        var _this = this;\r\n        var shouldRetry = true;\r\n        if (typeof status !== 'undefined') {\r\n            if (headers) {\r\n                var killedTokens = this._killSwitch.setKillSwitchTenants(headers['kill-tokens'], headers['kill-duration-seconds']);\r\n                this._clockSkewManager.setClockSkew(headers['time-delta-millis']);\r\n                for (var i = 0; i < killedTokens.length; ++i) {\r\n                    AWTNotificationManager_1.default.eventsDropped(request[killedTokens[i]], Enums_1.AWTEventsDroppedReason.KillSwitch);\r\n                    delete request[killedTokens[i]];\r\n                    tokenCount--;\r\n                }\r\n            }\r\n            else {\r\n                this._clockSkewManager.setClockSkew(null);\r\n            }\r\n            if (status === 200) {\r\n                this._handleRequestFinished(true, request);\r\n                return;\r\n            }\r\n            if (!AWTRetryPolicy_1.default.shouldRetryForStatus(status) || tokenCount <= 0) {\r\n                shouldRetry = false;\r\n            }\r\n        }\r\n        if (shouldRetry) {\r\n            if (retryCount < MaxRetries) {\r\n                for (var token in request) {\r\n                    if (request.hasOwnProperty(token)) {\r\n                        AWTNotificationManager_1.default.eventsRetrying(request[token]);\r\n                    }\r\n                }\r\n                setTimeout(function () { return _this._sendRequest(request, retryCount + 1, false); }, AWTRetryPolicy_1.default.getMillisToBackoffForRetry(retryCount));\r\n            }\r\n            else {\r\n                this._activeConnections--;\r\n                AWTTransmissionManagerCore_1.default.backOffTransmission();\r\n                this._queueManager.addBackRequest(request);\r\n            }\r\n        }\r\n        else {\r\n            this._handleRequestFinished(false, request);\r\n        }\r\n    };\r\n    AWTHttpManager.prototype._handleRequestFinished = function (success, request) {\r\n        if (success) {\r\n            AWTTransmissionManagerCore_1.default.clearBackOff();\r\n        }\r\n        for (var token in request) {\r\n            if (request.hasOwnProperty(token)) {\r\n                if (success) {\r\n                    AWTNotificationManager_1.default.eventsSent(request[token]);\r\n                }\r\n                else {\r\n                    AWTNotificationManager_1.default.eventsDropped(request[token], Enums_1.AWTEventsDroppedReason.NonRetryableStatus);\r\n                }\r\n            }\r\n        }\r\n        this._activeConnections--;\r\n        this.sendQueuedRequests();\r\n    };\r\n    /**\r\n     * Converts the XHR getAllResponseHeaders to a map containing the header key and value.\r\n     */\r\n    AWTHttpManager.prototype._convertAllHeadersToMap = function (headersString) {\r\n        var headers = {};\r\n        if (headersString) {\r\n            var headersArray = headersString.split('\\n');\r\n            for (var i = 0; i < headersArray.length; ++i) {\r\n                var header = headersArray[i].split(': ');\r\n                headers[header[0]] = header[1];\r\n            }\r\n        }\r\n        return headers;\r\n    };\r\n    return AWTHttpManager;\r\n}());\r\nexports.default = AWTHttpManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTHttpManager.js\n// module id = 20\n// module chunks = 0","\"use strict\";\r\n/**\r\n* microsoft.bond.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar bond_const_1 = require(\"./bond_const\");\r\nexports._BondDataType = bond_const_1._BondDataType;\r\nvar _Encoding = require(\"./microsoft.bond.encoding\");\r\nexports._Encoding = _Encoding;\r\nvar IO = require(\"./microsoft.bond.io\");\r\nexports.IO = IO;\r\nvar microsoft_bond_primitives_1 = require(\"./microsoft.bond.primitives\");\r\nexports.Int64 = microsoft_bond_primitives_1.Int64;\r\nexports.UInt64 = microsoft_bond_primitives_1.UInt64;\r\nexports.Number = microsoft_bond_primitives_1.Number;\r\nvar CompactBinaryProtocolWriter = /** @class */ (function () {\r\n    function CompactBinaryProtocolWriter(stream) {\r\n        this._stream = stream;\r\n    }\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteBlob = function (blob) {\r\n        this._stream._Write(blob, 0, blob.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteBool = function (value) {\r\n        this._stream._WriteByte(value ? 1 : 0);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteContainerBegin = function (size, elementType) {\r\n        this._WriteUInt8(elementType);\r\n        this._WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteMapContainerBegin = function (size, keyType, valueType) {\r\n        this._WriteUInt8(keyType);\r\n        this._WriteUInt8(valueType);\r\n        this._WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteDouble = function (value) {\r\n        var array = _Encoding._Double_GetBytes(value);\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteFieldBegin = function (type, id, metadata) {\r\n        if (id <= 5) {\r\n            this._stream._WriteByte(type | (id << 5));\r\n        }\r\n        else if (id <= 0xff) {\r\n            this._stream._WriteByte(type | (6 << 5));\r\n            this._stream._WriteByte(id);\r\n        }\r\n        else {\r\n            this._stream._WriteByte(type | (7 << 5));\r\n            this._stream._WriteByte(id);\r\n            this._stream._WriteByte(id >> 8);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteInt32 = function (value) {\r\n        value = _Encoding._Zigzag_EncodeZigzag32(value);\r\n        this._WriteUInt32(value);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteInt64 = function (value) {\r\n        this._WriteUInt64(_Encoding._Zigzag_EncodeZigzag64(value));\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteString = function (value) {\r\n        if (value === '') {\r\n            this._WriteUInt32(0 /*length*/);\r\n        }\r\n        else {\r\n            var array = _Encoding._Utf8_GetBytes(value);\r\n            this._WriteUInt32(array.length);\r\n            this._stream._Write(array, 0, array.length);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteStructEnd = function (isBase) {\r\n        this._WriteUInt8(isBase ? bond_const_1._BondDataType._BT_STOP_BASE : bond_const_1._BondDataType._BT_STOP);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt32 = function (value) {\r\n        var array = _Encoding._Varint_GetBytes(microsoft_bond_primitives_1.Number._ToUInt32(value));\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt64 = function (value) {\r\n        var array = _Encoding._Varint64_GetBytes(value);\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt8 = function (value) {\r\n        this._stream._WriteByte(microsoft_bond_primitives_1.Number._ToUInt8(value));\r\n    };\r\n    return CompactBinaryProtocolWriter;\r\n}());\r\nexports.CompactBinaryProtocolWriter = CompactBinaryProtocolWriter;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.js\n// module id = 21\n// module chunks = 0","\"use strict\";\r\n/**\r\n* bond_const.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Tool     : bondc, Version=3.0.1, Build=bond-git.debug.not\r\n//     Template : Microsoft.Bond.Rules.dll#TypeScript.tt\r\n//     File     : bond_const.ts\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost when\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\nvar _BondDataType;\r\n(function (_BondDataType) {\r\n    _BondDataType[_BondDataType[\"_BT_STOP\"] = 0] = \"_BT_STOP\";\r\n    _BondDataType[_BondDataType[\"_BT_STOP_BASE\"] = 1] = \"_BT_STOP_BASE\";\r\n    _BondDataType[_BondDataType[\"_BT_BOOL\"] = 2] = \"_BT_BOOL\";\r\n    _BondDataType[_BondDataType[\"_BT_DOUBLE\"] = 8] = \"_BT_DOUBLE\";\r\n    _BondDataType[_BondDataType[\"_BT_STRING\"] = 9] = \"_BT_STRING\";\r\n    _BondDataType[_BondDataType[\"_BT_STRUCT\"] = 10] = \"_BT_STRUCT\";\r\n    _BondDataType[_BondDataType[\"_BT_LIST\"] = 11] = \"_BT_LIST\";\r\n    _BondDataType[_BondDataType[\"_BT_MAP\"] = 13] = \"_BT_MAP\";\r\n    _BondDataType[_BondDataType[\"_BT_INT32\"] = 16] = \"_BT_INT32\";\r\n    _BondDataType[_BondDataType[\"_BT_INT64\"] = 17] = \"_BT_INT64\";\r\n})(_BondDataType = exports._BondDataType || (exports._BondDataType = {}));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/bond_const.js\n// module id = 22\n// module chunks = 0","\"use strict\";\r\n/**\r\n* microsoft.bond.encoding.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar microsoft_bond_primitives_1 = require(\"./microsoft.bond.primitives\");\r\nvar microsoft_bond_floatutils_1 = require(\"./microsoft.bond.floatutils\");\r\nvar microsoft_bond_utils_1 = require(\"./microsoft.bond.utils\");\r\nfunction _Utf8_GetBytes(value) {\r\n    var array = [];\r\n    for (var i = 0; i < value.length; ++i) {\r\n        var char = value.charCodeAt(i);\r\n        if (char < 0x80) {\r\n            array.push(char);\r\n        }\r\n        else if (char < 0x800) {\r\n            array.push(0xc0 | (char >> 6), 0x80 | (char & 0x3f));\r\n        }\r\n        else if (char < 0xd800 || char >= 0xe000) {\r\n            array.push(0xe0 | (char >> 12), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n        }\r\n        else {\r\n            char = 0x10000 + (((char & 0x3ff) << 10) | (value.charCodeAt(++i) & 0x3ff));\r\n            array.push(0xf0 | (char >> 18), 0x80 | ((char >> 12) & 0x3f), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n        }\r\n    }\r\n    return array;\r\n}\r\nexports._Utf8_GetBytes = _Utf8_GetBytes;\r\nfunction _Base64_GetString(inArray) {\r\n    var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n    var output = [];\r\n    var paddingBytes = inArray.length % 3;\r\n    var toBase64 = function (num) {\r\n        return [lookup.charAt((num >> 18) & 0x3F),\r\n            lookup.charAt((num >> 12) & 0x3F),\r\n            lookup.charAt((num >> 6) & 0x3F),\r\n            lookup.charAt(num & 0x3F)].join('');\r\n    };\r\n    for (var i = 0, length_1 = inArray.length - paddingBytes; i < length_1; i += 3) {\r\n        var temp = (inArray[i] << 16) + (inArray[i + 1] << 8) + (inArray[i + 2]);\r\n        output.push(toBase64(temp));\r\n    }\r\n    switch (paddingBytes) {\r\n        case 1:\r\n            var temp = inArray[inArray.length - 1];\r\n            output.push(lookup.charAt(temp >> 2));\r\n            output.push(lookup.charAt((temp << 4) & 0x3F));\r\n            output.push('==');\r\n            break;\r\n        case 2:\r\n            var temp2 = (inArray[inArray.length - 2] << 8) + (inArray[inArray.length - 1]);\r\n            output.push(lookup.charAt(temp2 >> 10));\r\n            output.push(lookup.charAt((temp2 >> 4) & 0x3F));\r\n            output.push(lookup.charAt((temp2 << 2) & 0x3F));\r\n            output.push('=');\r\n            break;\r\n    }\r\n    return output.join('');\r\n}\r\nexports._Base64_GetString = _Base64_GetString;\r\nfunction _Varint_GetBytes(value) {\r\n    var array = [];\r\n    while (value & 0xffffff80) {\r\n        array.push((value & 0x7f) | 0x80);\r\n        value >>>= 7;\r\n    }\r\n    array.push(value & 0x7f);\r\n    return array;\r\n}\r\nexports._Varint_GetBytes = _Varint_GetBytes;\r\nfunction _Varint64_GetBytes(value) {\r\n    var low = value.low;\r\n    var high = value.high;\r\n    var array = [];\r\n    while (high || (0xffffff80 & low)) {\r\n        array.push((low & 0x7f) | 0x80);\r\n        low = ((high & 0x7f) << 25) | (low >>> 7);\r\n        high >>>= 7;\r\n    }\r\n    array.push(low & 0x7f);\r\n    return array;\r\n}\r\nexports._Varint64_GetBytes = _Varint64_GetBytes;\r\n// Note: see notes of Float.\r\nfunction _Double_GetBytes(value) {\r\n    if (microsoft_bond_utils_1.BrowserChecker._IsDataViewSupport()) {\r\n        var view = new DataView(new ArrayBuffer(8));\r\n        view.setFloat64(0, value, true /*littleEndian*/);\r\n        var array = [];\r\n        for (var i = 0; i < 8; ++i) {\r\n            array.push(view.getUint8(i));\r\n        }\r\n        return array;\r\n    }\r\n    else {\r\n        return microsoft_bond_floatutils_1.FloatUtils._ConvertNumberToArray(value, true /*isDouble*/);\r\n    }\r\n}\r\nexports._Double_GetBytes = _Double_GetBytes;\r\nfunction _Zigzag_EncodeZigzag32(value) {\r\n    value = microsoft_bond_primitives_1.Number._ToInt32(value);\r\n    return ((value << 1) ^ (value >> (4 /*sizeof(int)*/ * 8 - 1)));\r\n}\r\nexports._Zigzag_EncodeZigzag32 = _Zigzag_EncodeZigzag32;\r\nfunction _Zigzag_EncodeZigzag64(value) {\r\n    var low = value.low;\r\n    var high = value.high;\r\n    var tmpH = (high << 1) | (low >>> 31);\r\n    var tmpL = low << 1;\r\n    if (high & 0x80000000) {\r\n        tmpH = ~tmpH;\r\n        tmpL = ~tmpL;\r\n    }\r\n    var res = new microsoft_bond_primitives_1.UInt64('0');\r\n    res.low = tmpL;\r\n    res.high = tmpH;\r\n    return res;\r\n}\r\nexports._Zigzag_EncodeZigzag64 = _Zigzag_EncodeZigzag64;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.encoding.js\n// module id = 23\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* microsoft.bond.floatutils.ts\r\n* Copyright: Microsoft 2016\r\n*\r\n* This class will be used to convert float/double to byte array on browsers which don't support html5.\r\n*\r\n* Format: IEEE-754, littleEndian, http://en.wikipedia.org/wiki/IEEE_754-1985\r\n*\r\n*  \\note\r\n* 1. Don't have negative zero. All zero will be positive zero.\r\n* 2. If the buffer array passed to ConvertArrayToFloat() is actual NaN or Inifinity value,\r\n*    exception will be raised.\r\n*/\r\nvar FloatUtils = /** @class */ (function () {\r\n    function FloatUtils() {\r\n    }\r\n    FloatUtils._ConvertNumberToArray = function (num, isDouble) {\r\n        if (!num) {\r\n            return isDouble ? this._doubleZero : this._floatZero;\r\n        }\r\n        var exponentBits = isDouble ? 11 : 8;\r\n        var precisionBits = isDouble ? 52 : 23;\r\n        // follow IEEE-754, exponent bias is 2^(k-1)-1 where k is the number of bits\r\n        // in the exponent: http://en.wikipedia.org/wiki/Exponent_bias\r\n        var bias = (1 << (exponentBits - 1)) - 1;\r\n        var minExponent = 1 - bias;\r\n        var maxExponent = bias;\r\n        var sign = num < 0 ? 1 : 0;\r\n        num = Math.abs(num);\r\n        var intPart = Math.floor(num);\r\n        var floatPart = num - intPart;\r\n        var len = 2 * (bias + 2) + precisionBits;\r\n        var buffer = new Array(len);\r\n        var i = 0;\r\n        while (i < len) {\r\n            buffer[i++] = 0;\r\n        }\r\n        // caculate the intPart\r\n        i = bias + 2;\r\n        while (i && intPart) {\r\n            buffer[--i] = intPart % 2;\r\n            intPart = Math.floor(intPart / 2);\r\n        }\r\n        // caculate the floatPart\r\n        i = bias + 1;\r\n        while (i < len - 1 && floatPart > 0) {\r\n            floatPart *= 2;\r\n            if (floatPart >= 1) {\r\n                buffer[++i] = 1;\r\n                --floatPart;\r\n            }\r\n            else {\r\n                buffer[++i] = 0;\r\n            }\r\n        }\r\n        // find the first 1\r\n        var firstBit = 0;\r\n        while (firstBit < len && !buffer[firstBit]) {\r\n            firstBit++;\r\n        }\r\n        // caculate exponent\r\n        var exponent = bias + 1 - firstBit;\r\n        // caculate round\r\n        var lastBit = firstBit + precisionBits;\r\n        if (buffer[lastBit + 1]) {\r\n            for (i = lastBit; i > firstBit; --i) {\r\n                buffer[i] = 1 - buffer[i];\r\n                if (buffer) {\r\n                    break;\r\n                }\r\n            }\r\n            if (i === firstBit) {\r\n                ++exponent;\r\n            }\r\n        }\r\n        // check overflow\r\n        if (exponent > maxExponent || intPart) {\r\n            if (sign) {\r\n                return isDouble ? this._doubleNegInifinity : this._floatNegInifinity;\r\n            }\r\n            else {\r\n                return isDouble ? this._doubleInifinity : this._floatInifinity;\r\n            }\r\n        }\r\n        else if (exponent < minExponent) {\r\n            return isDouble ? this._doubleZero : this._floatZero;\r\n        }\r\n        // caculate the result\r\n        if (isDouble) {\r\n            var high = 0;\r\n            for (i = 0; i < 20; ++i) {\r\n                high = (high << 1) | buffer[++firstBit];\r\n            }\r\n            var low = 0;\r\n            for (; i < 52; ++i) {\r\n                low = (low << 1) | buffer[++firstBit];\r\n            }\r\n            high |= (exponent + bias) << 20;\r\n            high = (sign << 31) | (high & 0x7FFFFFFF);\r\n            var resArray = [low & 0xff, (low >> 8) & 0xff, (low >> 16) & 0xff, low >>> 24,\r\n                high & 0xff, (high >> 8) & 0xff, (high >> 16) & 0xff, high >>> 24];\r\n            return resArray;\r\n        }\r\n        else {\r\n            var result = 0;\r\n            for (i = 0; i < 23; ++i) {\r\n                result = (result << 1) | buffer[++firstBit];\r\n            }\r\n            result |= (exponent + bias) << 23;\r\n            result = (sign << 31) | (result & 0x7FFFFFFF);\r\n            var resArray = [result & 0xff, (result >> 8) & 0xff, (result >> 16) & 0xff, result >>> 24];\r\n            return resArray;\r\n        }\r\n    };\r\n    FloatUtils._floatZero = [0x00, 0x00, 0x00, 0x00];\r\n    FloatUtils._doubleZero = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\r\n    FloatUtils._floatInifinity = [0x00, 0x00, 0x80, 0x7F];\r\n    FloatUtils._floatNegInifinity = [0x00, 0x00, 0x80, 0xFF];\r\n    FloatUtils._doubleInifinity = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f];\r\n    FloatUtils._doubleNegInifinity = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff];\r\n    return FloatUtils;\r\n}());\r\nexports.FloatUtils = FloatUtils;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.floatutils.js\n// module id = 24\n// module chunks = 0","\"use strict\";\r\n/**\r\n* microsoft.bond.utils.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar BrowserChecker = /** @class */ (function () {\r\n    function BrowserChecker() {\r\n    }\r\n    BrowserChecker._IsDataViewSupport = function () {\r\n        return typeof ArrayBuffer !== 'undefined' &&\r\n            typeof DataView !== 'undefined';\r\n    };\r\n    return BrowserChecker;\r\n}());\r\nexports.BrowserChecker = BrowserChecker;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.utils.js\n// module id = 25\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* microsoft.bond.io.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nvar microsoft_bond_primitives_1 = require(\"./microsoft.bond.primitives\");\r\nvar MemoryStream = /** @class */ (function () {\r\n    function MemoryStream() {\r\n        this._buffer = [];\r\n    }\r\n    /*override*/\r\n    MemoryStream.prototype._WriteByte = function (byte) {\r\n        this._buffer.push(microsoft_bond_primitives_1.Number._ToByte(byte));\r\n    };\r\n    /*override*/\r\n    MemoryStream.prototype._Write = function (buffer, offset, count) {\r\n        while (count--) {\r\n            this._WriteByte(buffer[offset++]);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the array of unsigned bytes from which this stream was created.\r\n     */\r\n    MemoryStream.prototype._GetBuffer = function () {\r\n        return this._buffer;\r\n    };\r\n    return MemoryStream;\r\n}());\r\nexports.MemoryStream = MemoryStream;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.io.js\n// module id = 26\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTRetryPolicy.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar RandomizationLowerThreshold = 0.8;\r\nvar RandomizationUpperThreshold = 1.2;\r\nvar BaseBackoff = 3000;\r\nvar MaxBackoff = 120000;\r\n/**\r\n* Class for retry policy.\r\n*/\r\nvar AWTRetryPolicy = /** @class */ (function () {\r\n    function AWTRetryPolicy() {\r\n    }\r\n    /**\r\n     * Determine if the request should be retried for the given status code.\r\n     * The below expression reads that we should only retry for:\r\n     *      - HttpStatusCodes that are smaller than 300.\r\n     *      - HttpStatusCodes greater or equal to 500 (except for 501-NotImplement\r\n     *        and 505-HttpVersionNotSupport).\r\n     *      - HttpStatusCode 408-RequestTimeout.\r\n     * This is based on Microsoft.WindowsAzure.Storage.RetryPolicies.ExponentialRetry class\r\n     * @param {number} httpStatusCode - The status code returned for the request.\r\n     * @return {boolean} True if request should be retried, false otherwise.\r\n     */\r\n    AWTRetryPolicy.shouldRetryForStatus = function (httpStatusCode) {\r\n        /* */\r\n        return !((httpStatusCode >= 300 && httpStatusCode < 500 && httpStatusCode !== 408)\r\n            || (httpStatusCode === 501)\r\n            || (httpStatusCode === 505));\r\n    };\r\n    /**\r\n     * Gets the number of milliseconds to back off before retrying the request. The\r\n     * back off duration is exponentially scaled based on the number of retries already\r\n     * done for the request.\r\n     * @param {number} retriesSoFar - The number of times the request has already been retried.\r\n     * @return {number} The back off duration for the request before it can be retried.\r\n     */\r\n    AWTRetryPolicy.getMillisToBackoffForRetry = function (retriesSoFar) {\r\n        var waitDuration = 0;\r\n        var minBackoff = BaseBackoff * RandomizationLowerThreshold;\r\n        var maxBackoff = BaseBackoff * RandomizationUpperThreshold;\r\n        var randomBackoff = Math.floor(Math.random() * (maxBackoff - minBackoff)) + minBackoff;\r\n        waitDuration = Math.pow(4, retriesSoFar) * randomBackoff;\r\n        return Math.min(waitDuration, MaxBackoff);\r\n    };\r\n    return AWTRetryPolicy;\r\n}());\r\nexports.default = AWTRetryPolicy;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTRetryPolicy.js\n// module id = 27\n// module chunks = 0","\"use strict\";\r\n/**\r\n* AWTKillSwitch.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SecToMsMultiplier = 1000;\r\n/**\r\n* Class to stop certain tenants sending events.\r\n*/\r\nvar AWTKillSwitch = /** @class */ (function () {\r\n    function AWTKillSwitch() {\r\n        this._killedTokenDictionary = {};\r\n    }\r\n    /**\r\n     * Set the tenants that are to be killed along with the duration. If the duration is\r\n     * a special value identifying that the tokens are too be killed for only this request, then\r\n     * a array of tokens is returned.\r\n     * @param {string} killedTokens - Tokens that are too be marked to be killed.\r\n     * @param {string} killDuration - The duration for which the tokens are to be killed.\r\n     * @return {string[]} The tokens that are killed only for this given request.\r\n     */\r\n    AWTKillSwitch.prototype.setKillSwitchTenants = function (killTokens, killDuration) {\r\n        if (killTokens && killDuration) {\r\n            try {\r\n                var killedTokens = killTokens.split(',');\r\n                if (killDuration === 'this-request-only') {\r\n                    return killedTokens;\r\n                }\r\n                var durationMs = parseInt(killDuration, 10) * SecToMsMultiplier;\r\n                for (var i = 0; i < killedTokens.length; ++i) {\r\n                    this._killedTokenDictionary[killedTokens[i]] = Date.now() + durationMs;\r\n                }\r\n            }\r\n            catch (ex) {\r\n                return [];\r\n            }\r\n        }\r\n        return [];\r\n    };\r\n    /**\r\n     * Determing if the given tenant token has been killed for the moment.\r\n     * @param {string} tenantToken - The token to be checked.\r\n     * @return {boolean} True if token has been killed, false otherwise.\r\n     */\r\n    AWTKillSwitch.prototype.isTenantKilled = function (tenantToken) {\r\n        if (this._killedTokenDictionary[tenantToken] !== undefined && this._killedTokenDictionary[tenantToken] > Date.now()) {\r\n            return true;\r\n        }\r\n        delete this._killedTokenDictionary[tenantToken];\r\n        return false;\r\n    };\r\n    return AWTKillSwitch;\r\n}());\r\nexports.default = AWTKillSwitch;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTKillSwitch.js\n// module id = 28\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTClockSkewManager.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\n/**\r\n* Class to manage clock skew correction.\r\n*/\r\nvar AWTClockSkewManager = /** @class */ (function () {\r\n    function AWTClockSkewManager() {\r\n        this._allowRequestSending = true;\r\n        this._shouldAddClockSkewHeaders = true;\r\n        this._isFirstRequest = true;\r\n        this._clockSkewHeaderValue = 'use-collector-delta';\r\n        this._clockSkewSet = false;\r\n    }\r\n    /**\r\n     * Determine if the request can be sent.\r\n     * @return {boolean} True if requests can be sent, false otherwise.\r\n     */\r\n    AWTClockSkewManager.prototype.allowRequestSending = function () {\r\n        if (this._isFirstRequest) {\r\n            this._isFirstRequest = false;\r\n            this._allowRequestSending = false;\r\n            return true;\r\n        }\r\n        return this._allowRequestSending;\r\n    };\r\n    /**\r\n     * Determine if clock skew headers should be added to the request.\r\n     * @return {boolean} True if clock skew headers should be added, false otherwise.\r\n     */\r\n    AWTClockSkewManager.prototype.shouldAddClockSkewHeaders = function () {\r\n        return this._shouldAddClockSkewHeaders;\r\n    };\r\n    /**\r\n     * Gets the clock skew header value.\r\n     * @return {string} The clock skew header value.\r\n     */\r\n    AWTClockSkewManager.prototype.getClockSkewHeaderValue = function () {\r\n        return this._clockSkewHeaderValue;\r\n    };\r\n    /**\r\n     * Sets the clock skew header value. Once clock skew is set this method\r\n     * is no-op.\r\n     * @param {string} timeDeltaInMillis - Time delta to be saved as the clock skew header value.\r\n     */\r\n    AWTClockSkewManager.prototype.setClockSkew = function (timeDeltaInMillis) {\r\n        if (!this._clockSkewSet) {\r\n            if (timeDeltaInMillis) {\r\n                this._clockSkewHeaderValue = timeDeltaInMillis;\r\n            }\r\n            else {\r\n                this._shouldAddClockSkewHeaders = false;\r\n            }\r\n            this._clockSkewSet = true;\r\n            this._allowRequestSending = true;\r\n        }\r\n    };\r\n    return AWTClockSkewManager;\r\n}());\r\nexports.default = AWTClockSkewManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTClockSkewManager.js\n// module id = 29\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTNotificationManager_1 = require(\"./AWTNotificationManager\");\r\nvar Enums_1 = require(\"./Enums\");\r\n/**\r\n* Class to batch events.\r\n*/\r\nvar AWTRecordBatcher = /** @class */ (function () {\r\n    function AWTRecordBatcher(_maxRequestSize, _outboundQueue) {\r\n        this._maxRequestSize = _maxRequestSize;\r\n        this._outboundQueue = _outboundQueue;\r\n        this._currentBatch = {};\r\n        this._currentBatchSize = 0;\r\n    }\r\n    /**\r\n     * Add an event to the current batch.\r\n     * @param {object} event - The event that needs to be batched.\r\n     */\r\n    AWTRecordBatcher.prototype.addEventToBatch = function (event) {\r\n        if (event.serializedEvent.length > this._maxRequestSize) {\r\n            //single event too big\r\n            AWTNotificationManager_1.default.eventsRejected([event], Enums_1.AWTEventsRejectedReason.SizeLimitExceeded);\r\n        }\r\n        else {\r\n            if (this._currentBatchSize + event.serializedEvent.length > this._maxRequestSize) {\r\n                this.flushBatch();\r\n            }\r\n            if (this._currentBatch[event.apiKey] === undefined) {\r\n                this._currentBatch[event.apiKey] = [];\r\n            }\r\n            this._currentBatch[event.apiKey].push(event);\r\n            this._currentBatchSize += event.serializedEvent.length;\r\n        }\r\n    };\r\n    /**\r\n     * Flush the current batch so that it is added to the outbound queue.\r\n     */\r\n    AWTRecordBatcher.prototype.flushBatch = function () {\r\n        if (this._currentBatchSize > 0) {\r\n            this._outboundQueue.push(this._currentBatch);\r\n            this._currentBatch = {};\r\n            this._currentBatchSize = 0;\r\n        }\r\n    };\r\n    /**\r\n     * Check if there is a batch that contains events.\r\n     */\r\n    AWTRecordBatcher.prototype.hasBatch = function () {\r\n        return this._currentBatchSize > 0;\r\n    };\r\n    return AWTRecordBatcher;\r\n}());\r\nexports.default = AWTRecordBatcher;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTRecordBatcher.js\n// module id = 30\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\n/**\r\n * The AWTTransmissionManager calss is a wrapper class that exposes some of the\r\n * Transmission functionality needed by other Aria modules.\r\n */\r\nvar AWTTransmissionManager = /** @class */ (function () {\r\n    function AWTTransmissionManager() {\r\n    }\r\n    /**\r\n     * Sets the event handler used by the tranmission manager.\r\n     * The default event handler is the Inbound queue manager. This handler\r\n     * is used to batch and send events to Aria. If you intend to send events\r\n     * to Aria please make sure that your event handler forwards events to the Inbound\r\n     * Queue Manager. You can retrieve the Inbound Queue Manager by calling\r\n     * getEventsHandler before you set your handler.\r\n     * @param {object} eventsHandler - An AWTEventHandler event handler used by the tranmission\r\n     * manager.\r\n     */\r\n    AWTTransmissionManager.setEventsHandler = function (eventsHandler) {\r\n        AWTTransmissionManagerCore_1.default.setEventsHandler(eventsHandler);\r\n    };\r\n    /**\r\n     * Gets the current event handler used by the tranmission manager.\r\n     * @return {object} An AWTEventHandler event handler used by the tranmission manager.\r\n     */\r\n    AWTTransmissionManager.getEventsHandler = function () {\r\n        return AWTTransmissionManagerCore_1.default.getEventsHandler();\r\n    };\r\n    /**\r\n     * The scheduleTimer method tries to schedule the waiting period after which events are sent. If there are\r\n     * no events to be sent, or if there is already a timer scheduled, or if the\r\n     * http manager doesn't have any idle connections, then this method is no-op.\r\n     */\r\n    AWTTransmissionManager.scheduleTimer = function () {\r\n        AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n    };\r\n    return AWTTransmissionManager;\r\n}());\r\nexports.default = AWTTransmissionManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTTransmissionManager.js\n// module id = 31\n// module chunks = 0"],"sourceRoot":""}