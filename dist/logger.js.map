{"version":3,"sources":["webpack:///logger.js","webpack:///webpack/bootstrap 896ebabed1fb163983c9","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/Enums.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/Utils.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTNotificationManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTTransmissionManagerCore.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/Enums.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTEventProperties.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.primitives.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTSemanticContext.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTAutoCollection.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/DataModels.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogger.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTStatsManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTSerializer.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/Version.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogManagerSettings.js","webpack:///./src/index.ts","webpack:///./src/logger.ts","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AriaSDK.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTQueueManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTHttpManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/bond_const.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.encoding.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.floatutils.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.utils.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.io.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTRetryPolicy.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTKillSwitch.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTClockSkewManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTRecordBatcher.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTTransmissionManager.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","value","AWTPropertyType","AWTPiiKind","AWTCustomerContentKind","AWTEventPriority","AWTEventsDroppedReason","AWTEventsRejectedReason","numberToBondInt64","bond_value","microsoft_bond_primitives_1","Int64","low","high","Math","floor","newGuid","replace","GuidRegex","r","random","toString","isString","isNumber","isBoolean","msToTicks","timeInMs","MSTillUnixEpoch","MSToTicksMultiplier","getTenantId","apiKey","indexTenantId","indexOf","substring","isBeaconsSupported","beaconsSupported","navigator","Boolean","sendBeacon","isUint8ArrayAvailable","uInt8ArraySupported","Uint8Array","isSafariOrFirefox","isReactNative","isPriority","sanitizeProperty","PropertyNameRegex","test","undefined","type","Enums_1","Unspecified","sanitizePropertyType","pii","cc","isPii","isCustomerContent","getISOString","date","getUTCFullYear","twoDigit","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","threeDigit","getUTCMilliseconds","useXDomainRequest","useXDR","conn","XMLHttpRequest","withCredentials","XDomainRequest","product","isPropertyType","String","Double","getCorrectType","userAgent","ua","toLowerCase","EventNameAndTypeRegex","EventNameDotRegex","StatsApiKey","AWTNotificationManager","addNotificationListener","listener","this","listeners","push","removeNotificationListener","index","splice","eventsSent","events","_this","this_1","length","setTimeout","eventsDropped","reason","this_2","eventsRetrying","this_3","eventsRejected","this_4","default","DataModels_1","AWTQueueManager_1","AWTStatsManager_1","AWTEventProperties_1","AWTLogManager_1","Utils","AWTTransmissionManagerCore","setEventsHandler","eventsHandler","_eventHandler","getEventsHandler","scheduleTimer","timer","_profiles","_currentProfile","_timeout","_paused","hasEvents","_currentBackoffCount","_batchAndSendEvents","_timerCount","initialize","config","_newEventsAllowed","_config","collectorUri","cacheMemorySizeLimitInNumberOfEvents","httpXHROverride","_initializeProfiles","stats","tenantId","canSendStatEvent","event_1","setEventPriority","High","setProperty","statKey","getLogger","logEvent","setTransmitProfile","profileName","clearTimeout","loadTransmitProfiles","profiles","_resetTransmitProfiles","j","timerMultiplier","ceil","sendEvent","event","priority","Immediate_sync","addEvent","flush","callback","currentTime","Date","getTime","_lastUploadNowCall","uploadNow","pauseTransmission","resumeTransmision","resumeTransmission","flushAndTeardown","teardown","backOffTransmission","clearBackOff","AWT_REAL_TIME","Low","Normal","sendEventsForPriorityAndAbove","AWT_NEAR_REAL_TIME","AWT_BEST_EFFORT","AWTUserIdType","AWTSessionState","AWTEventProperties","_event","properties","setName","getName","setType","getType","setTimestamp","timestampInEpochMillis","timestamp","getTimestamp","getEventPriority","NotSet","setPropertyWithPii","setPropertyWithCustomerContent","customerContent","getPropertyMap","getEvent","numberStr","parseInt","_Equals","tmp","UInt64","Number","_ToByte","_ToUInt8","_ToInt32","_ToUInt32","AWTAutoCollection_1","Enums_2","AWTSemanticContext","_allowDeviceFields","_properties","setAppId","appId","_addContext","setAppVersion","appVersion","setAppLanguage","appLanguage","setDeviceId","deviceId","checkAndSaveDeviceId","setDeviceOsName","deviceOsName","setDeviceOsVersion","deviceOsVersion","setDeviceBrowserName","deviceBrowserName","setDeviceBrowserVersion","deviceBrowserVersion","setDeviceMake","deviceMake","setDeviceModel","deviceModel","setUserId","userId","userIdType","isNaN","inferredUserIdType","SipAddress","PhoneNumber","SmtpAddress","EmailAddress","Unknown","Skype","Identity","_addContextWithPii","setUserAdvertisingId","userAdvertisingId","setUserTimeZone","userTimeZone","setUserLanguage","userLanguage","key","DEVICE_ID_COOKIE","FIRSTLAUNCHTIME_COOKIE","BROWSERS","MSIE","CHROME","FIREFOX","SAFARI","EDGE","ELECTRON","SKYPE_SHELL","PHANTOMJS","OPERA","OPERATING_SYSTEMS","WINDOWS","MACOSX","WINDOWS_PHONE","WINDOWS_RT","IOS","ANDROID","LINUX","CROS","UNKNOWN","OSNAMEREGEX","WIN","WINRT","WINPHONE","OSX","VERSION_MAPPINGS","5.1","6.0","6.1","6.2","6.3","10.0","AWTAutoCollection","addPropertyStorageOverride","propertyStorage","_propertyStorage","autoCollect","semanticContext","disableCookies","_semanticContext","_disableCookies","_autoCollect","_autoCollectFromUserAgent","_deleteCookie","_areCookiesAvailable","_autoCollectDeviceId","_getData","_saveData","_setFirstLaunchTime","document","documentElement","lang","language","timeZone","getTimezoneOffset","minutes","hours","timeZonePrefix","abs","browserName","_getBrowserName","_getBrowserVersion","osName","_getOsName","_getOsVersion","_userAgentContainsString","flt","fltDate","setTime","firstLaunchTime","searchString","_getIeVersion","_getOtherVersion","classicIeVersionMatches","match","RegExp","ieVersionMatches","browserString","matches","_getGenericOsVersion","_getMacOsxVersion","ntVersionMatches","macOsxVersionInUserAgentMatches","versionString","delimiter","_getDelimiter","split","expires","toUTCString","cookie","getProperty","ca","charAt","AWTNotificationManager_1","AWTTransmissionManagerCore_1","AWTLogManagerSettings_1","Version","AWTSemanticContext_1","AWTLogger","_apiKey","_contextProperties","_sessionStartTime","_createInitId","setContext","setContextWithPii","setContextWithCustomerContent","getSemanticContext","loggingEnabled","defaultTenantToken","sanitizeProperties","eventReceived","_logEvent","_getInternalEvent","logSession","state","sessionEnabled","sessionEvent","_addPropertiesToEvent","Started","_sessionId","Ended","sessionDurationSec","_getSessionDurationFromTime","getSessionId","logFailure","signature","detail","category","id","failureEvent","logPageView","pageName","uri","referrerUri","pageViewEvent","_initIdMap","propertiesEvent","name_1","timeInSec","eventWithMetaData","contextProperties","_addContextIfAbsent","logManagerContext","_setDefaultProperty","_getInitId","_getSequenceId","FullVersionString","toISOString","_sendEvent","InvalidEvent","name_2","internalEvent","name_3","_sequenceIdMap","AWTStatsManager","sendStats","_sendStats","_isInitalized","_addStat","NonRetryableStatus","QueueFull","KillSwitch","SizeLimitExceeded","_stats","statName","Bond","AWTSerializer","getPayloadBlob","requestDictionary","tokenCount","remainingRequest","stream","IO","MemoryStream","writer","CompactBinaryProtocolWriter","_WriteFieldBegin","_BondDataType","_BT_MAP","_WriteMapContainerBegin","_BT_STRING","_BT_LIST","token","_WriteString","dataPackage","_WriteContainerBegin","_BT_STRUCT","_BT_INT64","_WriteInt64","now","dpSizePos","_GetBuffer","dpSizeSerialized","currentStreamPos","writeEvent","_addNewDataPackageSize","_WriteStructEnd","payloadBlob","size","oldDpSize","streamPos","newRecordCountSerialized","_Encoding","_Varint_GetBytes","slice","eventData","propsString","propStringCount","propsInt64","propInt64Count","propsDouble","propDoubleCount","propsBool","propBoolCount","piiProps","piiPropCount","ccProps","ccPropCount","_BT_INT32","_WriteInt32","_BT_BOOL","_WriteBool","_BT_DOUBLE","_WriteDouble","base64Encode","data","_Base64_GetString","AWTLogger_1","AWTLogManager","tenantToken","configuration","_isInitialized","_overrideValuesFromConfig","disableCookiesUsage","propertyStorageOverride","enableAutoUserSession","window","addEventListener","_isDestroyed","_loggers","sendPOST","eventName","AWTLogManagerSettings","Log","level","action","content","attrs","title","url","URL","JSON","stringify","logger_1","telemetry","LEVEL","LogLevel","log","ARIA_SCRIPT","getElementById","console","assert","CONFIG","dataset","TOKEN","toLocaleLowerCase","CORELATION_ID","corelation","APP_NAME","appname","location","hostname","LOG_TABLE","table","VERBOSE","_originConsole","init","corelationId","userid","subscribeId","subid","apply","arguments","forEach","args","_i","unshift","onbeforeunload","onerror","msg","line","col","error","file","_logger","webjs_sdk_1","_token","_name","_table","AWTTransmissionManager_1","AWTTransmissionManager","AWTSerializer_1","AWT_COLLECTOR_URL_UNITED_STATES","AWT_COLLECTOR_URL_GERMANY","AWT_COLLECTOR_URL_JAPAN","AWT_COLLECTOR_URL_AUSTRALIA","AWT_COLLECTOR_URL_EUROPE","AWT_COLLECTOR_URL_USGOV_DOD","AWT_COLLECTOR_URL_USGOV_DOJ","AWTHttpManager_1","AWTRecordBatcher_1","MaxNumberEventPerBatch","AWTQueueManager","collectorUrl","_queueSizeLimit","xhrOverride","_isCurrentlyUploadingNow","_uploadNowQueue","_shouldDropEventsOnPause","_queueSize","_outboundQueue","_inboundQueues","_addEmptyQueues","_batcher","_httpManager","sendSynchronousRequest","addEventToBatch","_addEventToProperQueue","_dropEventWithPriorityOrLess","_batchEvents","sendQueuedRequests","hasBatch","hasIdleConnection","addBackRequest","request","sendAttempt","_uploadNow","pause","shouldDropEventsOnPause","removeQueuedRequests","resume","_removeFirstQueues","shift","currentPriority","priorityToProcess","pop","flushBatch","_checkOutboundQueueEmptyAndSent","isCompletelyIdle","AWTRetryPolicy_1","AWTKillSwitch_1","AWTClockSkewManager_1","Method","AWTHttpManager","_requestQueue","_queueManager","_httpInterface","_urlString","_killSwitch","_clockSkewManager","_useBeacons","_activeConnections","urlString","ontimeout","onload","sync","xdr","open","send","fetch","body","method","then","response","headerMap","headers","status","catch","xhr_1","_convertAllHeadersToMap","getAllResponseHeaders","allowRequestSending","_sendRequest","retryCount","isTeardown","isSynchronous","apikey","isTenantKilled","payloadResult","shouldAddClockSkewHeaders","getClockSkewHeaderValue","_retryRequestIfNeeded","_handleRequestFinished","shouldRetry","killedTokens","setKillSwitchTenants","setClockSkew","shouldRetryForStatus","getMillisToBackoffForRetry","success","headersString","headersArray","header","bond_const_1","_stream","_WriteBlob","blob","_Write","_WriteByte","elementType","_WriteUInt8","_WriteUInt32","keyType","valueType","array","_Double_GetBytes","metadata","_Zigzag_EncodeZigzag32","_WriteUInt64","_Zigzag_EncodeZigzag64","_Utf8_GetBytes","isBase","_BT_STOP_BASE","_BT_STOP","_Varint64_GetBytes","char","charCodeAt","inArray","lookup","output","paddingBytes","length_1","temp","num","join","temp2","microsoft_bond_utils_1","BrowserChecker","_IsDataViewSupport","view","DataView","ArrayBuffer","setFloat64","getUint8","microsoft_bond_floatutils_1","FloatUtils","_ConvertNumberToArray","tmpH","tmpL","res","isDouble","_doubleZero","_floatZero","exponentBits","precisionBits","bias","minExponent","maxExponent","sign","intPart","floatPart","len","buffer","Array","firstBit","exponent","lastBit","_doubleNegInifinity","_floatNegInifinity","_doubleInifinity","_floatInifinity","resArray","result","_buffer","byte","offset","count","AWTRetryPolicy","httpStatusCode","retriesSoFar","waitDuration","randomBackoff","BaseBackoff","pow","min","AWTKillSwitch","_killedTokenDictionary","killTokens","killDuration","durationMs","ex","AWTClockSkewManager","_allowRequestSending","_shouldAddClockSkewHeaders","_isFirstRequest","_clockSkewHeaderValue","_clockSkewSet","timeDeltaInMillis","AWTRecordBatcher","_maxNumberOfEvents","_currentBatch","_currentNumEventsInBatch","immediateBatch"],"mappings":"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","file":"logger.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 16);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Enums.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing the enums.\r\n*/\r\n/**\r\n * The AWTPropertyType enumeration contains a set of values that specify types of properties.\r\n * @enum {number}\r\n */\r\nvar AWTPropertyType;\r\n(function (AWTPropertyType) {\r\n    /**\r\n     * Property type is unspecified.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Unspecified\"] = 0] = \"Unspecified\";\r\n    /**\r\n     * A string.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"String\"] = 1] = \"String\";\r\n    /**\r\n     * A 64-bit integer.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Int64\"] = 2] = \"Int64\";\r\n    /**\r\n     * A double.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Double\"] = 3] = \"Double\";\r\n    /**\r\n     * A boolean.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Boolean\"] = 4] = \"Boolean\";\r\n})(AWTPropertyType = exports.AWTPropertyType || (exports.AWTPropertyType = {}));\r\n/**\r\n * The AWTPiiKind enumeration contains a set of values that specify the kind of PII (Personal Identifiable Information).\r\n * @enum {number}\r\n */\r\nvar AWTPiiKind;\r\n(function (AWTPiiKind) {\r\n    /**\r\n     * No kind.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * An LDAP distinguished name. For example, CN=Jeff Smith,OU=Sales,DC=Fabrikam,DC=COM.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"DistinguishedName\"] = 1] = \"DistinguishedName\";\r\n    /**\r\n     * Generic information.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"GenericData\"] = 2] = \"GenericData\";\r\n    /**\r\n     * An IPV4 Internet address. For example, 192.0.2.1.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPV4Address\"] = 3] = \"IPV4Address\";\r\n    /**\r\n     * An IPV6 Internet address. For example, 2001:0db8:85a3:0000:0000:8a2e:0370:7334.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPv6Address\"] = 4] = \"IPv6Address\";\r\n    /**\r\n     * The Subject of an e-mail message.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"MailSubject\"] = 5] = \"MailSubject\";\r\n    /**\r\n     * A telephone number.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"PhoneNumber\"] = 6] = \"PhoneNumber\";\r\n    /**\r\n     * A query string.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"QueryString\"] = 7] = \"QueryString\";\r\n    /**\r\n     * An SIP (Session Internet Protocol) address.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"SipAddress\"] = 8] = \"SipAddress\";\r\n    /**\r\n     * An e-mail address.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"SmtpAddress\"] = 9] = \"SmtpAddress\";\r\n    /**\r\n     * An user ID.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Identity\"] = 10] = \"Identity\";\r\n    /**\r\n     * A URI (Uniform Resource Identifier).\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Uri\"] = 11] = \"Uri\";\r\n    /**\r\n     * The fully-qualified domain name.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Fqdn\"] = 12] = \"Fqdn\";\r\n    /**\r\n     * Scrubs the last octet in a IPV4 Internet address.\r\n     * For example: 10.121.227.147 becomes 10.121.227.*\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPV4AddressLegacy\"] = 13] = \"IPV4AddressLegacy\";\r\n})(AWTPiiKind = exports.AWTPiiKind || (exports.AWTPiiKind = {}));\r\n/**\r\n * The AWTCustomerContentKind enumeration contains a set of values that specify the kind of customer content.\r\n * @enum {number}\r\n */\r\nvar AWTCustomerContentKind;\r\n(function (AWTCustomerContentKind) {\r\n    /**\r\n     * No kind.\r\n     */\r\n    AWTCustomerContentKind[AWTCustomerContentKind[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * Generic content.\r\n     */\r\n    AWTCustomerContentKind[AWTCustomerContentKind[\"GenericContent\"] = 1] = \"GenericContent\";\r\n})(AWTCustomerContentKind = exports.AWTCustomerContentKind || (exports.AWTCustomerContentKind = {}));\r\n/**\r\n * The AWTEventPriority enumeration contains a set of values that specify an event's priority.\r\n * @enum {number}\r\n */\r\nvar AWTEventPriority;\r\n(function (AWTEventPriority) {\r\n    /**\r\n     * Low priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"Low\"] = 1] = \"Low\";\r\n    /**\r\n     * Normal priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"Normal\"] = 2] = \"Normal\";\r\n    /**\r\n     * High priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"High\"] = 3] = \"High\";\r\n    /**\r\n     * Immediate_sync priority (Events are sent sync immediately).\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"Immediate_sync\"] = 5] = \"Immediate_sync\";\r\n})(AWTEventPriority = exports.AWTEventPriority || (exports.AWTEventPriority = {}));\r\n/**\r\n * The AWTEventsDroppedReason enumeration contains a set of values that specify the reason for dropping an event.\r\n * @enum {number}\r\n */\r\nvar AWTEventsDroppedReason;\r\n(function (AWTEventsDroppedReason) {\r\n    /**\r\n     * Status set to non-retryable.\r\n     */\r\n    AWTEventsDroppedReason[AWTEventsDroppedReason[\"NonRetryableStatus\"] = 1] = \"NonRetryableStatus\";\r\n    /**\r\n     * The event queue is full.\r\n     */\r\n    AWTEventsDroppedReason[AWTEventsDroppedReason[\"QueueFull\"] = 3] = \"QueueFull\";\r\n})(AWTEventsDroppedReason = exports.AWTEventsDroppedReason || (exports.AWTEventsDroppedReason = {}));\r\n/**\r\n * The AWTEventsRejectedReason enumeration contains a set of values that specify the reason for rejecting an event.\r\n * @enum {number}\r\n */\r\nvar AWTEventsRejectedReason;\r\n(function (AWTEventsRejectedReason) {\r\n    /**\r\n     * The event is invalid.\r\n     */\r\n    AWTEventsRejectedReason[AWTEventsRejectedReason[\"InvalidEvent\"] = 1] = \"InvalidEvent\";\r\n    /**\r\n     * The size of the event is too large.\r\n     */\r\n    AWTEventsRejectedReason[AWTEventsRejectedReason[\"SizeLimitExceeded\"] = 2] = \"SizeLimitExceeded\";\r\n    /**\r\n     * The server is not accepting events from this token.\r\n     */\r\n    AWTEventsRejectedReason[AWTEventsRejectedReason[\"KillSwitch\"] = 3] = \"KillSwitch\";\r\n})(AWTEventsRejectedReason = exports.AWTEventsRejectedReason || (exports.AWTEventsRejectedReason = {}));\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Utils.ts\r\n* @author  Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing utility functions.\r\n*/\r\nvar microsoft_bond_primitives_1 = __webpack_require__(6);\r\nvar Enums_1 = __webpack_require__(0);\r\nvar GuidRegex = /[xy]/g;\r\nvar MSTillUnixEpoch = 62135596800000;\r\nvar MSToTicksMultiplier = 10000;\r\nexports.EventNameAndTypeRegex = /^[a-zA-Z]([a-zA-Z0-9]|_){2,98}[a-zA-Z0-9]$/;\r\nexports.EventNameDotRegex = /\\./g;\r\nexports.PropertyNameRegex = /^[a-zA-Z](([a-zA-Z0-9|_|\\.]){0,98}[a-zA-Z0-9])?$/;\r\nexports.StatsApiKey = 'a387cfcf60114a43a7699f9fbb49289e-9bceb9fe-1c06-460f-96c5-6a0b247358bc-7238';\r\nvar beaconsSupported = null;\r\nvar uInt8ArraySupported = null;\r\nvar useXDR = null;\r\n/**\r\n * Converts a number to Bond Int64.\r\n * @param {number} value - The number to be converted.\r\n * @return {object} The Int64 value for the passed number.\r\n */\r\nfunction numberToBondInt64(value) {\r\n    // Construct bond timestamp for aria\r\n    var bond_value = new microsoft_bond_primitives_1.Int64('0');\r\n    bond_value.low = value & 0xffffffff;\r\n    bond_value.high = Math.floor(value / 0x100000000);\r\n    return bond_value;\r\n}\r\nexports.numberToBondInt64 = numberToBondInt64;\r\n/**\r\n * Creates a new GUID.\r\n * @return {string} A GUID.\r\n */\r\nfunction newGuid() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(GuidRegex, function (c) {\r\n        var r = (Math.random() * 16 | 0), v = (c === 'x' ? r : r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\nexports.newGuid = newGuid;\r\n/**\r\n * Checks if the type of value is a string.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a string, false otherwise.\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string';\r\n}\r\nexports.isString = isString;\r\n/**\r\n * Checks if the type of value is a number.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a number, false otherwise.\r\n */\r\nfunction isNumber(value) {\r\n    return typeof value === 'number';\r\n}\r\nexports.isNumber = isNumber;\r\n/**\r\n * Checks if the type of value is a boolean.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a boolean, false otherwise.\r\n */\r\nfunction isBoolean(value) {\r\n    return typeof value === 'boolean';\r\n}\r\nexports.isBoolean = isBoolean;\r\n/**\r\n * Converts milliseconds to ticks since 00:00:00 Jan 1, 0001.\r\n * @param {number} msToTicks - The milliseconds value to be converted.\r\n * @return {number} The value of the milliseconds in .Net Ticks.\r\n */\r\nfunction msToTicks(timeInMs) {\r\n    return (timeInMs + MSTillUnixEpoch) * MSToTicksMultiplier;\r\n}\r\nexports.msToTicks = msToTicks;\r\n/**\r\n * Gets the tenant id from the tenant token.\r\n * @param {string} apiKey - The token from which the tenant id is to be extracted.\r\n * @return {string} The tenant id.\r\n */\r\nfunction getTenantId(apiKey) {\r\n    var indexTenantId = apiKey.indexOf('-');\r\n    if (indexTenantId > -1) {\r\n        return apiKey.substring(0, indexTenantId);\r\n    }\r\n    return '';\r\n}\r\nexports.getTenantId = getTenantId;\r\n/**\r\n * Checks if HTML5 Beacons are supported in the current environment.\r\n * @return {boolean} True if supported, false otherwise.\r\n */\r\nfunction isBeaconsSupported() {\r\n    if (beaconsSupported === null) {\r\n        beaconsSupported = typeof navigator !== 'undefined' && Boolean(navigator.sendBeacon);\r\n    }\r\n    return beaconsSupported;\r\n}\r\nexports.isBeaconsSupported = isBeaconsSupported;\r\n/**\r\n * Checks if Uint8Array are available in the current environment. Safari and Firefox along with\r\n * ReactNative are known to not support Uint8Array properly.\r\n * @return {boolean} True if available, false otherwise.\r\n */\r\nfunction isUint8ArrayAvailable() {\r\n    if (uInt8ArraySupported === null) {\r\n        uInt8ArraySupported = typeof Uint8Array !== 'undefined' && !isSafariOrFirefox() && !isReactNative();\r\n    }\r\n    return uInt8ArraySupported;\r\n}\r\nexports.isUint8ArrayAvailable = isUint8ArrayAvailable;\r\n/**\r\n * Checks if the value is an AWTEventPriority.\r\n * @param {enum} value - The value that needs to be checked.\r\n * @return {boolean} True if the value is in AWTEventPriority, false otherwise.\r\n */\r\nfunction isPriority(value) {\r\n    if (isNumber(value) && ((value >= 1 && value <= 3) || value === 5)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexports.isPriority = isPriority;\r\n/**\r\n * Sanitizes the Property. It checks the that the property name and value are valid. It also\r\n * checks/populates the correct type and pii of the property value.\r\n * @param {string} name                           - The property name.\r\n * @param {string|number|boolean|object} property - The property value or an AWTEventProperty containing value,\r\n * type ,pii and customer content.\r\n * @return {object} AWTEventProperty containing valid name, value, pii and type or null if invalid.\r\n */\r\nfunction sanitizeProperty(name, property) {\r\n    //Check that property is valid\r\n    if (!exports.PropertyNameRegex.test(name) || property === undefined || property === null || property === '') {\r\n        return null;\r\n    }\r\n    //If the property isn't AWTEventProperty, convert it into one.\r\n    if (isString(property) || isNumber(property) || isBoolean(property)) {\r\n        property = { value: property, type: Enums_1.AWTPropertyType.Unspecified };\r\n    }\r\n    else if (property.value === undefined || property.value === null\r\n        || property.value === '' || (!isString(property.value)\r\n        && !isNumber(property.value) && !isBoolean(property.value))) {\r\n        //Since property is AWTEventProperty, we need to validate its value\r\n        return null;\r\n    }\r\n    property.type = sanitizePropertyType(property.value, property.type);\r\n    if (!property.type) {\r\n        return null;\r\n    }\r\n    //Ensure that only one of pii or customer content can be set\r\n    if (property.pii > 0 && property.cc > 0) {\r\n        return null;\r\n    }\r\n    //If pii is set we need to validate its enum value.\r\n    if (property.pii) {\r\n        return isPii(property.pii) ? property : null;\r\n    }\r\n    //If cc is set we need to validate its enum value.\r\n    if (property.cc) {\r\n        return isCustomerContent(property.cc) ? property : null;\r\n    }\r\n    return property;\r\n}\r\nexports.sanitizeProperty = sanitizeProperty;\r\n/**\r\n * Converts a date object into an ISO string. This is needed because not all browsers support ISO string format\r\n * on the date.\r\n * @param {object} date - The date which needs to be converted to ISO format.\r\n * @return {string} The date in ISO format.\r\n */\r\nfunction getISOString(date) {\r\n    return date.getUTCFullYear() + '-' +\r\n        twoDigit(date.getUTCMonth() + 1) + '-' +\r\n        twoDigit(date.getUTCDate()) + 'T' +\r\n        twoDigit(date.getUTCHours()) + ':' +\r\n        twoDigit(date.getUTCMinutes()) + ':' +\r\n        twoDigit(date.getUTCSeconds()) + '.' +\r\n        threeDigit(date.getUTCMilliseconds()) + 'Z';\r\n}\r\nexports.getISOString = getISOString;\r\nfunction useXDomainRequest() {\r\n    if (useXDR === null) {\r\n        var conn = new XMLHttpRequest();\r\n        if (typeof conn.withCredentials === 'undefined' &&\r\n            typeof XDomainRequest !== 'undefined') {\r\n            useXDR = true;\r\n        }\r\n        else {\r\n            useXDR = false;\r\n        }\r\n    }\r\n    return useXDR;\r\n}\r\nexports.useXDomainRequest = useXDomainRequest;\r\nfunction isReactNative() {\r\n    // If running in React Native, navigator.product will be populated\r\n    if (typeof navigator !== 'undefined' && navigator.product) {\r\n        return navigator.product === 'ReactNative';\r\n    }\r\n    return false;\r\n}\r\nexports.isReactNative = isReactNative;\r\nfunction twoDigit(n) {\r\n    // Format integers to have at least two digits.\r\n    return n < 10 ? '0' + n : n.toString();\r\n}\r\nfunction threeDigit(n) {\r\n    // Format integers to have at least three digits.\r\n    if (n < 10) {\r\n        return '00' + n;\r\n    }\r\n    else if (n < 100) {\r\n        return '0' + n;\r\n    }\r\n    return n.toString();\r\n}\r\nfunction sanitizePropertyType(value, type) {\r\n    if (!isPropertyType(type) || type === Enums_1.AWTPropertyType.Unspecified) {\r\n        return getCorrectType(value);\r\n    }\r\n    if (type === Enums_1.AWTPropertyType.String && typeof value === 'string') {\r\n        return type;\r\n    }\r\n    if ((type === Enums_1.AWTPropertyType.Double || type === Enums_1.AWTPropertyType.Int64) && typeof value === 'number') {\r\n        if (type === Enums_1.AWTPropertyType.Int64 && value % 1 !== 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return type;\r\n        }\r\n    }\r\n    if (type === Enums_1.AWTPropertyType.Boolean && typeof value === 'boolean') {\r\n        return type;\r\n    }\r\n}\r\nfunction getCorrectType(value) {\r\n    switch (typeof value) {\r\n        case 'string':\r\n            return Enums_1.AWTPropertyType.String;\r\n        case 'boolean':\r\n            return Enums_1.AWTPropertyType.Boolean;\r\n        case 'number':\r\n            return Enums_1.AWTPropertyType.Double;\r\n    }\r\n    return Enums_1.AWTPropertyType.Unspecified;\r\n}\r\nfunction isPii(value) {\r\n    if (isNumber(value) && value >= 0 && value <= 13) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isCustomerContent(value) {\r\n    if (isNumber(value) && value >= 0 && value <= 1) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isPropertyType(value) {\r\n    if (isNumber(value) && value >= 0 && value <= 4) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isSafariOrFirefox() {\r\n    // If non-browser navigator will be undefined\r\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n        var ua = navigator.userAgent.toLowerCase();\r\n        if ((ua.indexOf('safari') >= 0 || ua.indexOf('firefox') >= 0) && ua.indexOf('chrome') < 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nvar AWTNotificationManager = /** @class */ (function () {\r\n    function AWTNotificationManager() {\r\n    }\r\n    /**\r\n     * Adds a notification listener.\r\n     * @param {object} listener - The notification listener to be added.\r\n     */\r\n    AWTNotificationManager.addNotificationListener = function (listener) {\r\n        this.listeners.push(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {object} listener - AWTNotificationListener to remove.\r\n     */\r\n    AWTNotificationManager.removeNotificationListener = function (listener) {\r\n        var index = this.listeners.indexOf(listener);\r\n        while (index > -1) {\r\n            this.listeners.splice(index, 1);\r\n            index = this.listeners.indexOf(listener);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events sent.\r\n     * @param {object[]} events - The array of events that have been sent.\r\n     */\r\n    AWTNotificationManager.eventsSent = function (events) {\r\n        var _this = this;\r\n        var _loop_1 = function (i) {\r\n            if (this_1.listeners[i].eventsSent) {\r\n                setTimeout(function () { return _this.listeners[i].eventsSent(events); }, 0);\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being dropped.\r\n     * @param {object[]} events - The array of events that have been dropped.\r\n     * @param {enum} reason     - The reason for which the SDK dropped the events.\r\n     */\r\n    AWTNotificationManager.eventsDropped = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_2 = function (i) {\r\n            if (this_2.listeners[i].eventsDropped) {\r\n                setTimeout(function () { return _this.listeners[i].eventsDropped(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_2 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_2(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being retried when the request failed with a retryable status.\r\n     * @param {object[]} events - The array of events that are being retried.\r\n     */\r\n    AWTNotificationManager.eventsRetrying = function (events) {\r\n        var _this = this;\r\n        var _loop_3 = function (i) {\r\n            if (this_3.listeners[i].eventsRetrying) {\r\n                setTimeout(function () { return _this.listeners[i].eventsRetrying(events); }, 0);\r\n            }\r\n        };\r\n        var this_3 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_3(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being rejected.\r\n     * @param {object[]} events - The array of events that have been rejected.\r\n     * @param {enum} reason     - The reason for which the SDK rejeceted the events.\r\n     */\r\n    AWTNotificationManager.eventsRejected = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_4 = function (i) {\r\n            if (this_4.listeners[i].eventsRejected) {\r\n                setTimeout(function () { return _this.listeners[i].eventsRejected(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_4 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_4(i);\r\n        }\r\n    };\r\n    AWTNotificationManager.listeners = [];\r\n    return AWTNotificationManager;\r\n}());\r\nexports.default = AWTNotificationManager;\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTTransmissionManagerCore.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar DataModels_1 = __webpack_require__(9);\r\nvar Enums_1 = __webpack_require__(0);\r\nvar AWTQueueManager_1 = __webpack_require__(19);\r\nvar AWTStatsManager_1 = __webpack_require__(11);\r\nvar AWTEventProperties_1 = __webpack_require__(5);\r\nvar AWTLogManager_1 = __webpack_require__(14);\r\nvar Utils = __webpack_require__(1);\r\nvar MaxBackoffCount = 4;\r\nvar MinDurationBetweenUploadNow = 30000; //30 sec\r\nvar StatName = 'awt_stats';\r\n/**\r\n * Class that manages the timers for when to send events. It also\r\n * handles flush and flushAndTeardown. This class also allows setting\r\n * new event handlers. The default event handler is the Inbound Queue Manager.\r\n */\r\nvar AWTTransmissionManagerCore = /** @class */ (function () {\r\n    function AWTTransmissionManagerCore() {\r\n    }\r\n    /**\r\n     * Sets the event handler to be used by the tranmission manager.\r\n     * The default event handler is the Inbound queue manager. This handler\r\n     * is used to batch and send events to Aria. If you intend to send events\r\n     * to Aria please make sure your event handler forwards events to the Inbound\r\n     * Queue Manager. You can retrieve the Inbound Queue Manager by calling\r\n     * getEventsHandler before you set your handler.\r\n     * @param {object} eventsHandler - The new events handler to be used by the tranmission\r\n     * manager.\r\n     */\r\n    AWTTransmissionManagerCore.setEventsHandler = function (eventsHandler) {\r\n        this._eventHandler = eventsHandler;\r\n    };\r\n    /**\r\n     * Gets the current event handler used by the tranmission manager.\r\n     * @return {object} The event handler currently used by the tranmission manager.\r\n     */\r\n    AWTTransmissionManagerCore.getEventsHandler = function () {\r\n        return this._eventHandler;\r\n    };\r\n    /**\r\n     * Try to schedule the timer after which events will be sent. If there are\r\n     * no events to be sent, or there is already a timer scheduled, or the\r\n     * http manager doesn't have any idle connections this method is no-op.\r\n     */\r\n    AWTTransmissionManagerCore.scheduleTimer = function () {\r\n        var _this = this;\r\n        var timer = this._profiles[this._currentProfile][2];\r\n        if (this._timeout < 0 && timer >= 0 && !this._paused) {\r\n            if (this._eventHandler.hasEvents()) {\r\n                //If the transmission is backed off make the timer atleast 1 sec to allow for backoff.\r\n                if (timer === 0 && this._currentBackoffCount > 0) {\r\n                    timer = 1;\r\n                }\r\n                this._timeout = setTimeout(function () { return _this._batchAndSendEvents(); }, timer * (1 << this._currentBackoffCount) * 1000);\r\n            }\r\n            else {\r\n                this._timerCount = 0;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Initialize the transmission manager. After this method is called events are\r\n     * accepted for tranmission.\r\n     * @param {object} config - The configuration passed during AWTLogManager initialize.\r\n     */\r\n    AWTTransmissionManagerCore.initialize = function (config) {\r\n        var _this = this;\r\n        this._newEventsAllowed = true;\r\n        this._config = config;\r\n        this._eventHandler = new AWTQueueManager_1.default(config.collectorUri, config.cacheMemorySizeLimitInNumberOfEvents, config.httpXHROverride);\r\n        this._initializeProfiles();\r\n        AWTStatsManager_1.default.initialize(function (stats, tenantId) {\r\n            if (_this._config.canSendStatEvent(StatName)) {\r\n                var event_1 = new AWTEventProperties_1.default(StatName);\r\n                event_1.setEventPriority(Enums_1.AWTEventPriority.High);\r\n                event_1.setProperty('TenantId', tenantId);\r\n                for (var statKey in stats) {\r\n                    if (stats.hasOwnProperty(statKey)) {\r\n                        event_1.setProperty(statKey, stats[statKey].toString());\r\n                    }\r\n                }\r\n                AWTLogManager_1.default.getLogger(Utils.StatsApiKey).logEvent(event_1);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Set the transmit profile to be used. This will change the tranmission timers\r\n     * based on the transmit profile.\r\n     * @param {string} profileName - The name of the transmit profile to be used.\r\n     */\r\n    AWTTransmissionManagerCore.setTransmitProfile = function (profileName) {\r\n        if (this._currentProfile !== profileName && this._profiles[profileName] !== undefined) {\r\n            this.clearTimeout();\r\n            this._currentProfile = profileName;\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Load custom tranmission profiles. Each profile should have timers for\r\n     * high, normal and low.  Each profile should make sure\r\n     * that a each priority timer is a multiple of the priority higher than it.\r\n     * Setting the timer value to -1 means that the events for that priority will\r\n     * not be sent. Note that once a priority has been set to not send, all priorities\r\n     * below it will also not be sent. The timers should be in the form of [low, normal, high].\r\n     * e.g Custom: [30,10,5]\r\n     * This also removes any previously loaded custom profiles.\r\n     * @param {object} profiles - A dictionary containing the transmit profiles.\r\n     */\r\n    AWTTransmissionManagerCore.loadTransmitProfiles = function (profiles) {\r\n        this._resetTransmitProfiles();\r\n        for (var profileName in profiles) {\r\n            if (profiles.hasOwnProperty(profileName)) {\r\n                if (profiles[profileName].length !== 3) {\r\n                    continue;\r\n                }\r\n                //Make sure if a higher priority is set to not send then dont send lower priority\r\n                for (var i = 2; i >= 0; --i) {\r\n                    if (profiles[profileName][i] < 0) {\r\n                        for (var j = i; j >= 0; --j) {\r\n                            profiles[profileName][j] = -1;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                //Make sure each priority is multiple of the priority higher then it. If not a multiple\r\n                //we round up so that it becomes a multiple.\r\n                for (var i = 2; i > 0; --i) {\r\n                    if (profiles[profileName][i] > 0 && profiles[profileName][i - 1] > 0) {\r\n                        var timerMultiplier = profiles[profileName][i - 1] / profiles[profileName][i];\r\n                        profiles[profileName][i - 1] = Math.ceil(timerMultiplier) * profiles[profileName][i];\r\n                    }\r\n                }\r\n                this._profiles[profileName] = profiles[profileName];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Pass the event to the event handler and try to schedule the timer.\r\n     * @param {object} event - The event to be sent.\r\n     */\r\n    AWTTransmissionManagerCore.sendEvent = function (event) {\r\n        if (this._newEventsAllowed) {\r\n            //If the transmission is backed off then do not send synchronous events.\r\n            //We will convert these events to High priority instead.\r\n            if (this._currentBackoffCount > 0 && event.priority === Enums_1.AWTEventPriority.Immediate_sync) {\r\n                event.priority = Enums_1.AWTEventPriority.High;\r\n            }\r\n            this._eventHandler.addEvent(event);\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Sends events for all priority for the current inbound queue.\r\n     * This method adds new inbound queues to which new events will be added.\r\n     * Note: If LogManager is paused or flush is called again in less than 30 sec\r\n     * then flush will be no-op and the callback will not be called.\r\n     * @param {function} callback - The function to be called when flush is finished.\r\n     */\r\n    AWTTransmissionManagerCore.flush = function (callback) {\r\n        var currentTime = (new Date()).getTime();\r\n        if (!this._paused && this._lastUploadNowCall + MinDurationBetweenUploadNow < currentTime) {\r\n            this._lastUploadNowCall = currentTime;\r\n            if (this._timeout > -1) {\r\n                clearTimeout(this._timeout);\r\n                this._timeout = -1;\r\n            }\r\n            this._eventHandler.uploadNow(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Pauses transmission. It pauses the http manager and also clears timers.\r\n     */\r\n    AWTTransmissionManagerCore.pauseTransmission = function () {\r\n        if (!this._paused) {\r\n            this.clearTimeout();\r\n            this._eventHandler.pauseTransmission();\r\n            this._paused = true;\r\n        }\r\n    };\r\n    /**\r\n     * Resumes tranmission. It resumes the http manager and tries to schedule the timer.\r\n     */\r\n    AWTTransmissionManagerCore.resumeTransmision = function () {\r\n        if (this._paused) {\r\n            this._paused = false;\r\n            this._eventHandler.resumeTransmission();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Stops allowing new events being added for tranmission. It also batches all\r\n     * events currently in the queue and creates requests from them to be sent.\r\n     */\r\n    AWTTransmissionManagerCore.flushAndTeardown = function () {\r\n        AWTStatsManager_1.default.teardown();\r\n        this._newEventsAllowed = false;\r\n        this.clearTimeout();\r\n        //No op if offline storage is added\r\n        this._eventHandler.teardown();\r\n    };\r\n    /**\r\n     * Backs off tranmission. This exponentially increases all the timers.\r\n     */\r\n    AWTTransmissionManagerCore.backOffTransmission = function () {\r\n        if (this._currentBackoffCount < MaxBackoffCount) {\r\n            this._currentBackoffCount++;\r\n            this.clearTimeout();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Clears backoff for tranmission.\r\n     */\r\n    AWTTransmissionManagerCore.clearBackOff = function () {\r\n        if (this._currentBackoffCount > 0) {\r\n            this._currentBackoffCount = 0;\r\n            this.clearTimeout();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Resets the transmit profiles to the default profiles of Real Time, Near Real Time\r\n     * and Best Effort. This removes all the custom profiles that were loaded.\r\n     */\r\n    AWTTransmissionManagerCore._resetTransmitProfiles = function () {\r\n        this.clearTimeout();\r\n        this._initializeProfiles();\r\n        this._currentProfile = DataModels_1.AWT_REAL_TIME;\r\n        this.scheduleTimer();\r\n    };\r\n    AWTTransmissionManagerCore.clearTimeout = function () {\r\n        if (this._timeout > 0) {\r\n            clearTimeout(this._timeout);\r\n            this._timeout = -1;\r\n            this._timerCount = 0;\r\n        }\r\n    };\r\n    AWTTransmissionManagerCore._batchAndSendEvents = function () {\r\n        var priority = Enums_1.AWTEventPriority.High;\r\n        this._timerCount++;\r\n        if (this._timerCount * this._profiles[this._currentProfile][2] === this._profiles[this._currentProfile][0]) {\r\n            priority = Enums_1.AWTEventPriority.Low;\r\n            this._timerCount = 0;\r\n        }\r\n        else if (this._timerCount * this._profiles[this._currentProfile][2] === this._profiles[this._currentProfile][1]) {\r\n            priority = Enums_1.AWTEventPriority.Normal;\r\n        }\r\n        this._eventHandler.sendEventsForPriorityAndAbove(priority);\r\n        this._timeout = -1;\r\n        this.scheduleTimer();\r\n    };\r\n    AWTTransmissionManagerCore._initializeProfiles = function () {\r\n        this._profiles = {};\r\n        this._profiles[DataModels_1.AWT_REAL_TIME] = [4, 2, 1];\r\n        this._profiles[DataModels_1.AWT_NEAR_REAL_TIME] = [12, 6, 3];\r\n        this._profiles[DataModels_1.AWT_BEST_EFFORT] = [36, 18, 9];\r\n    };\r\n    AWTTransmissionManagerCore._newEventsAllowed = false;\r\n    AWTTransmissionManagerCore._currentProfile = DataModels_1.AWT_REAL_TIME;\r\n    AWTTransmissionManagerCore._timeout = -1;\r\n    AWTTransmissionManagerCore._currentBackoffCount = 0;\r\n    AWTTransmissionManagerCore._paused = false;\r\n    AWTTransmissionManagerCore._timerCount = 0;\r\n    AWTTransmissionManagerCore._lastUploadNowCall = 0;\r\n    return AWTTransmissionManagerCore;\r\n}());\r\nexports.default = AWTTransmissionManagerCore;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Enums.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing the enums.\r\n*/\r\n/**\r\n * The AWTUserIdType enumeration contains a set of values that specify the type of user ID.\r\n * @enum {number}\r\n */\r\nvar AWTUserIdType;\r\n(function (AWTUserIdType) {\r\n    /**\r\n     * The user ID type is unknown.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * Microsoft Account ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MSACID\"] = 1] = \"MSACID\";\r\n    /**\r\n     * Microsoft .NET Passport Unique ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MSAPUID\"] = 2] = \"MSAPUID\";\r\n    /**\r\n     * Anonymous user ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"ANID\"] = 3] = \"ANID\";\r\n    /**\r\n     * Organization customer ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"OrgIdCID\"] = 4] = \"OrgIdCID\";\r\n    /**\r\n     * Microsoft Exchange Passport ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"OrgIdPUID\"] = 5] = \"OrgIdPUID\";\r\n    /**\r\n     * User object ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"UserObjectId\"] = 6] = \"UserObjectId\";\r\n    /**\r\n     * Skype ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Skype\"] = 7] = \"Skype\";\r\n    /**\r\n     * Yammer ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Yammer\"] = 8] = \"Yammer\";\r\n    /**\r\n     * E-mail address.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"EmailAddress\"] = 9] = \"EmailAddress\";\r\n    /**\r\n     * Telephone number.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"PhoneNumber\"] = 10] = \"PhoneNumber\";\r\n    /**\r\n     * SIP address.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"SipAddress\"] = 11] = \"SipAddress\";\r\n    /**\r\n     * Multiple unit identity.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MUID\"] = 12] = \"MUID\";\r\n})(AWTUserIdType = exports.AWTUserIdType || (exports.AWTUserIdType = {}));\r\n/**\r\n * The AWTSessionState enumeration contains a set of values that indicate the session state.\r\n * @enum {number}\r\n */\r\nvar AWTSessionState;\r\n(function (AWTSessionState) {\r\n    /**\r\n     * Session started.\r\n     */\r\n    AWTSessionState[AWTSessionState[\"Started\"] = 0] = \"Started\";\r\n    /**\r\n     * Session ended.\r\n     */\r\n    AWTSessionState[AWTSessionState[\"Ended\"] = 1] = \"Ended\";\r\n})(AWTSessionState = exports.AWTSessionState || (exports.AWTSessionState = {}));\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTEventProperties.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Utils = __webpack_require__(1);\r\nvar Enums_1 = __webpack_require__(0);\r\n/**\r\n* The AWTEventProperties class is used for creating an event.\r\n*/\r\nvar AWTEventProperties = /** @class */ (function () {\r\n    /**\r\n     * The AWTEventProperties class constructor.\r\n     * @constructor\r\n     * @param {string} - [Optional] The name of the event.\r\n     */\r\n    function AWTEventProperties(name) {\r\n        this._event = { name: '', properties: {} };\r\n        if (name) {\r\n            this.setName(name);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the name of the event.\r\n     * @param {string} name - The name of the event.\r\n     */\r\n    AWTEventProperties.prototype.setName = function (name) {\r\n        this._event.name = name;\r\n    };\r\n    /**\r\n     * Gets the name of the event.\r\n     * @return {string|undefined} - The name of the event, or undefined if the name has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getName = function () {\r\n        return this._event.name;\r\n    };\r\n    /**\r\n     * Sets the base type of the event.\r\n     * @param {string} type - The base type of the event.\r\n     */\r\n    AWTEventProperties.prototype.setType = function (type) {\r\n        this._event.type = type;\r\n    };\r\n    /**\r\n     * Gets the base type of the event.\r\n     * @return {string|undefined} The base type of the event, or undefined if the base type has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getType = function () {\r\n        return this._event.type;\r\n    };\r\n    /**\r\n     * Sets the timestamp for the event.\r\n     * @param {number} timestampInEpochMillis - The timestamp (in milliseconds) since UNIX Epoch.\r\n     */\r\n    AWTEventProperties.prototype.setTimestamp = function (timestampInEpochMillis) {\r\n        this._event.timestamp = timestampInEpochMillis;\r\n    };\r\n    /**\r\n     * Gets the timestamp for the event.\r\n     * @return {number|undefined} The timestamp for the event, or undefined if it has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getTimestamp = function () {\r\n        return this._event.timestamp;\r\n    };\r\n    /**\r\n     * Sets the priority for sending the event. The default priority\r\n     * of the event is Normal.\r\n     * @param {enum} priority - An AWTEventPriority enumeration value that specifies the priority of the event.\r\n     */\r\n    AWTEventProperties.prototype.setEventPriority = function (priority) {\r\n        this._event.priority = priority;\r\n    };\r\n    /**\r\n     * Gets the priority for the event.\r\n     * @return {AWTEventPriority} - An AWTEventPriority enumeration value that specifies the priority of the event.\r\n     */\r\n    AWTEventProperties.prototype.getEventPriority = function () {\r\n        return this._event.priority;\r\n    };\r\n    /**\r\n     * Sets a property with a name and value. Optionally sets the property type.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setProperty = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: Enums_1.AWTPiiKind.NotSet, cc: Enums_1.AWTCustomerContentKind.NotSet };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Sets a property with a name, a value, and a PII. Optionally sets the property type.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} pii                    - The kind of PII for the property.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setPropertyWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: pii, cc: Enums_1.AWTCustomerContentKind.NotSet };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Sets a property with name, value and customer content. Optionally set the property type of the value.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} customerContent        - The customer content kind for the property.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setPropertyWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: Enums_1.AWTPiiKind.NotSet, cc: customerContent };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Gets the properties currently added to the event.\r\n     * @return {object} A Map<string, AWTEventProperty> containing the current properties.\r\n     */\r\n    AWTEventProperties.prototype.getPropertyMap = function () {\r\n        return this._event.properties;\r\n    };\r\n    /**\r\n     * Gets the event from this event properties object.\r\n     * @return {object} The event properties compiled into AWTEventData.\r\n     */\r\n    AWTEventProperties.prototype.getEvent = function () {\r\n        return this._event;\r\n    };\r\n    return AWTEventProperties;\r\n}());\r\nexports.default = AWTEventProperties;\r\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/**\r\n* microsoft.bond.primitives.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Int64 = /** @class */ (function () {\r\n    function Int64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n        if (this.low < 0) {\r\n            this.high = -1;\r\n        }\r\n    }\r\n    Int64.prototype._Equals = function (numberStr) {\r\n        var tmp = new Int64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return Int64;\r\n}());\r\nexports.Int64 = Int64;\r\nvar UInt64 = /** @class */ (function () {\r\n    function UInt64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n    }\r\n    UInt64.prototype._Equals = function (numberStr) {\r\n        var tmp = new UInt64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return UInt64;\r\n}());\r\nexports.UInt64 = UInt64;\r\nvar Number = /** @class */ (function () {\r\n    function Number() {\r\n    }\r\n    Number._ToByte = function (value) {\r\n        return this._ToUInt8(value);\r\n    };\r\n    Number._ToUInt8 = function (value) {\r\n        return value & 0xff;\r\n    };\r\n    Number._ToInt32 = function (value) {\r\n        var signMask = (value & 0x80000000);\r\n        return (value & 0x7fffffff) | signMask;\r\n    };\r\n    Number._ToUInt32 = function (value) {\r\n        return value & 0xffffffff;\r\n    };\r\n    return Number;\r\n}());\r\nexports.Number = Number;\r\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTAutoCollection_1 = __webpack_require__(8);\r\nvar Enums_1 = __webpack_require__(0);\r\nvar Enums_2 = __webpack_require__(4);\r\nvar UI_IDTYPE = 'UserInfo.IdType';\r\n/**\r\n *  Class to allow users to set semantic context properties.\r\n */\r\nvar AWTSemanticContext = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {boolean} _allowDeviceFields - Allow setting of device semantic context.\r\n     * @param {object} _properties         - The event properties where to add the semantic context.\r\n     */\r\n    function AWTSemanticContext(_allowDeviceFields, _properties) {\r\n        this._allowDeviceFields = _allowDeviceFields;\r\n        this._properties = _properties;\r\n    }\r\n    /**\r\n     * Sets the field AppInfo.Id with the given value.\r\n     * @param {string} appId  - The Id uniquely identifies the App from this this event originated.\r\n     * In the multi-tenant Aria Platform, this is the Application Id of the\r\n     * registered Application. Example, \"735d47645f7c4de69964e2c01888d6b6\".\r\n     */\r\n    AWTSemanticContext.prototype.setAppId = function (appId) {\r\n        this._addContext('AppInfo.Id', appId);\r\n    };\r\n    /**\r\n     * Sets the field AppInfo.Version with the given value.\r\n     * @param {string} appVersion  - The version of the App, retrieved programmatically where possible. This\r\n     * is app/platform dependent. Examples such as \"7.0.0.100\" for Skype,\r\n     * or \"12.0.30723.00 Update 3\" for Microsoft Visual Studio Ultimate 2013\r\n     */\r\n    AWTSemanticContext.prototype.setAppVersion = function (appVersion) {\r\n        this._addContext('AppInfo.Version', appVersion);\r\n    };\r\n    /**\r\n     * Sets the field AppInfo.Language with the given value.\r\n     * @param {string} appLanguage  - Language of the App in IETF language tag format, as described in RFC 4646.\r\n     * Examples of acceptable values include \"en\", \"pt-BR\" and \"zh-Hant-CN\".\r\n     */\r\n    AWTSemanticContext.prototype.setAppLanguage = function (appLanguage) {\r\n        this._addContext('AppInfo.Language', appLanguage);\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceId  - The device Id uniquely identifies the physical device, using platform\r\n     * available API's. This allows correlation against Aria Hardware Inventory.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceId = function (deviceId) {\r\n        if (this._allowDeviceFields) {\r\n            AWTAutoCollection_1.default.checkAndSaveDeviceId(deviceId);\r\n            this._addContext('DeviceInfo.Id', deviceId);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.OsName with the given value.\r\n     * @param {string} deviceOsName  - The name of the OS. The SDK should ensure this is a limited normalized\r\n     * set. Asimov is using very high level value e.g. Windows/Android/iOS.\r\n     * Examples such as \"iOS\" or \"Windows Phone\".\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceOsName = function (deviceOsName) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.OsName', deviceOsName);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.OsVersion with the given value.\r\n     * @param {string} deviceOsVersion  - The version of the OS, retrieved programmatically, which can be used\r\n     * for aggregation or filtering for scenarios like real time monitoring\r\n     * or metrics reporting. Flurry and GA provide aggregation at this level.\r\n     * Examples such as \"8.1.2\" for iOS, or \"8.1\" for Windows Phone.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceOsVersion = function (deviceOsVersion) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.OsVersion', deviceOsVersion);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceBrowserName  - he name of the OS. The SDK should ensure this is a limited normalized set.\r\n     * Examples such as \"Chrome\" or \"Edge\".\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceBrowserName = function (deviceBrowserName) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.BrowserName', deviceBrowserName);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceBrowserVersion  - The version of the browser, retrieved programmatically, which can be used\r\n     * for aggregation or filtering for scenarios like real time monitoring or metrics reporting.\r\n     * Examples such as \"57.0.2987.133\" for Chrome, or \"15.15063\" for Edge.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceBrowserVersion = function (deviceBrowserVersion) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.BrowserVersion', deviceBrowserVersion);\r\n        }\r\n    };\r\n    /**\r\n     * Set the device manufacturer context information of telemetry event.\r\n     * Can only be set at the LogManager level. Setting it via the object obtained from ILogger\r\n     * will be no-op.\r\n     * @param {string} deviceMake The manufacturer of the device, retrieved\r\n     *            programmatically where possible and is app/platform specific\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceMake = function (deviceMake) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.Make', deviceMake);\r\n        }\r\n    };\r\n    /**\r\n     * Set the device model context information of telemetry event.\r\n     * Can only be set at the LogManager level. Setting it via the object obtained from ILogger\r\n     * will be no-op.\r\n     * @param {string} deviceModel The model of the device, retrieved programmatically\r\n     *            where possible and is app/platform specific\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceModel = function (deviceModel) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.Model', deviceModel);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.Id with the given value.\r\n     * @param {string} userId     - The id uniquely identifies the user in an application-specific\r\n     * user namespace, such as a Skype ID in the Skype App. This may be empty for Apps\r\n     * which do not require user sign-in.\r\n     * @param {enum} pii        - Optional pii type for the user id.\r\n     * @param {enum} userIdType - Optional id type for the user id.\r\n     */\r\n    AWTSemanticContext.prototype.setUserId = function (userId, pii, userIdType) {\r\n        if (!isNaN(userIdType) && userIdType !== null && userIdType >= 0 && userIdType <= 12) {\r\n            this._addContext(UI_IDTYPE, userIdType.toString());\r\n        }\r\n        else {\r\n            var inferredUserIdType = void 0;\r\n            switch (pii) {\r\n                case Enums_1.AWTPiiKind.SipAddress:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.SipAddress;\r\n                    break;\r\n                case Enums_1.AWTPiiKind.PhoneNumber:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.PhoneNumber;\r\n                    break;\r\n                case Enums_1.AWTPiiKind.SmtpAddress:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.EmailAddress;\r\n                    break;\r\n                default:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.Unknown;\r\n                    break;\r\n            }\r\n            this._addContext(UI_IDTYPE, inferredUserIdType.toString());\r\n        }\r\n        if (isNaN(pii) || pii === null || pii === Enums_1.AWTPiiKind.NotSet || pii > 13) {\r\n            switch (userIdType) {\r\n                case Enums_2.AWTUserIdType.Skype:\r\n                    pii = Enums_1.AWTPiiKind.Identity;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.EmailAddress:\r\n                    pii = Enums_1.AWTPiiKind.SmtpAddress;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.PhoneNumber:\r\n                    pii = Enums_1.AWTPiiKind.PhoneNumber;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.SipAddress:\r\n                    pii = Enums_1.AWTPiiKind.SipAddress;\r\n                    break;\r\n                default:\r\n                    pii = Enums_1.AWTPiiKind.NotSet;\r\n                    break;\r\n            }\r\n        }\r\n        this._addContextWithPii('UserInfo.Id', userId, pii);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.AdvertisingId with the given value.\r\n     * @param {string} userAdvertisingId  - The AdvertisingId is the user-specific device id obtainable through\r\n     * platform API's. This may not be available if users choose to opt-out\r\n     * of this id, or if the underlying platform does not support it.\r\n     */\r\n    AWTSemanticContext.prototype.setUserAdvertisingId = function (userAdvertisingId) {\r\n        this._addContext('UserInfo.AdvertisingId', userAdvertisingId);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.TimeZone with the given value.\r\n     * @param {string} userTimeZone  - The user's time zone relative to UTC, in ISO 8601 time zone format.\r\n     * Examples of acceptable values include \"+00\", \"+07:00\", and \"-1130\".\r\n     */\r\n    AWTSemanticContext.prototype.setUserTimeZone = function (userTimeZone) {\r\n        this._addContext('UserInfo.TimeZone', userTimeZone);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.Language with the given value.\r\n     * @param {string} userLanguage  - The user's language in IETF language tag format, as described in RFC 4646.\r\n     * Examples of acceptable values include \"en\", \"pt-BR\" and \"zh-Hant-CN\".\r\n     */\r\n    AWTSemanticContext.prototype.setUserLanguage = function (userLanguage) {\r\n        this._addContext('UserInfo.Language', userLanguage);\r\n    };\r\n    AWTSemanticContext.prototype._addContext = function (key, value) {\r\n        if (typeof value === 'string') {\r\n            this._properties.setProperty(key, value);\r\n        }\r\n    };\r\n    AWTSemanticContext.prototype._addContextWithPii = function (key, value, pii) {\r\n        if (typeof value === 'string') {\r\n            this._properties.setPropertyWithPii(key, value, pii);\r\n        }\r\n    };\r\n    return AWTSemanticContext;\r\n}());\r\nexports.default = AWTSemanticContext;\r\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTAutoCollection.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2018\r\n*/\r\nvar Utils = __webpack_require__(1);\r\nvar DEVICE_ID_COOKIE = 'MicrosoftApplicationsTelemetryDeviceId';\r\nvar FIRSTLAUNCHTIME_COOKIE = 'MicrosoftApplicationsTelemetryFirstLaunchTime';\r\nvar BROWSERS = {\r\n    MSIE: 'MSIE',\r\n    CHROME: 'Chrome',\r\n    FIREFOX: 'Firefox',\r\n    SAFARI: 'Safari',\r\n    EDGE: 'Edge',\r\n    ELECTRON: 'Electron',\r\n    SKYPE_SHELL: 'SkypeShell',\r\n    PHANTOMJS: 'PhantomJS',\r\n    OPERA: 'Opera'\r\n};\r\nvar OPERATING_SYSTEMS = {\r\n    WINDOWS: 'Windows',\r\n    MACOSX: 'Mac OS X',\r\n    WINDOWS_PHONE: 'Windows Phone',\r\n    WINDOWS_RT: 'Windows RT',\r\n    IOS: 'iOS',\r\n    ANDROID: 'Android',\r\n    LINUX: 'Linux',\r\n    CROS: 'Chrome OS',\r\n    UNKNOWN: 'Unknown'\r\n};\r\nvar OSNAMEREGEX = {\r\n    WIN: /(windows|win32)/i,\r\n    WINRT: / arm;/i,\r\n    WINPHONE: /windows\\sphone\\s\\d+\\.\\d+/i,\r\n    OSX: /(macintosh|mac os x)/i,\r\n    IOS: /(iPad|iPhone|iPod)(?=.*like Mac OS X)/i,\r\n    LINUX: /(linux|joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk)/i,\r\n    ANDROID: /android/i,\r\n    CROS: /CrOS/i\r\n};\r\nvar VERSION_MAPPINGS = {\r\n    '5.1': 'XP',\r\n    '6.0': 'Vista',\r\n    '6.1': '7',\r\n    '6.2': '8',\r\n    '6.3': '8.1',\r\n    '10.0': '10'\r\n};\r\nvar REGEX_VERSION = '([\\\\d,.]+)';\r\nvar REGEX_VERSION_MAC = '([\\\\d,_,.]+)';\r\nvar UNKNOWN = 'Unknown';\r\nvar UNDEFINED = 'undefined';\r\n/**\r\n * Class that stores semantic properties.\r\n */\r\nvar AWTAutoCollection = /** @class */ (function () {\r\n    function AWTAutoCollection() {\r\n    }\r\n    /**\r\n     * Add a property storage override to override the usage of document.cookie to store\r\n     * properties. The property storage object should implement both getProperty and setProperty, otherwise\r\n     * it will be rejected.\r\n     * @param {object} propertyStorage - Property storage object which is used for storing SDK properties.\r\n     * @return {boolean} True if the property storage override was accepted, false otherwise.\r\n     */\r\n    AWTAutoCollection.addPropertyStorageOverride = function (propertyStorage) {\r\n        if (propertyStorage) {\r\n            this._propertyStorage = propertyStorage;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Auto collect semantic context properties.\r\n     * @param {object} semantContext   - The semantic context to use to set auto collected information.\r\n     * @param {boolean} disableCookies - Determines if setting cookies is disabled.\r\n     * @param {object} userAgent       - UserAgent string to be used for auto collection of semantic properties.\r\n     */\r\n    AWTAutoCollection.autoCollect = function (semanticContext, disableCookies, userAgent) {\r\n        this._semanticContext = semanticContext;\r\n        this._disableCookies = disableCookies;\r\n        this._autoCollect();\r\n        if (!userAgent && typeof navigator !== UNDEFINED) {\r\n            userAgent = navigator.userAgent || '';\r\n        }\r\n        this._autoCollectFromUserAgent(userAgent);\r\n        if (this._disableCookies && !this._propertyStorage) {\r\n            this._deleteCookie(DEVICE_ID_COOKIE);\r\n            this._deleteCookie(FIRSTLAUNCHTIME_COOKIE);\r\n            return;\r\n        }\r\n        //Only collect device id if it can be stored\r\n        if (this._propertyStorage || (this._areCookiesAvailable && !this._disableCookies)) {\r\n            this._autoCollectDeviceId();\r\n        }\r\n    };\r\n    /**\r\n     * Checks if the device id stored is the same as the new device id. If they are not,\r\n     * store the new id and store a new first launch time.\r\n     * @param {string} deviceId - The new device id.\r\n     */\r\n    AWTAutoCollection.checkAndSaveDeviceId = function (deviceId) {\r\n        if (deviceId) {\r\n            var oldDeviceId = this._getData(DEVICE_ID_COOKIE);\r\n            if (oldDeviceId !== deviceId) {\r\n                this._saveData(DEVICE_ID_COOKIE, deviceId);\r\n                this._saveData(FIRSTLAUNCHTIME_COOKIE, Utils.getISOString(new Date()));\r\n            }\r\n            this._setFirstLaunchTime(this._getData(FIRSTLAUNCHTIME_COOKIE));\r\n        }\r\n    };\r\n    /**\r\n     * Auto collect the device SDK Id.\r\n     */\r\n    AWTAutoCollection._autoCollectDeviceId = function () {\r\n        var deviceId = this._getData(DEVICE_ID_COOKIE);\r\n        if (!deviceId) {\r\n            deviceId = Utils.newGuid();\r\n            this.checkAndSaveDeviceId(deviceId);\r\n        }\r\n        else {\r\n            this._setFirstLaunchTime(this._getData(FIRSTLAUNCHTIME_COOKIE));\r\n        }\r\n        this._semanticContext.setDeviceId(deviceId);\r\n    };\r\n    AWTAutoCollection._autoCollect = function () {\r\n        //Get app language\r\n        if (typeof document !== UNDEFINED && document.documentElement) {\r\n            this._semanticContext.setAppLanguage(document.documentElement.lang);\r\n        }\r\n        //Get user language\r\n        if (typeof navigator !== UNDEFINED) {\r\n            this._semanticContext.setUserLanguage(navigator.userLanguage || navigator.language);\r\n        }\r\n        //Get time zone\r\n        var timeZone = new Date().getTimezoneOffset();\r\n        var minutes = timeZone % 60;\r\n        var hours = (timeZone - minutes) / 60;\r\n        var timeZonePrefix = '+';\r\n        if (hours > 0) {\r\n            timeZonePrefix = '-';\r\n        }\r\n        hours = Math.abs(hours);\r\n        minutes = Math.abs(minutes);\r\n        this._semanticContext.setUserTimeZone(timeZonePrefix + (hours < 10 ? '0' + hours : hours.toString()) + ':'\r\n            + (minutes < 10 ? '0' + minutes : minutes.toString()));\r\n    };\r\n    AWTAutoCollection._autoCollectFromUserAgent = function (userAgent) {\r\n        if (userAgent) {\r\n            var browserName = this._getBrowserName(userAgent);\r\n            this._semanticContext.setDeviceBrowserName(browserName);\r\n            this._semanticContext.setDeviceBrowserVersion(this._getBrowserVersion(userAgent, browserName));\r\n            var osName = this._getOsName(userAgent);\r\n            this._semanticContext.setDeviceOsName(osName);\r\n            this._semanticContext.setDeviceOsVersion(this._getOsVersion(userAgent, osName));\r\n        }\r\n    };\r\n    AWTAutoCollection._getBrowserName = function (userAgent) {\r\n        //Check for Opera first        \r\n        if (this._userAgentContainsString('OPR/', userAgent)) {\r\n            return BROWSERS.OPERA;\r\n        }\r\n        //Check for Phantom JS\r\n        if (this._userAgentContainsString(BROWSERS.PHANTOMJS, userAgent)) {\r\n            return BROWSERS.PHANTOMJS;\r\n        }\r\n        //Check for Edge\r\n        if (this._userAgentContainsString(BROWSERS.EDGE, userAgent)) {\r\n            return BROWSERS.EDGE;\r\n        }\r\n        //Check for Electron\r\n        if (this._userAgentContainsString(BROWSERS.ELECTRON, userAgent)) {\r\n            return BROWSERS.ELECTRON;\r\n        }\r\n        //Check for Chrome\r\n        if (this._userAgentContainsString(BROWSERS.CHROME, userAgent)) {\r\n            return BROWSERS.CHROME;\r\n        }\r\n        //Check for Internet Explorer\r\n        if (this._userAgentContainsString('Trident', userAgent)) {\r\n            return BROWSERS.MSIE;\r\n        }\r\n        //Check for Firefox\r\n        if (this._userAgentContainsString(BROWSERS.FIREFOX, userAgent)) {\r\n            return BROWSERS.FIREFOX;\r\n        }\r\n        //Check for Safari\r\n        if (this._userAgentContainsString(BROWSERS.SAFARI, userAgent)) {\r\n            return BROWSERS.SAFARI;\r\n        }\r\n        //Check for Skype shell\r\n        if (this._userAgentContainsString(BROWSERS.SKYPE_SHELL, userAgent)) {\r\n            return BROWSERS.SKYPE_SHELL;\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._setFirstLaunchTime = function (flt) {\r\n        if (!isNaN(flt)) {\r\n            var fltDate = new Date();\r\n            fltDate.setTime(parseInt(flt, 10));\r\n            flt = Utils.getISOString(fltDate);\r\n        }\r\n        this.firstLaunchTime = flt;\r\n    };\r\n    AWTAutoCollection._userAgentContainsString = function (searchString, userAgent) {\r\n        return userAgent.indexOf(searchString) > -1;\r\n    };\r\n    AWTAutoCollection._getBrowserVersion = function (userAgent, browserName) {\r\n        if (browserName === BROWSERS.MSIE) {\r\n            return this._getIeVersion(userAgent);\r\n        }\r\n        else {\r\n            return this._getOtherVersion(browserName, userAgent);\r\n        }\r\n    };\r\n    AWTAutoCollection._getIeVersion = function (userAgent) {\r\n        var classicIeVersionMatches = userAgent.match(new RegExp(BROWSERS.MSIE + ' ' + REGEX_VERSION));\r\n        if (classicIeVersionMatches) {\r\n            return classicIeVersionMatches[1];\r\n        }\r\n        else {\r\n            var ieVersionMatches = userAgent.match(new RegExp('rv:' + REGEX_VERSION));\r\n            if (ieVersionMatches) {\r\n                return ieVersionMatches[1];\r\n            }\r\n        }\r\n    };\r\n    AWTAutoCollection._getOtherVersion = function (browserString, userAgent) {\r\n        if (browserString === BROWSERS.SAFARI) {\r\n            browserString = 'Version';\r\n        }\r\n        var matches = userAgent.match(new RegExp(browserString + '/' + REGEX_VERSION));\r\n        if (matches) {\r\n            return matches[1];\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getOsName = function (userAgent) {\r\n        if (userAgent.match(OSNAMEREGEX.WINPHONE)) {\r\n            return OPERATING_SYSTEMS.WINDOWS_PHONE;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.WINRT)) {\r\n            return OPERATING_SYSTEMS.WINDOWS_RT;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.IOS)) {\r\n            return OPERATING_SYSTEMS.IOS;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.ANDROID)) {\r\n            return OPERATING_SYSTEMS.ANDROID;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.LINUX)) {\r\n            return OPERATING_SYSTEMS.LINUX;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.OSX)) {\r\n            return OPERATING_SYSTEMS.MACOSX;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.WIN)) {\r\n            return OPERATING_SYSTEMS.WINDOWS;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.CROS)) {\r\n            return OPERATING_SYSTEMS.CROS;\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getOsVersion = function (userAgent, osName) {\r\n        if (osName === OPERATING_SYSTEMS.WINDOWS) {\r\n            return this._getGenericOsVersion(userAgent, 'Windows NT');\r\n        }\r\n        if (osName === OPERATING_SYSTEMS.ANDROID) {\r\n            return this._getGenericOsVersion(userAgent, osName);\r\n        }\r\n        if (osName === OPERATING_SYSTEMS.MACOSX) {\r\n            return this._getMacOsxVersion(userAgent);\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getGenericOsVersion = function (userAgent, osName) {\r\n        var ntVersionMatches = userAgent.match(new RegExp(osName + ' ' + REGEX_VERSION));\r\n        if (ntVersionMatches) {\r\n            if (VERSION_MAPPINGS[ntVersionMatches[1]]) {\r\n                return VERSION_MAPPINGS[ntVersionMatches[1]];\r\n            }\r\n            return ntVersionMatches[1];\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getMacOsxVersion = function (userAgent) {\r\n        var macOsxVersionInUserAgentMatches = userAgent.match(new RegExp(OPERATING_SYSTEMS.MACOSX + ' ' + REGEX_VERSION_MAC));\r\n        if (macOsxVersionInUserAgentMatches) {\r\n            var versionString = macOsxVersionInUserAgentMatches[1].replace(/_/g, '.');\r\n            if (versionString) {\r\n                var delimiter = this._getDelimiter(versionString);\r\n                if (delimiter) {\r\n                    var components = versionString.split(delimiter);\r\n                    return components[0];\r\n                }\r\n                else {\r\n                    return versionString;\r\n                }\r\n            }\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getDelimiter = function (versionString) {\r\n        if (versionString.indexOf('.') > -1) {\r\n            return '.';\r\n        }\r\n        if (versionString.indexOf('_') > -1) {\r\n            return '_';\r\n        }\r\n        return null;\r\n    };\r\n    AWTAutoCollection._saveData = function (name, value) {\r\n        if (this._propertyStorage) {\r\n            this._propertyStorage.setProperty(name, value);\r\n        }\r\n        else if (this._areCookiesAvailable) {\r\n            //Expires in 365 days\r\n            var date = new Date();\r\n            date.setTime(date.getTime() + 31536000000 /*365 days in milliseconds*/);\r\n            var expires = 'expires=' + date.toUTCString();\r\n            document.cookie = name + '=' + value + '; ' + expires;\r\n        }\r\n    };\r\n    AWTAutoCollection._getData = function (name) {\r\n        if (this._propertyStorage) {\r\n            return this._propertyStorage.getProperty(name) || '';\r\n        }\r\n        else if (this._areCookiesAvailable) {\r\n            name = name + '=';\r\n            var ca = document.cookie.split(';');\r\n            for (var i = 0; i < ca.length; i++) {\r\n                var c = ca[i];\r\n                var j = 0;\r\n                while (c.charAt(j) === ' ') {\r\n                    j++;\r\n                }\r\n                c = c.substring(j);\r\n                if (c.indexOf(name) === 0) {\r\n                    return c.substring(name.length, c.length);\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n    AWTAutoCollection._deleteCookie = function (name) {\r\n        if (this._areCookiesAvailable) {\r\n            document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n        }\r\n    };\r\n    AWTAutoCollection._disableCookies = false;\r\n    AWTAutoCollection._areCookiesAvailable = typeof document !== UNDEFINED && typeof document.cookie !== UNDEFINED;\r\n    return AWTAutoCollection;\r\n}());\r\nexports.default = AWTAutoCollection;\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AWT_REAL_TIME = 'REAL_TIME';\r\nexports.AWT_NEAR_REAL_TIME = 'NEAR_REAL_TIME';\r\nexports.AWT_BEST_EFFORT = 'BEST_EFFORT';\r\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTLogger.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Enums_1 = __webpack_require__(0);\r\nvar Enums_2 = __webpack_require__(4);\r\nvar AWTEventProperties_1 = __webpack_require__(5);\r\nvar Utils = __webpack_require__(1);\r\nvar AWTStatsManager_1 = __webpack_require__(11);\r\nvar AWTNotificationManager_1 = __webpack_require__(2);\r\nvar AWTTransmissionManagerCore_1 = __webpack_require__(3);\r\nvar AWTLogManagerSettings_1 = __webpack_require__(15);\r\nvar Version = __webpack_require__(13);\r\nvar AWTSemanticContext_1 = __webpack_require__(7);\r\nvar AWTAutoCollection_1 = __webpack_require__(8);\r\n/**\r\n* The AWTLogger class defines a logger.\r\n*/\r\nvar AWTLogger = /** @class */ (function () {\r\n    /**\r\n     * The AWTLogger class constructor.\r\n     * @constructor\r\n     * @param {string} _apiKey - The API key (also known as application key, and tenant token).\r\n     */\r\n    function AWTLogger(_apiKey) {\r\n        this._apiKey = _apiKey;\r\n        this._contextProperties = new AWTEventProperties_1.default();\r\n        this._semanticContext = new AWTSemanticContext_1.default(false, this._contextProperties);\r\n        this._sessionStartTime = 0;\r\n        this._createInitId();\r\n    }\r\n    /**\r\n     * Sets the context sent with every event from this logger.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContext = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setProperty(name, value, type);\r\n    };\r\n    /**\r\n     * Sets context that will be sent with every event from this logger, and tags it as PII.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} pii                    - The kind of PII for the context property, as one of the AWTPiiKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContextWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setPropertyWithPii(name, value, pii, type);\r\n    };\r\n    /**\r\n     * Sets the context that sent with every event from this logger, and tags it as customer content.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} customerContent        - The customer content kind, as one of the AWTCustomerContentKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContextWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setPropertyWithCustomerContent(name, value, customerContent, type);\r\n    };\r\n    /**\r\n     * Gets the logger semantic context.\r\n     * <b>Note:</b> Device properties are not permitted at the logger level, but you can set them\r\n     * at the global level using the AWTLogManager class.\r\n     *\r\n     * @return A AWTSemanticContext object that you can use to set common semantic properties.\r\n     */\r\n    AWTLogger.prototype.getSemanticContext = function () {\r\n        return this._semanticContext;\r\n    };\r\n    /**\r\n     * Logs a custom event with the specified name and fields - to track information\r\n     * such as how a particular feature is used.\r\n     * @param {Object} event - Can be either an AWTEventProperties object or an AWTEventData object or an event name.\r\n     */\r\n    AWTLogger.prototype.logEvent = function (event) {\r\n        if (AWTLogManagerSettings_1.default.loggingEnabled) {\r\n            if (!this._apiKey) {\r\n                this._apiKey = AWTLogManagerSettings_1.default.defaultTenantToken;\r\n                this._createInitId();\r\n            }\r\n            var sanitizeProperties = true;\r\n            if (Utils.isString(event)) {\r\n                event = {\r\n                    name: event\r\n                };\r\n            }\r\n            else if (event instanceof AWTEventProperties_1.default) {\r\n                event = event.getEvent();\r\n                //AWTEventProperties will already sanitize properties\r\n                sanitizeProperties = false;\r\n            }\r\n            AWTStatsManager_1.default.eventReceived(this._apiKey);\r\n            AWTLogger._logEvent(AWTLogger._getInternalEvent(event, this._apiKey, sanitizeProperties), this._contextProperties);\r\n        }\r\n    };\r\n    /**\r\n     * Logs the session state.\r\n     * <b>Note:</b> Calling Logging session <i>start</i> while a session already exists will produce a no-op. Similarly, calling logging\r\n     * session <i>end</i> while a session does not exist will also produce a no-op.\r\n     * @param {enum} state         - The session's state.\r\n     * @param {obbject} properties - [Optional] Properties of the session event as either a AWTEventProperties object,\r\n     * or a AWTEventData object.\r\n     */\r\n    AWTLogger.prototype.logSession = function (state, properties) {\r\n        if (AWTLogManagerSettings_1.default.sessionEnabled) {\r\n            var sessionEvent = {\r\n                name: 'session',\r\n                type: 'session',\r\n                properties: {}\r\n            };\r\n            AWTLogger._addPropertiesToEvent(sessionEvent, properties);\r\n            sessionEvent.priority = Enums_1.AWTEventPriority.High;\r\n            if (state === Enums_2.AWTSessionState.Started) {\r\n                if (this._sessionStartTime > 0) {\r\n                    //Session start called out of order. Session start time being non zero indicates an ongoing session.\r\n                    return;\r\n                }\r\n                this._sessionStartTime = (new Date()).getTime();\r\n                this._sessionId = Utils.newGuid();\r\n                this.setContext('Session.Id', this._sessionId);\r\n                sessionEvent.properties['Session.State'] = 'Started';\r\n            }\r\n            else if (state === Enums_2.AWTSessionState.Ended) {\r\n                if (this._sessionStartTime === 0) {\r\n                    //Session end called out of order. Session start time being zero indicates no ongoing session.\r\n                    return;\r\n                }\r\n                var sessionDurationSec = Math.floor(((new Date()).getTime() - this._sessionStartTime) / 1000);\r\n                sessionEvent.properties['Session.Id'] = this._sessionId;\r\n                sessionEvent.properties['Session.State'] = 'Ended';\r\n                sessionEvent.properties['Session.Duration'] = sessionDurationSec.toString();\r\n                sessionEvent.properties['Session.DurationBucket'] =\r\n                    AWTLogger._getSessionDurationFromTime(sessionDurationSec);\r\n                this._sessionStartTime = 0;\r\n                this.setContext('Session.Id', null);\r\n                this._sessionId = undefined;\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n            sessionEvent.properties['Session.FirstLaunchTime'] = AWTAutoCollection_1.default.firstLaunchTime;\r\n            this.logEvent(sessionEvent);\r\n        }\r\n    };\r\n    /**\r\n     * Gets the session ID for the ongoing session.\r\n     * @return {string} A string that contains the session ID for the ongoing session. Returns undefined if there is\r\n     * no ongoing session.\r\n     */\r\n    AWTLogger.prototype.getSessionId = function () {\r\n        return this._sessionId;\r\n    };\r\n    /**\r\n     * Logs a failure event, such as an application exception.\r\n     * @param {string} signature  - A string that identifies the bucket of the failure.\r\n     * @param {string} detail     - A string that contains the a description of the failure.\r\n     * @param {string} category   - [Optional] A string that identifies the category of the failure, such as an application error,\r\n     * a hang, or a crash.\r\n     * @param {string} id         - [Optional] A string that that uniquely identifies this failure.\r\n     * @param {object} properties - [Optional] Properties of the failure event, as either an AWTEventProperties object or an\r\n     * AWTEventData object. This value can also be null.\r\n     */\r\n    AWTLogger.prototype.logFailure = function (signature, detail, category, id, properties) {\r\n        if (!signature || !detail) {\r\n            return;\r\n        }\r\n        var failureEvent = {\r\n            name: 'failure',\r\n            type: 'failure',\r\n            properties: {}\r\n        };\r\n        AWTLogger._addPropertiesToEvent(failureEvent, properties);\r\n        failureEvent.properties['Failure.Signature'] = signature;\r\n        failureEvent.properties['Failure.Detail'] = detail;\r\n        if (category) {\r\n            failureEvent.properties['Failure.Category'] = category;\r\n        }\r\n        if (id) {\r\n            failureEvent.properties['Failure.Id'] = id;\r\n        }\r\n        failureEvent.priority = Enums_1.AWTEventPriority.High;\r\n        this.logEvent(failureEvent);\r\n    };\r\n    /**\r\n     * Logs a page view event which is normally a result of a user action on a UI page - such as search query,\r\n     * a content request, or a page navigation.\r\n     *\r\n     * @param {string} id          - A string that uniquely identifies this page.\r\n     * @param {string} pageName    - The name of the page.\r\n     * @param {string} category    - [Optional] A string that contains the category to which this page belongs.\r\n     * @param {string} uri         - [Optional] A string that contains the URI of this page.\r\n     * @param {string} referrerUri - [Optional] A string that contains the URI that refers to this page.\r\n     * @param {object} properties  - [Optional] Properties of the page view event, as an AWTEventProperties object.\r\n     * This value can also be null.\r\n     */\r\n    AWTLogger.prototype.logPageView = function (id, pageName, category, uri, referrerUri, properties) {\r\n        if (!id || !pageName) {\r\n            return;\r\n        }\r\n        var pageViewEvent = {\r\n            name: 'pageview',\r\n            type: 'pageview',\r\n            properties: {}\r\n        };\r\n        AWTLogger._addPropertiesToEvent(pageViewEvent, properties);\r\n        pageViewEvent.properties['PageView.Id'] = id;\r\n        pageViewEvent.properties['PageView.Name'] = pageName;\r\n        if (category) {\r\n            pageViewEvent.properties['PageView.Category'] = category;\r\n        }\r\n        if (uri) {\r\n            pageViewEvent.properties['PageView.Uri'] = uri;\r\n        }\r\n        if (referrerUri) {\r\n            pageViewEvent.properties['PageView.ReferrerUri'] = referrerUri;\r\n        }\r\n        this.logEvent(pageViewEvent);\r\n    };\r\n    AWTLogger.prototype._createInitId = function () {\r\n        // If no init ID for this tenant token exists, create one\r\n        if (!AWTLogger._initIdMap[this._apiKey] && this._apiKey) {\r\n            AWTLogger._initIdMap[this._apiKey] = Utils.newGuid();\r\n        }\r\n    };\r\n    AWTLogger._addPropertiesToEvent = function (event, propertiesEvent) {\r\n        if (propertiesEvent) {\r\n            if (propertiesEvent instanceof AWTEventProperties_1.default) {\r\n                propertiesEvent = propertiesEvent.getEvent();\r\n            }\r\n            if (propertiesEvent.name) {\r\n                event.name = propertiesEvent.name;\r\n            }\r\n            if (propertiesEvent.priority) {\r\n                event.priority = propertiesEvent.priority;\r\n            }\r\n            for (var name_1 in propertiesEvent.properties) {\r\n                if (propertiesEvent.properties.hasOwnProperty(name_1)) {\r\n                    event.properties[name_1] = propertiesEvent.properties[name_1];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AWTLogger._getSessionDurationFromTime = function (timeInSec) {\r\n        if (timeInSec < 0) {\r\n            return 'Undefined';\r\n        }\r\n        else if (timeInSec <= 3) {\r\n            return 'UpTo3Sec';\r\n        }\r\n        else if (timeInSec <= 10) {\r\n            return 'UpTo10Sec';\r\n        }\r\n        else if (timeInSec <= 30) {\r\n            return 'UpTo30Sec';\r\n        }\r\n        else if (timeInSec <= 60) {\r\n            return 'UpTo60Sec';\r\n        }\r\n        else if (timeInSec <= 180) {\r\n            return 'UpTo3Min';\r\n        }\r\n        else if (timeInSec <= 600) {\r\n            return 'UpTo10Min';\r\n        }\r\n        else if (timeInSec <= 1800) {\r\n            return 'UpTo30Min';\r\n        }\r\n        return 'Above30Min';\r\n    };\r\n    AWTLogger._logEvent = function (eventWithMetaData, contextProperties) {\r\n        if (!eventWithMetaData.name || !Utils.isString(eventWithMetaData.name)) {\r\n            AWTNotificationManager_1.default.eventsRejected([eventWithMetaData], Enums_1.AWTEventsRejectedReason.InvalidEvent);\r\n            return;\r\n        }\r\n        eventWithMetaData.name = eventWithMetaData.name.toLowerCase();\r\n        //Check if name is a string and replace . with _ if it is. Drop otherwise.\r\n        eventWithMetaData.name = eventWithMetaData.name.replace(Utils.EventNameDotRegex, '_');\r\n        if (!eventWithMetaData.type || !Utils.isString(eventWithMetaData.type)) {\r\n            eventWithMetaData.type = 'custom';\r\n        }\r\n        else {\r\n            eventWithMetaData.type = eventWithMetaData.type.toLowerCase();\r\n        }\r\n        //Validate name and type and drop if invalid\r\n        if (!Utils.EventNameAndTypeRegex.test(eventWithMetaData.name) || !Utils.EventNameAndTypeRegex.test(eventWithMetaData.type)) {\r\n            AWTNotificationManager_1.default.eventsRejected([eventWithMetaData], Enums_1.AWTEventsRejectedReason.InvalidEvent);\r\n            return;\r\n        }\r\n        //Add the timestamp if the timestamp is not set or is negative.\r\n        if (!Utils.isNumber(eventWithMetaData.timestamp) || eventWithMetaData.timestamp < 0) {\r\n            eventWithMetaData.timestamp = (new Date()).getTime();\r\n        }\r\n        //If no properties create one for EventInfo and context \r\n        if (!eventWithMetaData.properties) {\r\n            eventWithMetaData.properties = {};\r\n        }\r\n        // Logger ContextProperties\r\n        this._addContextIfAbsent(eventWithMetaData, contextProperties.getPropertyMap());\r\n        // LogManager ContextProperties\r\n        this._addContextIfAbsent(eventWithMetaData, AWTLogManagerSettings_1.default.logManagerContext.getPropertyMap());\r\n        //Add event info\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.InitId', this._getInitId(eventWithMetaData.apiKey));\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Sequence', this._getSequenceId(eventWithMetaData.apiKey));\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.SdkVersion', Version.FullVersionString);\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Name', eventWithMetaData.name);\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Time', (new Date(eventWithMetaData.timestamp)).toISOString());\r\n        if (!Utils.isPriority(eventWithMetaData.priority)) {\r\n            eventWithMetaData.priority = Enums_1.AWTEventPriority.Normal;\r\n        }\r\n        this._sendEvent(eventWithMetaData);\r\n    };\r\n    AWTLogger._addContextIfAbsent = function (event, contextProperties) {\r\n        if (contextProperties) {\r\n            for (var name_2 in contextProperties) {\r\n                if (contextProperties.hasOwnProperty(name_2)) {\r\n                    if (!event.properties[name_2]) {\r\n                        event.properties[name_2] = contextProperties[name_2];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AWTLogger._setDefaultProperty = function (event, name, value) {\r\n        event.properties[name] = { value: value, pii: Enums_1.AWTPiiKind.NotSet, type: Enums_1.AWTPropertyType.String };\r\n    };\r\n    AWTLogger._sendEvent = function (event) {\r\n        AWTTransmissionManagerCore_1.default.sendEvent(event);\r\n    };\r\n    AWTLogger._getInternalEvent = function (event, apiKey, sanitizeProperties) {\r\n        var internalEvent = event;\r\n        internalEvent.id = Utils.newGuid();\r\n        internalEvent.apiKey = apiKey;\r\n        internalEvent.properties = internalEvent.properties || {};\r\n        if (sanitizeProperties) {\r\n            // Event Properties \r\n            for (var name_3 in internalEvent.properties) {\r\n                if (internalEvent.properties.hasOwnProperty(name_3)) {\r\n                    internalEvent.properties[name_3] = Utils.sanitizeProperty(name_3, internalEvent.properties[name_3]);\r\n                    if (internalEvent.properties[name_3] === null) {\r\n                        delete internalEvent.properties[name_3];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return internalEvent;\r\n    };\r\n    AWTLogger._getInitId = function (apiKey) {\r\n        return AWTLogger._initIdMap[apiKey];\r\n    };\r\n    AWTLogger._getSequenceId = function (apiKey) {\r\n        if (AWTLogger._sequenceIdMap[apiKey] === undefined) {\r\n            AWTLogger._sequenceIdMap[apiKey] = 0;\r\n        }\r\n        return (++AWTLogger._sequenceIdMap[apiKey]).toString();\r\n    };\r\n    AWTLogger._sequenceIdMap = {};\r\n    AWTLogger._initIdMap = {};\r\n    return AWTLogger;\r\n}());\r\nexports.default = AWTLogger;\r\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTStatsManager.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Utils = __webpack_require__(1);\r\nvar AWTNotificationManager_1 = __webpack_require__(2);\r\nvar Enums_1 = __webpack_require__(0);\r\nvar StatsTimer = 60000;\r\n/**\r\n* Class that manages the stats.\r\n*/\r\nvar AWTStatsManager = /** @class */ (function () {\r\n    function AWTStatsManager() {\r\n    }\r\n    /**\r\n     * Intiailizes the stats collection.\r\n     * @param {function} sendStats - The function to call when the stats are ready to be sent.\r\n     */\r\n    AWTStatsManager.initialize = function (sendStats) {\r\n        var _this = this;\r\n        this._sendStats = sendStats;\r\n        this._isInitalized = true;\r\n        AWTNotificationManager_1.default.addNotificationListener({\r\n            eventsSent: function (events) {\r\n                _this._addStat('records_sent_count', events.length, events[0].apiKey);\r\n            },\r\n            eventsDropped: function (events, reason) {\r\n                switch (reason) {\r\n                    case Enums_1.AWTEventsDroppedReason.NonRetryableStatus:\r\n                        _this._addStat('d_send_fail', events.length, events[0].apiKey);\r\n                        _this._addStat('records_dropped_count', events.length, events[0].apiKey);\r\n                        break;\r\n                    case Enums_1.AWTEventsDroppedReason.QueueFull:\r\n                        _this._addStat('d_queue_full', events.length, events[0].apiKey);\r\n                        break;\r\n                }\r\n            },\r\n            eventsRejected: function (events, reason) {\r\n                switch (reason) {\r\n                    case Enums_1.AWTEventsRejectedReason.InvalidEvent:\r\n                        _this._addStat('r_inv', events.length, events[0].apiKey);\r\n                        break;\r\n                    case Enums_1.AWTEventsRejectedReason.KillSwitch:\r\n                        _this._addStat('r_kl', events.length, events[0].apiKey);\r\n                        break;\r\n                    case Enums_1.AWTEventsRejectedReason.SizeLimitExceeded:\r\n                        _this._addStat('r_size', events.length, events[0].apiKey);\r\n                        break;\r\n                }\r\n                _this._addStat('r_count', events.length, events[0].apiKey);\r\n            },\r\n            eventsRetrying: null\r\n        });\r\n        setTimeout(function () { return _this.flush(); }, StatsTimer);\r\n    };\r\n    /**\r\n     * Flush the current stats and stop the stats collection.\r\n     */\r\n    AWTStatsManager.teardown = function () {\r\n        if (this._isInitalized) {\r\n            this.flush();\r\n            this._isInitalized = false;\r\n        }\r\n    };\r\n    /**\r\n     * Increments the stat for event received.\r\n     * @param {string} apiKey - The apiKey for which the event was received\r\n     */\r\n    AWTStatsManager.eventReceived = function (apiKey) {\r\n        AWTStatsManager._addStat('records_received_count', 1, apiKey);\r\n    };\r\n    /**\r\n     * Creates an event for each tenant token which had a stat and calls the\r\n     * sendStats for that token.\r\n     */\r\n    AWTStatsManager.flush = function () {\r\n        var _this = this;\r\n        if (this._isInitalized) {\r\n            for (var tenantId in this._stats) {\r\n                if (this._stats.hasOwnProperty(tenantId)) {\r\n                    this._sendStats(this._stats[tenantId], tenantId);\r\n                }\r\n            }\r\n            this._stats = {};\r\n            setTimeout(function () { return _this.flush(); }, StatsTimer);\r\n        }\r\n    };\r\n    AWTStatsManager._addStat = function (statName, value, apiKey) {\r\n        if (this._isInitalized && apiKey !== Utils.StatsApiKey) {\r\n            var tenantId = Utils.getTenantId(apiKey);\r\n            if (!this._stats[tenantId]) {\r\n                this._stats[tenantId] = {};\r\n            }\r\n            if (!this._stats[tenantId][statName]) {\r\n                this._stats[tenantId][statName] = value;\r\n            }\r\n            else {\r\n                this._stats[tenantId][statName] = this._stats[tenantId][statName] + value;\r\n            }\r\n        }\r\n    };\r\n    AWTStatsManager._isInitalized = false;\r\n    AWTStatsManager._stats = {};\r\n    return AWTStatsManager;\r\n}());\r\nexports.default = AWTStatsManager;\r\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTSerializer.ts\r\n* @author Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Bond = __webpack_require__(21);\r\nvar Enums_1 = __webpack_require__(0);\r\nvar AWTNotificationManager_1 = __webpack_require__(2);\r\nvar Utils = __webpack_require__(1);\r\nvar RequestSizeLimitBytes = 2936012; //approx 2.8 Mb\r\n/**\r\n* Class to handle serialization of event and request.\r\n* Currently uses Bond for serialization. Please note that this may be subject to change.\r\n*/\r\nvar AWTSerializer = /** @class */ (function () {\r\n    function AWTSerializer() {\r\n    }\r\n    /**\r\n     * Serialies a request using Bond.\r\n     * @param {object} requestDictionary - A dictionary containing the token to event mapping.\r\n     * @param {number} tokenCount        - Number of tenant tokens to be sent in the request.\r\n     * @return {number[]} The serialized bond request.\r\n     */\r\n    AWTSerializer.getPayloadBlob = function (requestDictionary, tokenCount) {\r\n        var requestFull = false;\r\n        var remainingRequest;\r\n        var stream = new Bond.IO.MemoryStream();\r\n        var writer = new Bond.CompactBinaryProtocolWriter(stream);\r\n        //Write TokenToDataPackagesMap\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 3, null);\r\n        writer._WriteMapContainerBegin(tokenCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_LIST);\r\n        for (var token in requestDictionary) {\r\n            if (!requestFull) {\r\n                if (requestDictionary.hasOwnProperty(token)) {\r\n                    //write token\r\n                    writer._WriteString(token);\r\n                    var dataPackage = requestDictionary[token];\r\n                    // Write list of DataPackages\r\n                    writer._WriteContainerBegin(1, Bond._BondDataType._BT_STRUCT);\r\n                    // Source\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 2, null);\r\n                    writer._WriteString('act_default_source');\r\n                    // DataPackageId\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 5, null);\r\n                    writer._WriteString(Utils.newGuid());\r\n                    // Timestamp\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT64, 6, null);\r\n                    writer._WriteInt64(Utils.numberToBondInt64(Date.now()));\r\n                    // Records\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_LIST, 8, null);\r\n                    //Advance position by 1 for the elementy type which is always struct\r\n                    var dpSizePos = stream._GetBuffer().length + 1;\r\n                    writer._WriteContainerBegin(requestDictionary[token].length, Bond._BondDataType._BT_STRUCT);\r\n                    var dpSizeSerialized = stream._GetBuffer().length - dpSizePos;\r\n                    for (var i = 0; i < dataPackage.length; ++i) {\r\n                        var currentStreamPos = stream._GetBuffer().length;\r\n                        this.writeEvent(dataPackage[i], writer);\r\n                        if (stream._GetBuffer().length - currentStreamPos > RequestSizeLimitBytes) {\r\n                            //single event too big\r\n                            AWTNotificationManager_1.default.eventsRejected([dataPackage[i]], Enums_1.AWTEventsRejectedReason.SizeLimitExceeded);\r\n                            //move i one place back so that we can evaluate the next element once we delete the current element at pos i\r\n                            dataPackage.splice(i--, 1);\r\n                            stream._GetBuffer().splice(currentStreamPos);\r\n                            //Bond serialization to change the datapackage length since we couldnt send this event\r\n                            this._addNewDataPackageSize(dataPackage.length, stream, dpSizeSerialized, dpSizePos);\r\n                            continue;\r\n                        }\r\n                        if (stream._GetBuffer().length > RequestSizeLimitBytes) {\r\n                            //Adding this event exceeded the max request size. We should rever this event and send the serialized request.\r\n                            //The remaining events should be returned to send in a separate request.\r\n                            stream._GetBuffer().splice(currentStreamPos);\r\n                            if (!remainingRequest) {\r\n                                remainingRequest = {};\r\n                            }\r\n                            requestDictionary[token] = dataPackage.splice(0, i);\r\n                            remainingRequest[token] = dataPackage;\r\n                            this._addNewDataPackageSize(requestDictionary[token].length, stream, dpSizeSerialized, dpSizePos);\r\n                            break;\r\n                        }\r\n                    }\r\n                    writer._WriteStructEnd(false);\r\n                }\r\n            }\r\n            else {\r\n                if (!remainingRequest) {\r\n                    remainingRequest = {};\r\n                }\r\n                remainingRequest[token] = requestDictionary[token];\r\n                delete requestDictionary[token];\r\n            }\r\n        }\r\n        // End ClientCollector\r\n        writer._WriteStructEnd(false);\r\n        return { payloadBlob: stream._GetBuffer(), remainingRequest: remainingRequest };\r\n    };\r\n    AWTSerializer._addNewDataPackageSize = function (size, stream, oldDpSize, streamPos) {\r\n        //Bond serialization to change the datapackage length since we couldnt send everything\r\n        var newRecordCountSerialized = Bond._Encoding._Varint_GetBytes(Bond.Number._ToUInt32(size));\r\n        for (var j = 0; j < oldDpSize; ++j) {\r\n            if (j < newRecordCountSerialized.length) {\r\n                stream._GetBuffer()[streamPos + j] = newRecordCountSerialized[j];\r\n            }\r\n            else {\r\n                stream._GetBuffer().slice(streamPos + j, oldDpSize - j);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Bond serialize the event.\r\n     * @param {object} eventData - The event that needs to be serialized.\r\n     * @return {number[]} The serialized bond event.\r\n     */\r\n    AWTSerializer.writeEvent = function (eventData, writer) {\r\n        // ID\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 1, null);\r\n        writer._WriteString(eventData.id);\r\n        // Timestamp\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_INT64, 3, null);\r\n        writer._WriteInt64(Utils.numberToBondInt64(eventData.timestamp));\r\n        // Type\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 5, null);\r\n        writer._WriteString(eventData.type);\r\n        // Event Type\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 6, null);\r\n        writer._WriteString(eventData.name);\r\n        var propsString = {};\r\n        var propStringCount = 0;\r\n        var propsInt64 = {};\r\n        var propInt64Count = 0;\r\n        var propsDouble = {};\r\n        var propDoubleCount = 0;\r\n        var propsBool = {};\r\n        var propBoolCount = 0;\r\n        var piiProps = {};\r\n        var piiPropCount = 0;\r\n        var ccProps = {};\r\n        var ccPropCount = 0;\r\n        // Iterate across event data properties and separate based on pii\r\n        for (var key in eventData.properties) {\r\n            if (eventData.properties.hasOwnProperty(key)) {\r\n                var property = eventData.properties[key];\r\n                if (property.cc > 0) {\r\n                    ccProps[key] = property;\r\n                    ccPropCount++;\r\n                }\r\n                else if (property.pii > 0) {\r\n                    piiProps[key] = property;\r\n                    piiPropCount++;\r\n                }\r\n                else {\r\n                    switch (property.type) {\r\n                        case Enums_1.AWTPropertyType.String:\r\n                            propsString[key] = property.value;\r\n                            propStringCount++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Int64:\r\n                            propsInt64[key] = property.value;\r\n                            propInt64Count++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Double:\r\n                            propsDouble[key] = property.value;\r\n                            propDoubleCount++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Boolean:\r\n                            propsBool[key] = property.value;\r\n                            propBoolCount++;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //Extension map\r\n        if (propStringCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 13, null);\r\n            writer._WriteMapContainerBegin(propStringCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRING);\r\n            for (var key in propsString) {\r\n                if (propsString.hasOwnProperty(key)) {\r\n                    var value = propsString[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteString(value.toString());\r\n                }\r\n            }\r\n        }\r\n        // Pii\r\n        if (piiPropCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 30, null);\r\n            writer._WriteMapContainerBegin(piiPropCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRUCT);\r\n            for (var key in piiProps) {\r\n                if (piiProps.hasOwnProperty(key)) {\r\n                    var property = piiProps[key];\r\n                    writer._WriteString(key);\r\n                    // PII Data\r\n                    // O365 scrubber type\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 1, null);\r\n                    writer._WriteInt32(1);\r\n                    // PII Kind\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 2, null);\r\n                    writer._WriteInt32(property.pii);\r\n                    // Value\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 3, null);\r\n                    writer._WriteString(property.value.toString());\r\n                    writer._WriteStructEnd(false);\r\n                }\r\n            }\r\n        }\r\n        // TypedExtensionBoolean map\r\n        if (propBoolCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 31, null);\r\n            writer._WriteMapContainerBegin(propBoolCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_BOOL);\r\n            for (var key in propsBool) {\r\n                if (propsBool.hasOwnProperty(key)) {\r\n                    var value = propsBool[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteBool(value);\r\n                }\r\n            }\r\n        }\r\n        //TypedExtensionInt64 map\r\n        if (propInt64Count) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 33, null);\r\n            writer._WriteMapContainerBegin(propInt64Count, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_INT64);\r\n            for (var key in propsInt64) {\r\n                if (propsInt64.hasOwnProperty(key)) {\r\n                    var value = propsInt64[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteInt64(Utils.numberToBondInt64(value));\r\n                }\r\n            }\r\n        }\r\n        //TypedExtensionDouble map\r\n        if (propDoubleCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 34, null);\r\n            writer._WriteMapContainerBegin(propDoubleCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_DOUBLE);\r\n            for (var key in propsDouble) {\r\n                if (propsDouble.hasOwnProperty(key)) {\r\n                    var value = propsDouble[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteDouble(value);\r\n                }\r\n            }\r\n        }\r\n        //CustomerContentExtensions map\r\n        if (ccPropCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 36, null);\r\n            writer._WriteMapContainerBegin(ccPropCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRUCT);\r\n            for (var key in ccProps) {\r\n                if (ccProps.hasOwnProperty(key)) {\r\n                    var property = ccProps[key];\r\n                    writer._WriteString(key);\r\n                    // CustomerContent Data\r\n                    // CustomerContentKind\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 1, null);\r\n                    writer._WriteInt32(property.cc);\r\n                    // RawContent\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 2, null);\r\n                    writer._WriteString(property.value.toString());\r\n                    writer._WriteStructEnd(false);\r\n                }\r\n            }\r\n        }\r\n        writer._WriteStructEnd(false);\r\n    };\r\n    /**\r\n     * Base64 encode the given number[].\r\n     * @param {number[]} data - The data to be base64 encoded.\r\n     * @return {string} The base64 encoded data.\r\n     */\r\n    AWTSerializer.base64Encode = function (data) {\r\n        return Bond._Encoding._Base64_GetString(data);\r\n    };\r\n    return AWTSerializer;\r\n}());\r\nexports.default = AWTSerializer;\r\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Version.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2018\r\n* File for SDK version.\r\n*/\r\nexports.Version = '1.6.2';\r\nexports.FullVersionString = 'AWT-Web-JS-' + exports.Version;\r\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = __webpack_require__(0);\r\nvar Enums_2 = __webpack_require__(4);\r\nvar AWTLogManagerSettings_1 = __webpack_require__(15);\r\nvar AWTLogger_1 = __webpack_require__(10);\r\nvar AWTTransmissionManagerCore_1 = __webpack_require__(3);\r\nvar AWTNotificationManager_1 = __webpack_require__(2);\r\nvar AWTAutoCollection_1 = __webpack_require__(8);\r\n/**\r\n* The AWTLogManager class manages the Aria SDK.\r\n*/\r\nvar AWTLogManager = /** @class */ (function () {\r\n    function AWTLogManager() {\r\n    }\r\n    /**\r\n    * Initializes the log manager. After this method is called, events are\r\n    * accepted for transmission.\r\n    * @param {string} tenantToken - A string that contains the default tenant token.\r\n    * @param {object} config      - [Optional] Configuration settings for initialize, as an AWTLogConfiguration object.\r\n    */\r\n    AWTLogManager.initialize = function (tenantToken, configuration) {\r\n        if (configuration === void 0) { configuration = {}; }\r\n        if (this._isInitialized) {\r\n            return;\r\n        }\r\n        this._isInitialized = true;\r\n        AWTLogManagerSettings_1.default.defaultTenantToken = tenantToken;\r\n        this._overrideValuesFromConfig(configuration);\r\n        if (this._config.disableCookiesUsage && !this._config.propertyStorageOverride) {\r\n            AWTLogManagerSettings_1.default.sessionEnabled = false;\r\n        }\r\n        AWTAutoCollection_1.default.addPropertyStorageOverride(this._config.propertyStorageOverride);\r\n        AWTAutoCollection_1.default.autoCollect(AWTLogManagerSettings_1.default.semanticContext, this._config.disableCookiesUsage, this._config.userAgent);\r\n        //Create sender\r\n        AWTTransmissionManagerCore_1.default.initialize(this._config);\r\n        AWTLogManagerSettings_1.default.loggingEnabled = true;\r\n        //Autolog session events for browsers\r\n        if (this._config.enableAutoUserSession) {\r\n            this.getLogger().logSession(Enums_2.AWTSessionState.Started);\r\n            window.addEventListener('beforeunload', this.flushAndTeardown);\r\n        }\r\n        return this.getLogger();\r\n    };\r\n    /**\r\n     * Gets the global semantic context.\r\n     *\r\n     * @return A AWTSemanticContext object, through which you can set common semantic properties.\r\n     */\r\n    AWTLogManager.getSemanticContext = function () {\r\n        return AWTLogManagerSettings_1.default.semanticContext;\r\n    };\r\n    /**\r\n     * Asynchronously sends events currently in the queue. New events added\r\n     * are sent after the current flush finishes. The passed callback is\r\n     * called when flush finishes. <b>Note:</b> If LogManager is paused, or if\r\n     * flush is called again in less than 30 seconds, then flush is no-op, and\r\n     * the callback is not called.\r\n     * @param {function} callback - The function that is called when flush finishes.\r\n     */\r\n    AWTLogManager.flush = function (callback) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.flush(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Prevents new events from being added for transmission. It also batches all\r\n     * events currently in the queue, and creates requests for them to be sent. If\r\n     * HTML5 Beacons are supported, then they will be used.\r\n     */\r\n    AWTLogManager.flushAndTeardown = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            if (this._config.enableAutoUserSession) {\r\n                this.getLogger().logSession(Enums_2.AWTSessionState.Ended);\r\n            }\r\n            AWTTransmissionManagerCore_1.default.flushAndTeardown();\r\n            AWTLogManagerSettings_1.default.loggingEnabled = false;\r\n            this._isDestroyed = true;\r\n        }\r\n    };\r\n    /**\r\n     * Pasues the transmission of events.\r\n     */\r\n    AWTLogManager.pauseTransmission = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.pauseTransmission();\r\n        }\r\n    };\r\n    /**\r\n     * Resumes the tranmission of events.\r\n     */\r\n    AWTLogManager.resumeTransmision = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.resumeTransmision();\r\n        }\r\n    };\r\n    /**\r\n     * Sets the transmit profile. This changes the transmission timers\r\n     * based on the transmit profile.\r\n     * @param {string} profileName - A string that contains the name of the transmit profile.\r\n     */\r\n    AWTLogManager.setTransmitProfile = function (profileName) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.setTransmitProfile(profileName);\r\n        }\r\n    };\r\n    /**\r\n     * Loads custom transmission profiles. Each profile should have timers for\r\n     * high, normal, and low. Each profile should make sure\r\n     * that a each priority timer is a multiple of the priority higher than it.\r\n     * Setting the timer value to <i>-1</i> means the events for that priority will\r\n     * not be sent. Note that once a priority has been set to <i>not send</i>, then all priorities\r\n     * below it will also not be sent. The timers should be in the form of [low, normal, high].\r\n     * E.g, <i>Custom: [30,10,5]</i>.\r\n     * This method removes any previously loaded custom profiles.\r\n     * @param {object} profiles - A dictionary that contains the transmit profiles.\r\n     */\r\n    AWTLogManager.loadTransmitProfiles = function (profiles) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.loadTransmitProfiles(profiles);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the context sent with every event.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.setContext = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setProperty(name, value, type);\r\n    };\r\n    /**\r\n     * Sets the context sents with every event, and tags it as PII.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} pii                    - The kind of PII for the context property.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.setContextWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setPropertyWithPii(name, value, pii, type);\r\n    };\r\n    /**\r\n     * Sets the context sent with every event from this logger, and tags it as <i>customer content</i>.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} customerContent        - The kind of customer content for the context property, as one of the\r\n     * AWTCustomerContentKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.setContextWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setPropertyWithCustomerContent(name, value, customerContent, type);\r\n    };\r\n    /**\r\n     * Gets the logger for the specified tenant token.\r\n     * @param {string} tenantToken - A string that contains the tenant token.\r\n     * @return An AWTLogger object which sends data with the specified tenant token. If the tenant token is\r\n     * undefined, or null, or empty, then undefined is returned.\r\n     */\r\n    AWTLogManager.getLogger = function (tenantToken) {\r\n        var key = tenantToken;\r\n        if (!key || key === AWTLogManagerSettings_1.default.defaultTenantToken) {\r\n            key = '';\r\n        }\r\n        if (!this._loggers[key]) {\r\n            this._loggers[key] = new AWTLogger_1.default(key);\r\n        }\r\n        return this._loggers[key];\r\n    };\r\n    /**\r\n     * Adds a notification listener. The Aria SDK calls methods on the listener\r\n     * when an appropriate notification is raised.\r\n     * @param {object} listener - An AWTNotificationListener object.\r\n     */\r\n    AWTLogManager.addNotificationListener = function (listener) {\r\n        AWTNotificationManager_1.default.addNotificationListener(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {object} listener - AWTNotificationListener to remove.\r\n     */\r\n    AWTLogManager.removeNotificationListener = function (listener) {\r\n        AWTNotificationManager_1.default.removeNotificationListener(listener);\r\n    };\r\n    AWTLogManager._overrideValuesFromConfig = function (config) {\r\n        if (config.collectorUri) {\r\n            this._config.collectorUri = config.collectorUri;\r\n        }\r\n        if (config.cacheMemorySizeLimitInNumberOfEvents > 0) {\r\n            this._config.cacheMemorySizeLimitInNumberOfEvents = config.cacheMemorySizeLimitInNumberOfEvents;\r\n        }\r\n        if (config.httpXHROverride && config.httpXHROverride.sendPOST) {\r\n            this._config.httpXHROverride = config.httpXHROverride;\r\n        }\r\n        if (config.propertyStorageOverride && config.propertyStorageOverride.getProperty &&\r\n            config.propertyStorageOverride.setProperty) {\r\n            this._config.propertyStorageOverride = config.propertyStorageOverride;\r\n        }\r\n        if (config.userAgent) {\r\n            this._config.userAgent = config.userAgent;\r\n        }\r\n        if (config.disableCookiesUsage) {\r\n            this._config.disableCookiesUsage = config.disableCookiesUsage;\r\n        }\r\n        if (config.canSendStatEvent) {\r\n            this._config.canSendStatEvent = config.canSendStatEvent;\r\n        }\r\n        if (config.enableAutoUserSession && typeof window !== 'undefined' && window.addEventListener) {\r\n            this._config.enableAutoUserSession = config.enableAutoUserSession;\r\n        }\r\n    };\r\n    AWTLogManager._loggers = {};\r\n    AWTLogManager._isInitialized = false;\r\n    AWTLogManager._isDestroyed = false;\r\n    AWTLogManager._config = {\r\n        collectorUri: 'https://browser.pipe.aria.microsoft.com/Collector/3.0/',\r\n        cacheMemorySizeLimitInNumberOfEvents: 10000,\r\n        disableCookiesUsage: false,\r\n        canSendStatEvent: function (eventName) { return true; }\r\n    };\r\n    return AWTLogManager;\r\n}());\r\nexports.default = AWTLogManager;\r\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTLogManagerSettings.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar AWTEventProperties_1 = __webpack_require__(5);\r\nvar AWTSemanticContext_1 = __webpack_require__(7);\r\n/**\r\n* Class that stores LogManagers context.\r\n*/\r\nvar AWTLogManagerSettings = /** @class */ (function () {\r\n    function AWTLogManagerSettings() {\r\n    }\r\n    AWTLogManagerSettings.logManagerContext = new AWTEventProperties_1.default();\r\n    AWTLogManagerSettings.sessionEnabled = true;\r\n    AWTLogManagerSettings.loggingEnabled = false;\r\n    AWTLogManagerSettings.defaultTenantToken = '';\r\n    AWTLogManagerSettings.semanticContext = new AWTSemanticContext_1.default(true, AWTLogManagerSettings.logManagerContext);\r\n    return AWTLogManagerSettings;\r\n}());\r\nexports.default = AWTLogManagerSettings;\r\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nexports.__esModule = true;\r\nvar logger_1 = __webpack_require__(17);\r\nvar ARIA_SCRIPT = document.getElementById('ARIA-LOG');\r\nconsole.assert(!!ARIA_SCRIPT, 'the element with id=\"ARIA-LOG\" NOT exist in this document');\r\nvar CONFIG = document.getElementById('ARIA-LOG').dataset;\r\nvar TOKEN = CONFIG.token;\r\nvar LEVEL = (CONFIG.level || 'warn').toLocaleLowerCase();\r\nvar CORELATION_ID = CONFIG.corelation || ((new Date).getTime() + '-' + Math.random());\r\nvar APP_NAME = CONFIG.appname || location.hostname;\r\nvar LOG_TABLE = (CONFIG.table || APP_NAME).replace(/[^\\w\\d]/g, '');\r\nvar VERBOSE = 'debug' in CONFIG ? CONFIG['debug'].toLowerCase() === \"true\" : true;\r\nconsole.assert(TOKEN && TOKEN.length > 0, 'data-token=\"token string\" MUST have an value');\r\nconsole.assert(LOG_TABLE.length >= 4, 'the table name MUST be 4-100 alphanumeric chars');\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"all\"] = 0] = \"all\";\r\n    LogLevel[LogLevel[\"trace\"] = 10] = \"trace\";\r\n    LogLevel[LogLevel[\"debug\"] = 20] = \"debug\";\r\n    LogLevel[LogLevel[\"info\"] = 400] = \"info\";\r\n    LogLevel[LogLevel[\"warn\"] = 500] = \"warn\";\r\n    LogLevel[LogLevel[\"error\"] = 600] = \"error\";\r\n    LogLevel[LogLevel[\"critical\"] = 700] = \"critical\";\r\n    LogLevel[LogLevel[\"alert\"] = 800] = \"alert\";\r\n})(LogLevel || (LogLevel = {}));\r\nvar _originConsole = {\r\n    log: console.log\r\n};\r\nfunction Log(level, action, content, attrs) {\r\n    var data = {\r\n        action: action,\r\n        title: document.title,\r\n        url: document.URL\r\n    };\r\n    for (var key in attrs) {\r\n        data[key] = attrs[key];\r\n    }\r\n    data.content = typeof content === 'object' ? JSON.stringify(content) : content;\r\n    if (level === \"telemetry\") {\r\n        logger_1.telemetry(data);\r\n    }\r\n    else if (!LEVEL || (LogLevel[level] >= LogLevel[LEVEL])) {\r\n        data.level = level;\r\n        logger_1.log(data);\r\n    }\r\n}\r\n;\r\nlogger_1.init(TOKEN, APP_NAME, LOG_TABLE, {\r\n    corelationId: CORELATION_ID,\r\n    userId: CONFIG.userid,\r\n    subscribeId: CONFIG.subid\r\n});\r\nconsole.log = function () {\r\n    if (VERBOSE) {\r\n        _originConsole.log.apply(console, arguments);\r\n    }\r\n    if (arguments.length > 1 && arguments.length < 3) {\r\n        Log.apply(null, arguments);\r\n    }\r\n};\r\n['info', 'debug', 'warn', 'error'].forEach(function (key) {\r\n    _originConsole[key] = console[key];\r\n    console[key] = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (VERBOSE) {\r\n            _originConsole[key].apply(null, args);\r\n        }\r\n        if (args.length && args.length < 3) {\r\n            args.unshift(key);\r\n            Log.apply(Log, args);\r\n        }\r\n    };\r\n});\r\nif (CONFIG.flush === \"true\") {\r\n    window.onbeforeunload = logger_1.flush;\r\n}\r\nwindow.onerror = function (msg, url, line, col, error) {\r\n    Log('error', msg, error, {\r\n        file: url,\r\n        line: line,\r\n        col: col\r\n    });\r\n};\r\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nexports.__esModule = true;\r\nvar webjs_sdk_1 = __webpack_require__(18);\r\nvar _logger;\r\nvar _token;\r\nvar _name = \"logging\";\r\nvar _table;\r\nvar _config = {};\r\nfunction getLogger() {\r\n    if (!_logger) {\r\n        webjs_sdk_1.AWTLogManager.initialize(_token);\r\n        _logger = webjs_sdk_1.AWTLogManager.getLogger();\r\n        _logger.setContext(\"AppName\", _name);\r\n        _logger.setContext(\"UserAgent\", navigator.userAgent);\r\n        for (var key in _config) {\r\n            _logger.setContext(key, _config[key]);\r\n        }\r\n    }\r\n    return _logger;\r\n}\r\nfunction init(token, name, table, config) {\r\n    _token = token;\r\n    _name = name;\r\n    _table = table;\r\n    for (var key in config) {\r\n        config[key] = config[key];\r\n    }\r\n}\r\nexports.init = init;\r\nfunction log(data) {\r\n    return getLogger().logEvent({\r\n        name: _table || _name,\r\n        properties: data\r\n    });\r\n}\r\nexports.log = log;\r\nfunction telemetry(data) {\r\n    return getLogger().logEvent({\r\n        name: 'telemetry',\r\n        properties: data\r\n    });\r\n}\r\nexports.telemetry = telemetry;\r\nfunction flush() {\r\n    if (_logger) {\r\n        webjs_sdk_1.AWTLogManager.flushAndTeardown();\r\n        _logger = null;\r\n    }\r\n    return true;\r\n}\r\nexports.flush = flush;\r\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AriaSDK.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File to export public classes, interfaces and enums.\r\n*/\r\nvar Enums_1 = __webpack_require__(0);\r\nexports.AWTPropertyType = Enums_1.AWTPropertyType;\r\nexports.AWTPiiKind = Enums_1.AWTPiiKind;\r\nexports.AWTEventPriority = Enums_1.AWTEventPriority;\r\nexports.AWTEventsDroppedReason = Enums_1.AWTEventsDroppedReason;\r\nexports.AWTEventsRejectedReason = Enums_1.AWTEventsRejectedReason;\r\nexports.AWTCustomerContentKind = Enums_1.AWTCustomerContentKind;\r\nvar Enums_2 = __webpack_require__(4);\r\nexports.AWTUserIdType = Enums_2.AWTUserIdType;\r\nexports.AWTSessionState = Enums_2.AWTSessionState;\r\nvar DataModels_1 = __webpack_require__(9);\r\nexports.AWT_BEST_EFFORT = DataModels_1.AWT_BEST_EFFORT;\r\nexports.AWT_NEAR_REAL_TIME = DataModels_1.AWT_NEAR_REAL_TIME;\r\nexports.AWT_REAL_TIME = DataModels_1.AWT_REAL_TIME;\r\nvar AWTEventProperties_1 = __webpack_require__(5);\r\nexports.AWTEventProperties = AWTEventProperties_1.default;\r\nvar AWTLogger_1 = __webpack_require__(10);\r\nexports.AWTLogger = AWTLogger_1.default;\r\nvar AWTLogManager_1 = __webpack_require__(14);\r\nexports.AWTLogManager = AWTLogManager_1.default;\r\nvar AWTTransmissionManager_1 = __webpack_require__(31);\r\nexports.AWTTransmissionManager = AWTTransmissionManager_1.default;\r\nvar AWTSerializer_1 = __webpack_require__(12);\r\nexports.AWTSerializer = AWTSerializer_1.default;\r\nvar AWTSemanticContext_1 = __webpack_require__(7);\r\nexports.AWTSemanticContext = AWTSemanticContext_1.default;\r\nexports.AWT_COLLECTOR_URL_UNITED_STATES = 'https://us.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_GERMANY = 'https://de.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_JAPAN = 'https://jp.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_AUSTRALIA = 'https://au.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_EUROPE = 'https://eu.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_USGOV_DOD = 'https://pf.pipe.aria.microsoft.com/Collector/3.0';\r\nexports.AWT_COLLECTOR_URL_USGOV_DOJ = 'https://tb.pipe.aria.microsoft.com/Collector/3.0';\r\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = __webpack_require__(0);\r\nvar AWTHttpManager_1 = __webpack_require__(20);\r\nvar AWTTransmissionManagerCore_1 = __webpack_require__(3);\r\nvar AWTRecordBatcher_1 = __webpack_require__(30);\r\nvar AWTNotificationManager_1 = __webpack_require__(2);\r\nvar UploadNowCheckTimer = 250;\r\nvar MaxNumberEventPerBatch = 500;\r\nvar MaxSendAttempts = 6;\r\n/**\r\n * Class that manages adding events to inbound queues and batching of events\r\n * into requests.\r\n */\r\nvar AWTQueueManager = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {string} collectorUrl - The collector url to which the requests must be sent.\r\n     */\r\n    function AWTQueueManager(collectorUrl, _queueSizeLimit, xhrOverride) {\r\n        this._queueSizeLimit = _queueSizeLimit;\r\n        this._isCurrentlyUploadingNow = false;\r\n        this._uploadNowQueue = [];\r\n        this._shouldDropEventsOnPause = false;\r\n        this._paused = false;\r\n        this._queueSize = 0;\r\n        this._outboundQueue = [];\r\n        this._inboundQueues = {};\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High] = [];\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal] = [];\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low] = [];\r\n        this._addEmptyQueues();\r\n        this._batcher = new AWTRecordBatcher_1.default(this._outboundQueue, MaxNumberEventPerBatch);\r\n        this._httpManager = new AWTHttpManager_1.default(this._outboundQueue, collectorUrl, this, xhrOverride);\r\n    }\r\n    /**\r\n     * Add an event to the appropriate inbound queue based on its priority.\r\n     * @param {object} event - The event to be added to the queue.\r\n     */\r\n    AWTQueueManager.prototype.addEvent = function (event) {\r\n        if (event.priority === Enums_1.AWTEventPriority.Immediate_sync) {\r\n            //Log event synchronously\r\n            this._httpManager.sendSynchronousRequest(this._batcher.addEventToBatch(event), event.apiKey);\r\n        }\r\n        else if (this._queueSize < this._queueSizeLimit) {\r\n            this._addEventToProperQueue(event);\r\n        }\r\n        else {\r\n            //Drop old event from lower or equal priority\r\n            if (this._dropEventWithPriorityOrLess(event.priority)) {\r\n                this._addEventToProperQueue(event);\r\n            }\r\n            else {\r\n                //Can't drop events from current queues because the all the slots are taken by queues that are being flushed.\r\n                AWTNotificationManager_1.default.eventsDropped([event], Enums_1.AWTEventsDroppedReason.QueueFull);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Batch and send events currently in the queue for the given priority.\r\n     * @param {enum} priority - Priority for which to send events.\r\n     */\r\n    AWTQueueManager.prototype.sendEventsForPriorityAndAbove = function (priority) {\r\n        this._batchEvents(priority);\r\n        this._httpManager.sendQueuedRequests();\r\n    };\r\n    /**\r\n     * Check if the inbound queues or batcher has any events that can be sent presently.\r\n     * @return {boolean} True if there are events, false otherwise.\r\n     */\r\n    AWTQueueManager.prototype.hasEvents = function () {\r\n        return (this._inboundQueues[Enums_1.AWTEventPriority.High][0].length > 0 || this._inboundQueues[Enums_1.AWTEventPriority.Normal][0].length > 0\r\n            || this._inboundQueues[Enums_1.AWTEventPriority.Low][0].length > 0 || this._batcher.hasBatch())\r\n            && this._httpManager.hasIdleConnection();\r\n    };\r\n    /**\r\n     * Add back the events from a failed request back to the queue.\r\n     * @param {object} request - The request whose events need to be added back to the batcher.\r\n     */\r\n    AWTQueueManager.prototype.addBackRequest = function (request) {\r\n        if (!this._paused || !this._shouldDropEventsOnPause) {\r\n            for (var token in request) {\r\n                if (request.hasOwnProperty(token)) {\r\n                    for (var i = 0; i < request[token].length; ++i) {\r\n                        if (request[token][i].sendAttempt < MaxSendAttempts) {\r\n                            this.addEvent(request[token][i]);\r\n                        }\r\n                        else {\r\n                            AWTNotificationManager_1.default.eventsDropped([request[token][i]], Enums_1.AWTEventsDroppedReason.NonRetryableStatus);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Batch all current events in the queues and send them.\r\n     */\r\n    AWTQueueManager.prototype.teardown = function () {\r\n        if (!this._paused) {\r\n            this._batchEvents(Enums_1.AWTEventPriority.Low);\r\n            this._httpManager.teardown();\r\n        }\r\n    };\r\n    /**\r\n     * Sends events for all priority for the current inbound queue.\r\n     * This method adds new inbound queues to which new events will be added.\r\n     * @param {function} callback - The function to be called when uploadNow is finished.\r\n     */\r\n    AWTQueueManager.prototype.uploadNow = function (callback) {\r\n        var _this = this;\r\n        this._addEmptyQueues();\r\n        if (!this._isCurrentlyUploadingNow) {\r\n            this._isCurrentlyUploadingNow = true;\r\n            setTimeout(function () { return _this._uploadNow(callback); }, 0);\r\n        }\r\n        else {\r\n            this._uploadNowQueue.push(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Pause the tranmission of any requests\r\n     */\r\n    AWTQueueManager.prototype.pauseTransmission = function () {\r\n        this._paused = true;\r\n        this._httpManager.pause();\r\n        if (this.shouldDropEventsOnPause) {\r\n            this._queueSize -= (this._inboundQueues[Enums_1.AWTEventPriority.High][0].length +\r\n                this._inboundQueues[Enums_1.AWTEventPriority.Normal][0].length + this._inboundQueues[Enums_1.AWTEventPriority.Low][0].length);\r\n            this._inboundQueues[Enums_1.AWTEventPriority.High][0] = [];\r\n            this._inboundQueues[Enums_1.AWTEventPriority.Normal][0] = [];\r\n            this._inboundQueues[Enums_1.AWTEventPriority.Low][0] = [];\r\n            this._httpManager.removeQueuedRequests();\r\n        }\r\n    };\r\n    /**\r\n     * Resumes transmission of events.\r\n     */\r\n    AWTQueueManager.prototype.resumeTransmission = function () {\r\n        this._paused = false;\r\n        this._httpManager.resume();\r\n    };\r\n    /**\r\n     * Determines whether events in the queues should be dropped when transmission is paused.\r\n     */\r\n    AWTQueueManager.prototype.shouldDropEventsOnPause = function (shouldDropEventsOnPause) {\r\n        this._shouldDropEventsOnPause = shouldDropEventsOnPause;\r\n    };\r\n    /**\r\n     * Remove the first queues for all priorities in the inbound queues map. This is called\r\n     * when transmission manager has finished flushing the events in the old queues. We now make\r\n     * the next queue the primary queue.\r\n     */\r\n    AWTQueueManager.prototype._removeFirstQueues = function () {\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High].shift();\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal].shift();\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low].shift();\r\n    };\r\n    /**\r\n     * Add empty queues for all priorities in the inbound queues map. This is called\r\n     * when Transmission Manager is being flushed. This ensures that new events added\r\n     * after flush are stored separately till we flush the current events.\r\n     */\r\n    AWTQueueManager.prototype._addEmptyQueues = function () {\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High].push([]);\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal].push([]);\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low].push([]);\r\n    };\r\n    AWTQueueManager.prototype._addEventToProperQueue = function (event) {\r\n        if (!this._paused || !this._shouldDropEventsOnPause) {\r\n            this._queueSize++;\r\n            this._inboundQueues[event.priority][this._inboundQueues[event.priority].length - 1].push(event);\r\n        }\r\n    };\r\n    AWTQueueManager.prototype._dropEventWithPriorityOrLess = function (priority) {\r\n        var currentPriority = Enums_1.AWTEventPriority.Low;\r\n        while (currentPriority <= priority) {\r\n            if (this._inboundQueues[currentPriority][this._inboundQueues[currentPriority].length - 1].length > 0) {\r\n                //Dropped oldest event from lowest possible priority\r\n                AWTNotificationManager_1.default.eventsDropped([this._inboundQueues[currentPriority][this._inboundQueues[currentPriority].length - 1].shift()], Enums_1.AWTEventsDroppedReason.QueueFull);\r\n                return true;\r\n            }\r\n            currentPriority++;\r\n        }\r\n        return false;\r\n    };\r\n    AWTQueueManager.prototype._batchEvents = function (priority) {\r\n        var priorityToProcess = Enums_1.AWTEventPriority.High;\r\n        while (priorityToProcess >= priority) {\r\n            while (this._inboundQueues[priorityToProcess][0].length > 0) {\r\n                var event_1 = this._inboundQueues[priorityToProcess][0].pop();\r\n                this._queueSize--;\r\n                this._batcher.addEventToBatch(event_1);\r\n            }\r\n            priorityToProcess--;\r\n        }\r\n        this._batcher.flushBatch();\r\n    };\r\n    AWTQueueManager.prototype._uploadNow = function (callback) {\r\n        var _this = this;\r\n        if (this.hasEvents()) {\r\n            this.sendEventsForPriorityAndAbove(Enums_1.AWTEventPriority.Low);\r\n        }\r\n        this._checkOutboundQueueEmptyAndSent(function () {\r\n            //Move the next queues to be primary\r\n            _this._removeFirstQueues();\r\n            if (callback !== null && callback !== undefined) {\r\n                callback();\r\n            }\r\n            if (_this._uploadNowQueue.length > 0) {\r\n                setTimeout(function () { return _this._uploadNow(_this._uploadNowQueue.shift()); }, 0);\r\n            }\r\n            else {\r\n                _this._isCurrentlyUploadingNow = false;\r\n                if (_this.hasEvents()) {\r\n                    AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    AWTQueueManager.prototype._checkOutboundQueueEmptyAndSent = function (callback) {\r\n        var _this = this;\r\n        if (this._httpManager.isCompletelyIdle()) {\r\n            callback();\r\n        }\r\n        else {\r\n            setTimeout(function () { return _this._checkOutboundQueueEmptyAndSent(callback); }, UploadNowCheckTimer);\r\n        }\r\n    };\r\n    return AWTQueueManager;\r\n}());\r\nexports.default = AWTQueueManager;\r\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = __webpack_require__(0);\r\nvar AWTSerializer_1 = __webpack_require__(12);\r\nvar AWTRetryPolicy_1 = __webpack_require__(27);\r\nvar AWTKillSwitch_1 = __webpack_require__(28);\r\nvar AWTClockSkewManager_1 = __webpack_require__(29);\r\nvar Version = __webpack_require__(13);\r\nvar Utils = __webpack_require__(1);\r\nvar AWTNotificationManager_1 = __webpack_require__(2);\r\nvar AWTTransmissionManagerCore_1 = __webpack_require__(3);\r\nvar MaxConnections = 2;\r\nvar MaxRetries = 1;\r\nvar Method = 'POST';\r\n/**\r\n * Class managing the sending of requests.\r\n */\r\nvar AWTHttpManager = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {object} requestQueue   - The queue that contains the requests to be sent.\r\n     * @param {string} collectorUrl   - The collector url to which the requests must be sent.\r\n     * @param {object} _queueManager  - The queue manager that we should add requests back to if needed.\r\n     * @param {object} _httpInterface - The http interface that should be used to send HTTP requests.\r\n     */\r\n    function AWTHttpManager(_requestQueue, collectorUrl, _queueManager, _httpInterface) {\r\n        var _this = this;\r\n        this._requestQueue = _requestQueue;\r\n        this._queueManager = _queueManager;\r\n        this._httpInterface = _httpInterface;\r\n        this._urlString = '?qsp=true&content-type=application%2Fbond-compact-binary&client-id=NO_AUTH&sdk-version='\r\n            + Version.FullVersionString;\r\n        this._killSwitch = new AWTKillSwitch_1.default();\r\n        this._paused = false;\r\n        this._clockSkewManager = new AWTClockSkewManager_1.default();\r\n        this._useBeacons = false;\r\n        this._activeConnections = 0;\r\n        if (!Utils.isUint8ArrayAvailable()) {\r\n            this._urlString += '&content-encoding=base64';\r\n        }\r\n        this._urlString = collectorUrl + this._urlString;\r\n        if (!this._httpInterface) {\r\n            this._useBeacons = !Utils.isReactNative(); //Only use beacons if not running in React Native\r\n            this._httpInterface = {\r\n                sendPOST: function (urlString, data, ontimeout, onerror, onload, sync) {\r\n                    if (Utils.useXDomainRequest()) {\r\n                        var xdr = new XDomainRequest();\r\n                        xdr.open(Method, urlString);\r\n                        //can't get the status code in xdr.\r\n                        xdr.onload = function () {\r\n                            // we will assume onload means the request succeeded.\r\n                            onload(200, null);\r\n                        };\r\n                        xdr.onerror = function () {\r\n                            // we will assume onerror means we need to drop the events.\r\n                            onerror(400, null);\r\n                        };\r\n                        xdr.ontimeout = function () {\r\n                            // we will assume ontimeout means we need to retry the events.\r\n                            ontimeout(500, null);\r\n                        };\r\n                        xdr.send(data);\r\n                    }\r\n                    else if (Utils.isReactNative()) {\r\n                        //Use the fetch API to send events in React Native\r\n                        fetch(urlString, {\r\n                            body: data,\r\n                            method: Method\r\n                        }).then(function (response) {\r\n                            var headerMap = {};\r\n                            if (response.headers) {\r\n                                response.headers.forEach(function (value, name) {\r\n                                    headerMap[name] = value;\r\n                                });\r\n                            }\r\n                            onload(response.status, headerMap);\r\n                        }).catch(function (error) {\r\n                            //In case there is an error in the request. Set the status to 0\r\n                            //so that the events can be retried later.\r\n                            onerror(0, {});\r\n                        });\r\n                    }\r\n                    else {\r\n                        var xhr_1 = new XMLHttpRequest();\r\n                        xhr_1.open(Method, urlString, !sync);\r\n                        xhr_1.onload = function () {\r\n                            onload(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.onerror = function () {\r\n                            onerror(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.ontimeout = function () {\r\n                            ontimeout(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.send(data);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Check if there is an idle connection overwhich we can send a request.\r\n     * @return {boolean} True if there is an idle connection, false otherwise.\r\n     */\r\n    AWTHttpManager.prototype.hasIdleConnection = function () {\r\n        return this._activeConnections < MaxConnections;\r\n    };\r\n    /**\r\n     * Send requests in the request queue up if there is an idle connection, sending is\r\n     * not pause and clock skew manager allows sending request.\r\n     */\r\n    AWTHttpManager.prototype.sendQueuedRequests = function () {\r\n        while (this.hasIdleConnection() && !this._paused && this._requestQueue.length > 0\r\n            && this._clockSkewManager.allowRequestSending()) {\r\n            this._activeConnections++;\r\n            this._sendRequest(this._requestQueue.shift(), 0, false);\r\n        }\r\n        //No more requests to send, tell TPM to try to schedule timer\r\n        //in case it was waiting for idle connections\r\n        if (this.hasIdleConnection()) {\r\n            AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Check if there are no active requests being sent.\r\n     * @return {boolean} True if idle, false otherwise.\r\n     */\r\n    AWTHttpManager.prototype.isCompletelyIdle = function () {\r\n        return this._activeConnections === 0;\r\n    };\r\n    /**\r\n     * Queue all the remaning requests to be sent. The requests will be\r\n     * sent using HTML5 Beacons if they are available.\r\n     */\r\n    AWTHttpManager.prototype.teardown = function () {\r\n        while (this._requestQueue.length > 0) {\r\n            this._sendRequest(this._requestQueue.shift(), 0, true);\r\n        }\r\n    };\r\n    /**\r\n     * Pause the sending of requests. No new requests will be sent.\r\n     */\r\n    AWTHttpManager.prototype.pause = function () {\r\n        this._paused = true;\r\n    };\r\n    /**\r\n     * Resume the sending of requests.\r\n     */\r\n    AWTHttpManager.prototype.resume = function () {\r\n        this._paused = false;\r\n        this.sendQueuedRequests();\r\n    };\r\n    /**\r\n     * Removes any pending requests to be sent.\r\n     */\r\n    AWTHttpManager.prototype.removeQueuedRequests = function () {\r\n        this._requestQueue.length = 0;\r\n    };\r\n    /**\r\n     * Sends a request synchronously to the Aria collector. This api is used to send\r\n     * a request containing a single immediate event.\r\n     *\r\n     * @param request - The request to be sent.\r\n     * @param token   - The token used to send the request.\r\n     */\r\n    AWTHttpManager.prototype.sendSynchronousRequest = function (request, token) {\r\n        //This will not take into account the max connections restriction. Since this is sync, we can \r\n        //only send one of this request at a time and thus should not worry about multiple connections \r\n        //being used to send synchronoush events.\r\n        if (this._paused) {\r\n            //If paused then convert to High priority. It will be added back to queue in _sendRequest\r\n            request[token][0].priority = Enums_1.AWTEventPriority.High;\r\n        }\r\n        //Increment active connection since we are still going to use a connection to send the request.\r\n        this._activeConnections++;\r\n        //For sync requests we will not wait for the clock skew. \r\n        this._sendRequest(request, 0, false, true);\r\n    };\r\n    AWTHttpManager.prototype._sendRequest = function (request, retryCount, isTeardown, isSynchronous) {\r\n        var _this = this;\r\n        if (isSynchronous === void 0) { isSynchronous = false; }\r\n        if (this._paused) {\r\n            this._activeConnections--;\r\n            this._queueManager.addBackRequest(request);\r\n            return;\r\n        }\r\n        var tokenCount = 0;\r\n        var apikey = '';\r\n        for (var token in request) {\r\n            if (request.hasOwnProperty(token)) {\r\n                if (!this._killSwitch.isTenantKilled(token)) {\r\n                    if (apikey.length > 0) {\r\n                        apikey += ',';\r\n                    }\r\n                    apikey += token;\r\n                    tokenCount++;\r\n                }\r\n                else {\r\n                    AWTNotificationManager_1.default.eventsRejected(request[token], Enums_1.AWTEventsRejectedReason.KillSwitch);\r\n                    delete request[token];\r\n                }\r\n            }\r\n        }\r\n        if (tokenCount > 0) {\r\n            var payloadResult = AWTSerializer_1.default.getPayloadBlob(request, tokenCount);\r\n            if (payloadResult.remainingRequest) {\r\n                this._requestQueue.push(payloadResult.remainingRequest);\r\n            }\r\n            var urlString = this._urlString + '&x-apikey=' + apikey + '&client-time-epoch-millis='\r\n                + Date.now().toString();\r\n            if (this._clockSkewManager.shouldAddClockSkewHeaders()) {\r\n                urlString = urlString + '&time-delta-to-apply-millis=' + this._clockSkewManager.getClockSkewHeaderValue();\r\n            }\r\n            var data = void 0;\r\n            if (!Utils.isUint8ArrayAvailable()) {\r\n                data = AWTSerializer_1.default.base64Encode(payloadResult.payloadBlob);\r\n            }\r\n            else {\r\n                data = new Uint8Array(payloadResult.payloadBlob);\r\n            }\r\n            for (var token in request) {\r\n                if (request.hasOwnProperty(token)) {\r\n                    //Increment the send attempt count\r\n                    for (var i = 0; i < request[token].length; ++i) {\r\n                        request[token][i].sendAttempt > 0 ? request[token][i].sendAttempt++ : request[token][i].sendAttempt = 1;\r\n                    }\r\n                }\r\n            }\r\n            //beacons will not be used if an http interface was passed by the customer\r\n            if (this._useBeacons && isTeardown && Utils.isBeaconsSupported()) {\r\n                if (navigator.sendBeacon(urlString, data)) {\r\n                    //Request sent via beacon.\r\n                    return;\r\n                }\r\n            }\r\n            //Send sync requests if the request is immediate or we are tearing down telemetry.\r\n            this._httpInterface.sendPOST(urlString, data, function (status, headers) {\r\n                _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount, isTeardown, isSynchronous);\r\n            }, function (status, headers) {\r\n                _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount, isTeardown, isSynchronous);\r\n            }, function (status, headers) {\r\n                _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount, isTeardown, isSynchronous);\r\n            }, isTeardown || isSynchronous);\r\n        }\r\n        else if (!isTeardown) {\r\n            this._handleRequestFinished(null, {}, isTeardown, isSynchronous);\r\n        }\r\n    };\r\n    AWTHttpManager.prototype._retryRequestIfNeeded = function (status, headers, request, tokenCount, apikey, retryCount, isTeardown, isSynchronous) {\r\n        var _this = this;\r\n        var shouldRetry = true;\r\n        if (typeof status !== 'undefined') {\r\n            if (headers) {\r\n                var killedTokens = this._killSwitch.setKillSwitchTenants(headers['kill-tokens'], headers['kill-duration-seconds']);\r\n                this._clockSkewManager.setClockSkew(headers['time-delta-millis']);\r\n                for (var i = 0; i < killedTokens.length; ++i) {\r\n                    AWTNotificationManager_1.default.eventsRejected(request[killedTokens[i]], Enums_1.AWTEventsRejectedReason.KillSwitch);\r\n                    delete request[killedTokens[i]];\r\n                    tokenCount--;\r\n                }\r\n            }\r\n            else {\r\n                this._clockSkewManager.setClockSkew(null);\r\n            }\r\n            if (status === 200) {\r\n                this._handleRequestFinished(true, request, isTeardown, isSynchronous);\r\n                return;\r\n            }\r\n            if (!AWTRetryPolicy_1.default.shouldRetryForStatus(status) || tokenCount <= 0) {\r\n                shouldRetry = false;\r\n            }\r\n        }\r\n        if (shouldRetry) {\r\n            if (isSynchronous) {\r\n                //Synchronous events only contain a single event so the apiKey is equal to the token for that event.\r\n                //Convert the event to High priority and add back to queue to be sent as High event.\r\n                this._activeConnections--;\r\n                request[apikey][0].priority = Enums_1.AWTEventPriority.High;\r\n                this._queueManager.addBackRequest(request);\r\n            }\r\n            else if (retryCount < MaxRetries) {\r\n                for (var token in request) {\r\n                    if (request.hasOwnProperty(token)) {\r\n                        AWTNotificationManager_1.default.eventsRetrying(request[token]);\r\n                    }\r\n                }\r\n                setTimeout(function () { return _this._sendRequest(request, retryCount + 1, false); }, AWTRetryPolicy_1.default.getMillisToBackoffForRetry(retryCount));\r\n            }\r\n            else {\r\n                this._activeConnections--;\r\n                AWTTransmissionManagerCore_1.default.backOffTransmission();\r\n                this._queueManager.addBackRequest(request);\r\n            }\r\n        }\r\n        else {\r\n            this._handleRequestFinished(false, request, isTeardown, isSynchronous);\r\n        }\r\n    };\r\n    AWTHttpManager.prototype._handleRequestFinished = function (success, request, isTeardown, isSynchronous) {\r\n        if (success) {\r\n            AWTTransmissionManagerCore_1.default.clearBackOff();\r\n        }\r\n        for (var token in request) {\r\n            if (request.hasOwnProperty(token)) {\r\n                if (success) {\r\n                    AWTNotificationManager_1.default.eventsSent(request[token]);\r\n                }\r\n                else {\r\n                    AWTNotificationManager_1.default.eventsDropped(request[token], Enums_1.AWTEventsDroppedReason.NonRetryableStatus);\r\n                }\r\n            }\r\n        }\r\n        this._activeConnections--;\r\n        if (!isSynchronous && !isTeardown) {\r\n            //Only continue sending more requests as long as the current request was not an synchronous request or sent\r\n            //during teardown. We want to return after just sending this one sync request.\r\n            this.sendQueuedRequests();\r\n        }\r\n    };\r\n    /**\r\n     * Converts the XHR getAllResponseHeaders to a map containing the header key and value.\r\n     */\r\n    AWTHttpManager.prototype._convertAllHeadersToMap = function (headersString) {\r\n        var headers = {};\r\n        if (headersString) {\r\n            var headersArray = headersString.split('\\n');\r\n            for (var i = 0; i < headersArray.length; ++i) {\r\n                var header = headersArray[i].split(': ');\r\n                headers[header[0]] = header[1];\r\n            }\r\n        }\r\n        return headers;\r\n    };\r\n    return AWTHttpManager;\r\n}());\r\nexports.default = AWTHttpManager;\r\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/**\r\n* microsoft.bond.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar bond_const_1 = __webpack_require__(22);\r\nexports._BondDataType = bond_const_1._BondDataType;\r\nvar _Encoding = __webpack_require__(23);\r\nexports._Encoding = _Encoding;\r\nvar IO = __webpack_require__(26);\r\nexports.IO = IO;\r\nvar microsoft_bond_primitives_1 = __webpack_require__(6);\r\nexports.Int64 = microsoft_bond_primitives_1.Int64;\r\nexports.UInt64 = microsoft_bond_primitives_1.UInt64;\r\nexports.Number = microsoft_bond_primitives_1.Number;\r\nvar CompactBinaryProtocolWriter = /** @class */ (function () {\r\n    function CompactBinaryProtocolWriter(stream) {\r\n        this._stream = stream;\r\n    }\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteBlob = function (blob) {\r\n        this._stream._Write(blob, 0, blob.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteBool = function (value) {\r\n        this._stream._WriteByte(value ? 1 : 0);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteContainerBegin = function (size, elementType) {\r\n        this._WriteUInt8(elementType);\r\n        this._WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteMapContainerBegin = function (size, keyType, valueType) {\r\n        this._WriteUInt8(keyType);\r\n        this._WriteUInt8(valueType);\r\n        this._WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteDouble = function (value) {\r\n        var array = _Encoding._Double_GetBytes(value);\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteFieldBegin = function (type, id, metadata) {\r\n        if (id <= 5) {\r\n            this._stream._WriteByte(type | (id << 5));\r\n        }\r\n        else if (id <= 0xff) {\r\n            this._stream._WriteByte(type | (6 << 5));\r\n            this._stream._WriteByte(id);\r\n        }\r\n        else {\r\n            this._stream._WriteByte(type | (7 << 5));\r\n            this._stream._WriteByte(id);\r\n            this._stream._WriteByte(id >> 8);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteInt32 = function (value) {\r\n        value = _Encoding._Zigzag_EncodeZigzag32(value);\r\n        this._WriteUInt32(value);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteInt64 = function (value) {\r\n        this._WriteUInt64(_Encoding._Zigzag_EncodeZigzag64(value));\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteString = function (value) {\r\n        if (value === '') {\r\n            this._WriteUInt32(0 /*length*/);\r\n        }\r\n        else {\r\n            var array = _Encoding._Utf8_GetBytes(value);\r\n            this._WriteUInt32(array.length);\r\n            this._stream._Write(array, 0, array.length);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteStructEnd = function (isBase) {\r\n        this._WriteUInt8(isBase ? bond_const_1._BondDataType._BT_STOP_BASE : bond_const_1._BondDataType._BT_STOP);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt32 = function (value) {\r\n        var array = _Encoding._Varint_GetBytes(microsoft_bond_primitives_1.Number._ToUInt32(value));\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt64 = function (value) {\r\n        var array = _Encoding._Varint64_GetBytes(value);\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt8 = function (value) {\r\n        this._stream._WriteByte(microsoft_bond_primitives_1.Number._ToUInt8(value));\r\n    };\r\n    return CompactBinaryProtocolWriter;\r\n}());\r\nexports.CompactBinaryProtocolWriter = CompactBinaryProtocolWriter;\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/**\r\n* bond_const.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Tool     : bondc, Version=3.0.1, Build=bond-git.debug.not\r\n//     Template : Microsoft.Bond.Rules.dll#TypeScript.tt\r\n//     File     : bond_const.ts\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost when\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\nvar _BondDataType;\r\n(function (_BondDataType) {\r\n    _BondDataType[_BondDataType[\"_BT_STOP\"] = 0] = \"_BT_STOP\";\r\n    _BondDataType[_BondDataType[\"_BT_STOP_BASE\"] = 1] = \"_BT_STOP_BASE\";\r\n    _BondDataType[_BondDataType[\"_BT_BOOL\"] = 2] = \"_BT_BOOL\";\r\n    _BondDataType[_BondDataType[\"_BT_DOUBLE\"] = 8] = \"_BT_DOUBLE\";\r\n    _BondDataType[_BondDataType[\"_BT_STRING\"] = 9] = \"_BT_STRING\";\r\n    _BondDataType[_BondDataType[\"_BT_STRUCT\"] = 10] = \"_BT_STRUCT\";\r\n    _BondDataType[_BondDataType[\"_BT_LIST\"] = 11] = \"_BT_LIST\";\r\n    _BondDataType[_BondDataType[\"_BT_MAP\"] = 13] = \"_BT_MAP\";\r\n    _BondDataType[_BondDataType[\"_BT_INT32\"] = 16] = \"_BT_INT32\";\r\n    _BondDataType[_BondDataType[\"_BT_INT64\"] = 17] = \"_BT_INT64\";\r\n})(_BondDataType = exports._BondDataType || (exports._BondDataType = {}));\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/**\r\n* microsoft.bond.encoding.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar microsoft_bond_primitives_1 = __webpack_require__(6);\r\nvar microsoft_bond_floatutils_1 = __webpack_require__(24);\r\nvar microsoft_bond_utils_1 = __webpack_require__(25);\r\nfunction _Utf8_GetBytes(value) {\r\n    var array = [];\r\n    for (var i = 0; i < value.length; ++i) {\r\n        var char = value.charCodeAt(i);\r\n        if (char < 0x80) {\r\n            array.push(char);\r\n        }\r\n        else if (char < 0x800) {\r\n            array.push(0xc0 | (char >> 6), 0x80 | (char & 0x3f));\r\n        }\r\n        else if (char < 0xd800 || char >= 0xe000) {\r\n            array.push(0xe0 | (char >> 12), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n        }\r\n        else {\r\n            char = 0x10000 + (((char & 0x3ff) << 10) | (value.charCodeAt(++i) & 0x3ff));\r\n            array.push(0xf0 | (char >> 18), 0x80 | ((char >> 12) & 0x3f), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n        }\r\n    }\r\n    return array;\r\n}\r\nexports._Utf8_GetBytes = _Utf8_GetBytes;\r\nfunction _Base64_GetString(inArray) {\r\n    var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n    var output = [];\r\n    var paddingBytes = inArray.length % 3;\r\n    var toBase64 = function (num) {\r\n        return [lookup.charAt((num >> 18) & 0x3F),\r\n            lookup.charAt((num >> 12) & 0x3F),\r\n            lookup.charAt((num >> 6) & 0x3F),\r\n            lookup.charAt(num & 0x3F)].join('');\r\n    };\r\n    for (var i = 0, length_1 = inArray.length - paddingBytes; i < length_1; i += 3) {\r\n        var temp = (inArray[i] << 16) + (inArray[i + 1] << 8) + (inArray[i + 2]);\r\n        output.push(toBase64(temp));\r\n    }\r\n    switch (paddingBytes) {\r\n        case 1:\r\n            var temp = inArray[inArray.length - 1];\r\n            output.push(lookup.charAt(temp >> 2));\r\n            output.push(lookup.charAt((temp << 4) & 0x3F));\r\n            output.push('==');\r\n            break;\r\n        case 2:\r\n            var temp2 = (inArray[inArray.length - 2] << 8) + (inArray[inArray.length - 1]);\r\n            output.push(lookup.charAt(temp2 >> 10));\r\n            output.push(lookup.charAt((temp2 >> 4) & 0x3F));\r\n            output.push(lookup.charAt((temp2 << 2) & 0x3F));\r\n            output.push('=');\r\n            break;\r\n    }\r\n    return output.join('');\r\n}\r\nexports._Base64_GetString = _Base64_GetString;\r\nfunction _Varint_GetBytes(value) {\r\n    var array = [];\r\n    while (value & 0xffffff80) {\r\n        array.push((value & 0x7f) | 0x80);\r\n        value >>>= 7;\r\n    }\r\n    array.push(value & 0x7f);\r\n    return array;\r\n}\r\nexports._Varint_GetBytes = _Varint_GetBytes;\r\nfunction _Varint64_GetBytes(value) {\r\n    var low = value.low;\r\n    var high = value.high;\r\n    var array = [];\r\n    while (high || (0xffffff80 & low)) {\r\n        array.push((low & 0x7f) | 0x80);\r\n        low = ((high & 0x7f) << 25) | (low >>> 7);\r\n        high >>>= 7;\r\n    }\r\n    array.push(low & 0x7f);\r\n    return array;\r\n}\r\nexports._Varint64_GetBytes = _Varint64_GetBytes;\r\n// Note: see notes of Float.\r\nfunction _Double_GetBytes(value) {\r\n    if (microsoft_bond_utils_1.BrowserChecker._IsDataViewSupport()) {\r\n        var view = new DataView(new ArrayBuffer(8));\r\n        view.setFloat64(0, value, true /*littleEndian*/);\r\n        var array = [];\r\n        for (var i = 0; i < 8; ++i) {\r\n            array.push(view.getUint8(i));\r\n        }\r\n        return array;\r\n    }\r\n    else {\r\n        return microsoft_bond_floatutils_1.FloatUtils._ConvertNumberToArray(value, true /*isDouble*/);\r\n    }\r\n}\r\nexports._Double_GetBytes = _Double_GetBytes;\r\nfunction _Zigzag_EncodeZigzag32(value) {\r\n    value = microsoft_bond_primitives_1.Number._ToInt32(value);\r\n    return ((value << 1) ^ (value >> (4 /*sizeof(int)*/ * 8 - 1)));\r\n}\r\nexports._Zigzag_EncodeZigzag32 = _Zigzag_EncodeZigzag32;\r\nfunction _Zigzag_EncodeZigzag64(value) {\r\n    var low = value.low;\r\n    var high = value.high;\r\n    var tmpH = (high << 1) | (low >>> 31);\r\n    var tmpL = low << 1;\r\n    if (high & 0x80000000) {\r\n        tmpH = ~tmpH;\r\n        tmpL = ~tmpL;\r\n    }\r\n    var res = new microsoft_bond_primitives_1.UInt64('0');\r\n    res.low = tmpL;\r\n    res.high = tmpH;\r\n    return res;\r\n}\r\nexports._Zigzag_EncodeZigzag64 = _Zigzag_EncodeZigzag64;\r\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* microsoft.bond.floatutils.ts\r\n* Copyright: Microsoft 2016\r\n*\r\n* This class will be used to convert float/double to byte array on browsers which don't support html5.\r\n*\r\n* Format: IEEE-754, littleEndian, http://en.wikipedia.org/wiki/IEEE_754-1985\r\n*\r\n*  \\note\r\n* 1. Don't have negative zero. All zero will be positive zero.\r\n* 2. If the buffer array passed to ConvertArrayToFloat() is actual NaN or Inifinity value,\r\n*    exception will be raised.\r\n*/\r\nvar FloatUtils = /** @class */ (function () {\r\n    function FloatUtils() {\r\n    }\r\n    FloatUtils._ConvertNumberToArray = function (num, isDouble) {\r\n        if (!num) {\r\n            return isDouble ? this._doubleZero : this._floatZero;\r\n        }\r\n        var exponentBits = isDouble ? 11 : 8;\r\n        var precisionBits = isDouble ? 52 : 23;\r\n        // follow IEEE-754, exponent bias is 2^(k-1)-1 where k is the number of bits\r\n        // in the exponent: http://en.wikipedia.org/wiki/Exponent_bias\r\n        var bias = (1 << (exponentBits - 1)) - 1;\r\n        var minExponent = 1 - bias;\r\n        var maxExponent = bias;\r\n        var sign = num < 0 ? 1 : 0;\r\n        num = Math.abs(num);\r\n        var intPart = Math.floor(num);\r\n        var floatPart = num - intPart;\r\n        var len = 2 * (bias + 2) + precisionBits;\r\n        var buffer = new Array(len);\r\n        var i = 0;\r\n        while (i < len) {\r\n            buffer[i++] = 0;\r\n        }\r\n        // caculate the intPart\r\n        i = bias + 2;\r\n        while (i && intPart) {\r\n            buffer[--i] = intPart % 2;\r\n            intPart = Math.floor(intPart / 2);\r\n        }\r\n        // caculate the floatPart\r\n        i = bias + 1;\r\n        while (i < len - 1 && floatPart > 0) {\r\n            floatPart *= 2;\r\n            if (floatPart >= 1) {\r\n                buffer[++i] = 1;\r\n                --floatPart;\r\n            }\r\n            else {\r\n                buffer[++i] = 0;\r\n            }\r\n        }\r\n        // find the first 1\r\n        var firstBit = 0;\r\n        while (firstBit < len && !buffer[firstBit]) {\r\n            firstBit++;\r\n        }\r\n        // caculate exponent\r\n        var exponent = bias + 1 - firstBit;\r\n        // caculate round\r\n        var lastBit = firstBit + precisionBits;\r\n        if (buffer[lastBit + 1]) {\r\n            for (i = lastBit; i > firstBit; --i) {\r\n                buffer[i] = 1 - buffer[i];\r\n                if (buffer) {\r\n                    break;\r\n                }\r\n            }\r\n            if (i === firstBit) {\r\n                ++exponent;\r\n            }\r\n        }\r\n        // check overflow\r\n        if (exponent > maxExponent || intPart) {\r\n            if (sign) {\r\n                return isDouble ? this._doubleNegInifinity : this._floatNegInifinity;\r\n            }\r\n            else {\r\n                return isDouble ? this._doubleInifinity : this._floatInifinity;\r\n            }\r\n        }\r\n        else if (exponent < minExponent) {\r\n            return isDouble ? this._doubleZero : this._floatZero;\r\n        }\r\n        // caculate the result\r\n        if (isDouble) {\r\n            var high = 0;\r\n            for (i = 0; i < 20; ++i) {\r\n                high = (high << 1) | buffer[++firstBit];\r\n            }\r\n            var low = 0;\r\n            for (; i < 52; ++i) {\r\n                low = (low << 1) | buffer[++firstBit];\r\n            }\r\n            high |= (exponent + bias) << 20;\r\n            high = (sign << 31) | (high & 0x7FFFFFFF);\r\n            var resArray = [low & 0xff, (low >> 8) & 0xff, (low >> 16) & 0xff, low >>> 24,\r\n                high & 0xff, (high >> 8) & 0xff, (high >> 16) & 0xff, high >>> 24];\r\n            return resArray;\r\n        }\r\n        else {\r\n            var result = 0;\r\n            for (i = 0; i < 23; ++i) {\r\n                result = (result << 1) | buffer[++firstBit];\r\n            }\r\n            result |= (exponent + bias) << 23;\r\n            result = (sign << 31) | (result & 0x7FFFFFFF);\r\n            var resArray = [result & 0xff, (result >> 8) & 0xff, (result >> 16) & 0xff, result >>> 24];\r\n            return resArray;\r\n        }\r\n    };\r\n    FloatUtils._floatZero = [0x00, 0x00, 0x00, 0x00];\r\n    FloatUtils._doubleZero = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\r\n    FloatUtils._floatInifinity = [0x00, 0x00, 0x80, 0x7F];\r\n    FloatUtils._floatNegInifinity = [0x00, 0x00, 0x80, 0xFF];\r\n    FloatUtils._doubleInifinity = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f];\r\n    FloatUtils._doubleNegInifinity = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff];\r\n    return FloatUtils;\r\n}());\r\nexports.FloatUtils = FloatUtils;\r\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/**\r\n* microsoft.bond.utils.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar BrowserChecker = /** @class */ (function () {\r\n    function BrowserChecker() {\r\n    }\r\n    BrowserChecker._IsDataViewSupport = function () {\r\n        return typeof ArrayBuffer !== 'undefined' &&\r\n            typeof DataView !== 'undefined';\r\n    };\r\n    return BrowserChecker;\r\n}());\r\nexports.BrowserChecker = BrowserChecker;\r\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* microsoft.bond.io.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nvar microsoft_bond_primitives_1 = __webpack_require__(6);\r\nvar MemoryStream = /** @class */ (function () {\r\n    function MemoryStream() {\r\n        this._buffer = [];\r\n    }\r\n    /*override*/\r\n    MemoryStream.prototype._WriteByte = function (byte) {\r\n        this._buffer.push(microsoft_bond_primitives_1.Number._ToByte(byte));\r\n    };\r\n    /*override*/\r\n    MemoryStream.prototype._Write = function (buffer, offset, count) {\r\n        while (count--) {\r\n            this._WriteByte(buffer[offset++]);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the array of unsigned bytes from which this stream was created.\r\n     */\r\n    MemoryStream.prototype._GetBuffer = function () {\r\n        return this._buffer;\r\n    };\r\n    return MemoryStream;\r\n}());\r\nexports.MemoryStream = MemoryStream;\r\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTRetryPolicy.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar RandomizationLowerThreshold = 0.8;\r\nvar RandomizationUpperThreshold = 1.2;\r\nvar BaseBackoff = 3000;\r\nvar MaxBackoff = 120000;\r\n/**\r\n* Class for retry policy.\r\n*/\r\nvar AWTRetryPolicy = /** @class */ (function () {\r\n    function AWTRetryPolicy() {\r\n    }\r\n    /**\r\n     * Determine if the request should be retried for the given status code.\r\n     * The below expression reads that we should only retry for:\r\n     *      - HttpStatusCodes that are smaller than 300.\r\n     *      - HttpStatusCodes greater or equal to 500 (except for 501-NotImplement\r\n     *        and 505-HttpVersionNotSupport).\r\n     *      - HttpStatusCode 408-RequestTimeout.\r\n     * This is based on Microsoft.WindowsAzure.Storage.RetryPolicies.ExponentialRetry class\r\n     * @param {number} httpStatusCode - The status code returned for the request.\r\n     * @return {boolean} True if request should be retried, false otherwise.\r\n     */\r\n    AWTRetryPolicy.shouldRetryForStatus = function (httpStatusCode) {\r\n        /* */\r\n        return !((httpStatusCode >= 300 && httpStatusCode < 500 && httpStatusCode !== 408)\r\n            || (httpStatusCode === 501)\r\n            || (httpStatusCode === 505));\r\n    };\r\n    /**\r\n     * Gets the number of milliseconds to back off before retrying the request. The\r\n     * back off duration is exponentially scaled based on the number of retries already\r\n     * done for the request.\r\n     * @param {number} retriesSoFar - The number of times the request has already been retried.\r\n     * @return {number} The back off duration for the request before it can be retried.\r\n     */\r\n    AWTRetryPolicy.getMillisToBackoffForRetry = function (retriesSoFar) {\r\n        var waitDuration = 0;\r\n        var minBackoff = BaseBackoff * RandomizationLowerThreshold;\r\n        var maxBackoff = BaseBackoff * RandomizationUpperThreshold;\r\n        var randomBackoff = Math.floor(Math.random() * (maxBackoff - minBackoff)) + minBackoff;\r\n        waitDuration = Math.pow(4, retriesSoFar) * randomBackoff;\r\n        return Math.min(waitDuration, MaxBackoff);\r\n    };\r\n    return AWTRetryPolicy;\r\n}());\r\nexports.default = AWTRetryPolicy;\r\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\n/**\r\n* AWTKillSwitch.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SecToMsMultiplier = 1000;\r\n/**\r\n* Class to stop certain tenants sending events.\r\n*/\r\nvar AWTKillSwitch = /** @class */ (function () {\r\n    function AWTKillSwitch() {\r\n        this._killedTokenDictionary = {};\r\n    }\r\n    /**\r\n     * Set the tenants that are to be killed along with the duration. If the duration is\r\n     * a special value identifying that the tokens are too be killed for only this request, then\r\n     * a array of tokens is returned.\r\n     * @param {string} killedTokens - Tokens that are too be marked to be killed.\r\n     * @param {string} killDuration - The duration for which the tokens are to be killed.\r\n     * @return {string[]} The tokens that are killed only for this given request.\r\n     */\r\n    AWTKillSwitch.prototype.setKillSwitchTenants = function (killTokens, killDuration) {\r\n        if (killTokens && killDuration) {\r\n            try {\r\n                var killedTokens = killTokens.split(',');\r\n                if (killDuration === 'this-request-only') {\r\n                    return killedTokens;\r\n                }\r\n                var durationMs = parseInt(killDuration, 10) * SecToMsMultiplier;\r\n                for (var i = 0; i < killedTokens.length; ++i) {\r\n                    this._killedTokenDictionary[killedTokens[i]] = Date.now() + durationMs;\r\n                }\r\n            }\r\n            catch (ex) {\r\n                return [];\r\n            }\r\n        }\r\n        return [];\r\n    };\r\n    /**\r\n     * Determing if the given tenant token has been killed for the moment.\r\n     * @param {string} tenantToken - The token to be checked.\r\n     * @return {boolean} True if token has been killed, false otherwise.\r\n     */\r\n    AWTKillSwitch.prototype.isTenantKilled = function (tenantToken) {\r\n        if (this._killedTokenDictionary[tenantToken] !== undefined && this._killedTokenDictionary[tenantToken] > Date.now()) {\r\n            return true;\r\n        }\r\n        delete this._killedTokenDictionary[tenantToken];\r\n        return false;\r\n    };\r\n    return AWTKillSwitch;\r\n}());\r\nexports.default = AWTKillSwitch;\r\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTClockSkewManager.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\n/**\r\n* Class to manage clock skew correction.\r\n*/\r\nvar AWTClockSkewManager = /** @class */ (function () {\r\n    function AWTClockSkewManager() {\r\n        this._allowRequestSending = true;\r\n        this._shouldAddClockSkewHeaders = true;\r\n        this._isFirstRequest = true;\r\n        this._clockSkewHeaderValue = 'use-collector-delta';\r\n        this._clockSkewSet = false;\r\n    }\r\n    /**\r\n     * Determine if the request can be sent.\r\n     * @return {boolean} True if requests can be sent, false otherwise.\r\n     */\r\n    AWTClockSkewManager.prototype.allowRequestSending = function () {\r\n        if (this._isFirstRequest && !this._clockSkewSet) {\r\n            this._isFirstRequest = false;\r\n            this._allowRequestSending = false;\r\n            return true;\r\n        }\r\n        return this._allowRequestSending;\r\n    };\r\n    /**\r\n     * Determine if clock skew headers should be added to the request.\r\n     * @return {boolean} True if clock skew headers should be added, false otherwise.\r\n     */\r\n    AWTClockSkewManager.prototype.shouldAddClockSkewHeaders = function () {\r\n        return this._shouldAddClockSkewHeaders;\r\n    };\r\n    /**\r\n     * Gets the clock skew header value.\r\n     * @return {string} The clock skew header value.\r\n     */\r\n    AWTClockSkewManager.prototype.getClockSkewHeaderValue = function () {\r\n        return this._clockSkewHeaderValue;\r\n    };\r\n    /**\r\n     * Sets the clock skew header value. Once clock skew is set this method\r\n     * is no-op.\r\n     * @param {string} timeDeltaInMillis - Time delta to be saved as the clock skew header value.\r\n     */\r\n    AWTClockSkewManager.prototype.setClockSkew = function (timeDeltaInMillis) {\r\n        if (!this._clockSkewSet) {\r\n            if (timeDeltaInMillis) {\r\n                this._clockSkewHeaderValue = timeDeltaInMillis;\r\n            }\r\n            else {\r\n                this._shouldAddClockSkewHeaders = false;\r\n            }\r\n            this._clockSkewSet = true;\r\n            this._allowRequestSending = true;\r\n        }\r\n    };\r\n    return AWTClockSkewManager;\r\n}());\r\nexports.default = AWTClockSkewManager;\r\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = __webpack_require__(0);\r\n/**\r\n* Class to batch events.\r\n*/\r\nvar AWTRecordBatcher = /** @class */ (function () {\r\n    function AWTRecordBatcher(_outboundQueue, _maxNumberOfEvents) {\r\n        this._outboundQueue = _outboundQueue;\r\n        this._maxNumberOfEvents = _maxNumberOfEvents;\r\n        this._currentBatch = {};\r\n        this._currentNumEventsInBatch = 0;\r\n    }\r\n    /**\r\n     * Add an event to the current batch.\r\n     * If the priority of the event is synchronous, it will also return the batch containing only the synchronous event.\r\n     * @param {object} event - The event that needs to be batched.\r\n     * @return {object} If the priority of the event is synchronous, it will also return the batch containing only the synchronous event.\r\n     * Otherwise returns null.\r\n     */\r\n    AWTRecordBatcher.prototype.addEventToBatch = function (event) {\r\n        if (event.priority === Enums_1.AWTEventPriority.Immediate_sync) {\r\n            //batch immediate priority into its own batch\r\n            var immediateBatch = {};\r\n            immediateBatch[event.apiKey] = [event];\r\n            return immediateBatch;\r\n        }\r\n        else {\r\n            if (this._currentNumEventsInBatch >= this._maxNumberOfEvents) {\r\n                this.flushBatch();\r\n            }\r\n            if (this._currentBatch[event.apiKey] === undefined) {\r\n                this._currentBatch[event.apiKey] = [];\r\n            }\r\n            this._currentBatch[event.apiKey].push(event);\r\n            this._currentNumEventsInBatch++;\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Flush the current batch so that it is added to the outbound queue.\r\n     */\r\n    AWTRecordBatcher.prototype.flushBatch = function () {\r\n        if (this._currentNumEventsInBatch > 0) {\r\n            this._outboundQueue.push(this._currentBatch);\r\n            this._currentBatch = {};\r\n            this._currentNumEventsInBatch = 0;\r\n        }\r\n    };\r\n    /**\r\n     * Check if there is a batch that contains events.\r\n     */\r\n    AWTRecordBatcher.prototype.hasBatch = function () {\r\n        return this._currentNumEventsInBatch > 0;\r\n    };\r\n    return AWTRecordBatcher;\r\n}());\r\nexports.default = AWTRecordBatcher;\r\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTTransmissionManagerCore_1 = __webpack_require__(3);\r\n/**\r\n * The AWTTransmissionManager calss is a wrapper class that exposes some of the\r\n * Transmission functionality needed by other Aria modules.\r\n */\r\nvar AWTTransmissionManager = /** @class */ (function () {\r\n    function AWTTransmissionManager() {\r\n    }\r\n    /**\r\n     * Sets the event handler used by the tranmission manager.\r\n     * The default event handler is the Inbound queue manager. This handler\r\n     * is used to batch and send events to Aria. If you intend to send events\r\n     * to Aria please make sure that your event handler forwards events to the Inbound\r\n     * Queue Manager. You can retrieve the Inbound Queue Manager by calling\r\n     * getEventsHandler before you set your handler.\r\n     * @param {object} eventsHandler - An AWTEventHandler event handler used by the tranmission\r\n     * manager.\r\n     */\r\n    AWTTransmissionManager.setEventsHandler = function (eventsHandler) {\r\n        AWTTransmissionManagerCore_1.default.setEventsHandler(eventsHandler);\r\n    };\r\n    /**\r\n     * Gets the current event handler used by the tranmission manager.\r\n     * @return {object} An AWTEventHandler event handler used by the tranmission manager.\r\n     */\r\n    AWTTransmissionManager.getEventsHandler = function () {\r\n        return AWTTransmissionManagerCore_1.default.getEventsHandler();\r\n    };\r\n    /**\r\n     * The scheduleTimer method tries to schedule the waiting period after which events are sent. If there are\r\n     * no events to be sent, or if there is already a timer scheduled, or if the\r\n     * http manager doesn't have any idle connections, then this method is no-op.\r\n     */\r\n    AWTTransmissionManager.scheduleTimer = function () {\r\n        AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n    };\r\n    return AWTTransmissionManager;\r\n}());\r\nexports.default = AWTTransmissionManager;\r\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// logger.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 896ebabed1fb163983c9","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Enums.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing the enums.\r\n*/\r\n/**\r\n * The AWTPropertyType enumeration contains a set of values that specify types of properties.\r\n * @enum {number}\r\n */\r\nvar AWTPropertyType;\r\n(function (AWTPropertyType) {\r\n    /**\r\n     * Property type is unspecified.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Unspecified\"] = 0] = \"Unspecified\";\r\n    /**\r\n     * A string.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"String\"] = 1] = \"String\";\r\n    /**\r\n     * A 64-bit integer.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Int64\"] = 2] = \"Int64\";\r\n    /**\r\n     * A double.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Double\"] = 3] = \"Double\";\r\n    /**\r\n     * A boolean.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Boolean\"] = 4] = \"Boolean\";\r\n})(AWTPropertyType = exports.AWTPropertyType || (exports.AWTPropertyType = {}));\r\n/**\r\n * The AWTPiiKind enumeration contains a set of values that specify the kind of PII (Personal Identifiable Information).\r\n * @enum {number}\r\n */\r\nvar AWTPiiKind;\r\n(function (AWTPiiKind) {\r\n    /**\r\n     * No kind.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * An LDAP distinguished name. For example, CN=Jeff Smith,OU=Sales,DC=Fabrikam,DC=COM.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"DistinguishedName\"] = 1] = \"DistinguishedName\";\r\n    /**\r\n     * Generic information.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"GenericData\"] = 2] = \"GenericData\";\r\n    /**\r\n     * An IPV4 Internet address. For example, 192.0.2.1.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPV4Address\"] = 3] = \"IPV4Address\";\r\n    /**\r\n     * An IPV6 Internet address. For example, 2001:0db8:85a3:0000:0000:8a2e:0370:7334.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPv6Address\"] = 4] = \"IPv6Address\";\r\n    /**\r\n     * The Subject of an e-mail message.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"MailSubject\"] = 5] = \"MailSubject\";\r\n    /**\r\n     * A telephone number.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"PhoneNumber\"] = 6] = \"PhoneNumber\";\r\n    /**\r\n     * A query string.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"QueryString\"] = 7] = \"QueryString\";\r\n    /**\r\n     * An SIP (Session Internet Protocol) address.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"SipAddress\"] = 8] = \"SipAddress\";\r\n    /**\r\n     * An e-mail address.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"SmtpAddress\"] = 9] = \"SmtpAddress\";\r\n    /**\r\n     * An user ID.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Identity\"] = 10] = \"Identity\";\r\n    /**\r\n     * A URI (Uniform Resource Identifier).\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Uri\"] = 11] = \"Uri\";\r\n    /**\r\n     * The fully-qualified domain name.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Fqdn\"] = 12] = \"Fqdn\";\r\n    /**\r\n     * Scrubs the last octet in a IPV4 Internet address.\r\n     * For example: 10.121.227.147 becomes 10.121.227.*\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPV4AddressLegacy\"] = 13] = \"IPV4AddressLegacy\";\r\n})(AWTPiiKind = exports.AWTPiiKind || (exports.AWTPiiKind = {}));\r\n/**\r\n * The AWTCustomerContentKind enumeration contains a set of values that specify the kind of customer content.\r\n * @enum {number}\r\n */\r\nvar AWTCustomerContentKind;\r\n(function (AWTCustomerContentKind) {\r\n    /**\r\n     * No kind.\r\n     */\r\n    AWTCustomerContentKind[AWTCustomerContentKind[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * Generic content.\r\n     */\r\n    AWTCustomerContentKind[AWTCustomerContentKind[\"GenericContent\"] = 1] = \"GenericContent\";\r\n})(AWTCustomerContentKind = exports.AWTCustomerContentKind || (exports.AWTCustomerContentKind = {}));\r\n/**\r\n * The AWTEventPriority enumeration contains a set of values that specify an event's priority.\r\n * @enum {number}\r\n */\r\nvar AWTEventPriority;\r\n(function (AWTEventPriority) {\r\n    /**\r\n     * Low priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"Low\"] = 1] = \"Low\";\r\n    /**\r\n     * Normal priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"Normal\"] = 2] = \"Normal\";\r\n    /**\r\n     * High priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"High\"] = 3] = \"High\";\r\n    /**\r\n     * Immediate_sync priority (Events are sent sync immediately).\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"Immediate_sync\"] = 5] = \"Immediate_sync\";\r\n})(AWTEventPriority = exports.AWTEventPriority || (exports.AWTEventPriority = {}));\r\n/**\r\n * The AWTEventsDroppedReason enumeration contains a set of values that specify the reason for dropping an event.\r\n * @enum {number}\r\n */\r\nvar AWTEventsDroppedReason;\r\n(function (AWTEventsDroppedReason) {\r\n    /**\r\n     * Status set to non-retryable.\r\n     */\r\n    AWTEventsDroppedReason[AWTEventsDroppedReason[\"NonRetryableStatus\"] = 1] = \"NonRetryableStatus\";\r\n    /**\r\n     * The event queue is full.\r\n     */\r\n    AWTEventsDroppedReason[AWTEventsDroppedReason[\"QueueFull\"] = 3] = \"QueueFull\";\r\n})(AWTEventsDroppedReason = exports.AWTEventsDroppedReason || (exports.AWTEventsDroppedReason = {}));\r\n/**\r\n * The AWTEventsRejectedReason enumeration contains a set of values that specify the reason for rejecting an event.\r\n * @enum {number}\r\n */\r\nvar AWTEventsRejectedReason;\r\n(function (AWTEventsRejectedReason) {\r\n    /**\r\n     * The event is invalid.\r\n     */\r\n    AWTEventsRejectedReason[AWTEventsRejectedReason[\"InvalidEvent\"] = 1] = \"InvalidEvent\";\r\n    /**\r\n     * The size of the event is too large.\r\n     */\r\n    AWTEventsRejectedReason[AWTEventsRejectedReason[\"SizeLimitExceeded\"] = 2] = \"SizeLimitExceeded\";\r\n    /**\r\n     * The server is not accepting events from this token.\r\n     */\r\n    AWTEventsRejectedReason[AWTEventsRejectedReason[\"KillSwitch\"] = 3] = \"KillSwitch\";\r\n})(AWTEventsRejectedReason = exports.AWTEventsRejectedReason || (exports.AWTEventsRejectedReason = {}));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/Enums.js\n// module id = 0\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Utils.ts\r\n* @author  Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing utility functions.\r\n*/\r\nvar microsoft_bond_primitives_1 = require(\"../bond/microsoft.bond.primitives\");\r\nvar Enums_1 = require(\"./Enums\");\r\nvar GuidRegex = /[xy]/g;\r\nvar MSTillUnixEpoch = 62135596800000;\r\nvar MSToTicksMultiplier = 10000;\r\nexports.EventNameAndTypeRegex = /^[a-zA-Z]([a-zA-Z0-9]|_){2,98}[a-zA-Z0-9]$/;\r\nexports.EventNameDotRegex = /\\./g;\r\nexports.PropertyNameRegex = /^[a-zA-Z](([a-zA-Z0-9|_|\\.]){0,98}[a-zA-Z0-9])?$/;\r\nexports.StatsApiKey = 'a387cfcf60114a43a7699f9fbb49289e-9bceb9fe-1c06-460f-96c5-6a0b247358bc-7238';\r\nvar beaconsSupported = null;\r\nvar uInt8ArraySupported = null;\r\nvar useXDR = null;\r\n/**\r\n * Converts a number to Bond Int64.\r\n * @param {number} value - The number to be converted.\r\n * @return {object} The Int64 value for the passed number.\r\n */\r\nfunction numberToBondInt64(value) {\r\n    // Construct bond timestamp for aria\r\n    var bond_value = new microsoft_bond_primitives_1.Int64('0');\r\n    bond_value.low = value & 0xffffffff;\r\n    bond_value.high = Math.floor(value / 0x100000000);\r\n    return bond_value;\r\n}\r\nexports.numberToBondInt64 = numberToBondInt64;\r\n/**\r\n * Creates a new GUID.\r\n * @return {string} A GUID.\r\n */\r\nfunction newGuid() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(GuidRegex, function (c) {\r\n        var r = (Math.random() * 16 | 0), v = (c === 'x' ? r : r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\nexports.newGuid = newGuid;\r\n/**\r\n * Checks if the type of value is a string.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a string, false otherwise.\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string';\r\n}\r\nexports.isString = isString;\r\n/**\r\n * Checks if the type of value is a number.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a number, false otherwise.\r\n */\r\nfunction isNumber(value) {\r\n    return typeof value === 'number';\r\n}\r\nexports.isNumber = isNumber;\r\n/**\r\n * Checks if the type of value is a boolean.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a boolean, false otherwise.\r\n */\r\nfunction isBoolean(value) {\r\n    return typeof value === 'boolean';\r\n}\r\nexports.isBoolean = isBoolean;\r\n/**\r\n * Converts milliseconds to ticks since 00:00:00 Jan 1, 0001.\r\n * @param {number} msToTicks - The milliseconds value to be converted.\r\n * @return {number} The value of the milliseconds in .Net Ticks.\r\n */\r\nfunction msToTicks(timeInMs) {\r\n    return (timeInMs + MSTillUnixEpoch) * MSToTicksMultiplier;\r\n}\r\nexports.msToTicks = msToTicks;\r\n/**\r\n * Gets the tenant id from the tenant token.\r\n * @param {string} apiKey - The token from which the tenant id is to be extracted.\r\n * @return {string} The tenant id.\r\n */\r\nfunction getTenantId(apiKey) {\r\n    var indexTenantId = apiKey.indexOf('-');\r\n    if (indexTenantId > -1) {\r\n        return apiKey.substring(0, indexTenantId);\r\n    }\r\n    return '';\r\n}\r\nexports.getTenantId = getTenantId;\r\n/**\r\n * Checks if HTML5 Beacons are supported in the current environment.\r\n * @return {boolean} True if supported, false otherwise.\r\n */\r\nfunction isBeaconsSupported() {\r\n    if (beaconsSupported === null) {\r\n        beaconsSupported = typeof navigator !== 'undefined' && Boolean(navigator.sendBeacon);\r\n    }\r\n    return beaconsSupported;\r\n}\r\nexports.isBeaconsSupported = isBeaconsSupported;\r\n/**\r\n * Checks if Uint8Array are available in the current environment. Safari and Firefox along with\r\n * ReactNative are known to not support Uint8Array properly.\r\n * @return {boolean} True if available, false otherwise.\r\n */\r\nfunction isUint8ArrayAvailable() {\r\n    if (uInt8ArraySupported === null) {\r\n        uInt8ArraySupported = typeof Uint8Array !== 'undefined' && !isSafariOrFirefox() && !isReactNative();\r\n    }\r\n    return uInt8ArraySupported;\r\n}\r\nexports.isUint8ArrayAvailable = isUint8ArrayAvailable;\r\n/**\r\n * Checks if the value is an AWTEventPriority.\r\n * @param {enum} value - The value that needs to be checked.\r\n * @return {boolean} True if the value is in AWTEventPriority, false otherwise.\r\n */\r\nfunction isPriority(value) {\r\n    if (isNumber(value) && ((value >= 1 && value <= 3) || value === 5)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexports.isPriority = isPriority;\r\n/**\r\n * Sanitizes the Property. It checks the that the property name and value are valid. It also\r\n * checks/populates the correct type and pii of the property value.\r\n * @param {string} name                           - The property name.\r\n * @param {string|number|boolean|object} property - The property value or an AWTEventProperty containing value,\r\n * type ,pii and customer content.\r\n * @return {object} AWTEventProperty containing valid name, value, pii and type or null if invalid.\r\n */\r\nfunction sanitizeProperty(name, property) {\r\n    //Check that property is valid\r\n    if (!exports.PropertyNameRegex.test(name) || property === undefined || property === null || property === '') {\r\n        return null;\r\n    }\r\n    //If the property isn't AWTEventProperty, convert it into one.\r\n    if (isString(property) || isNumber(property) || isBoolean(property)) {\r\n        property = { value: property, type: Enums_1.AWTPropertyType.Unspecified };\r\n    }\r\n    else if (property.value === undefined || property.value === null\r\n        || property.value === '' || (!isString(property.value)\r\n        && !isNumber(property.value) && !isBoolean(property.value))) {\r\n        //Since property is AWTEventProperty, we need to validate its value\r\n        return null;\r\n    }\r\n    property.type = sanitizePropertyType(property.value, property.type);\r\n    if (!property.type) {\r\n        return null;\r\n    }\r\n    //Ensure that only one of pii or customer content can be set\r\n    if (property.pii > 0 && property.cc > 0) {\r\n        return null;\r\n    }\r\n    //If pii is set we need to validate its enum value.\r\n    if (property.pii) {\r\n        return isPii(property.pii) ? property : null;\r\n    }\r\n    //If cc is set we need to validate its enum value.\r\n    if (property.cc) {\r\n        return isCustomerContent(property.cc) ? property : null;\r\n    }\r\n    return property;\r\n}\r\nexports.sanitizeProperty = sanitizeProperty;\r\n/**\r\n * Converts a date object into an ISO string. This is needed because not all browsers support ISO string format\r\n * on the date.\r\n * @param {object} date - The date which needs to be converted to ISO format.\r\n * @return {string} The date in ISO format.\r\n */\r\nfunction getISOString(date) {\r\n    return date.getUTCFullYear() + '-' +\r\n        twoDigit(date.getUTCMonth() + 1) + '-' +\r\n        twoDigit(date.getUTCDate()) + 'T' +\r\n        twoDigit(date.getUTCHours()) + ':' +\r\n        twoDigit(date.getUTCMinutes()) + ':' +\r\n        twoDigit(date.getUTCSeconds()) + '.' +\r\n        threeDigit(date.getUTCMilliseconds()) + 'Z';\r\n}\r\nexports.getISOString = getISOString;\r\nfunction useXDomainRequest() {\r\n    if (useXDR === null) {\r\n        var conn = new XMLHttpRequest();\r\n        if (typeof conn.withCredentials === 'undefined' &&\r\n            typeof XDomainRequest !== 'undefined') {\r\n            useXDR = true;\r\n        }\r\n        else {\r\n            useXDR = false;\r\n        }\r\n    }\r\n    return useXDR;\r\n}\r\nexports.useXDomainRequest = useXDomainRequest;\r\nfunction isReactNative() {\r\n    // If running in React Native, navigator.product will be populated\r\n    if (typeof navigator !== 'undefined' && navigator.product) {\r\n        return navigator.product === 'ReactNative';\r\n    }\r\n    return false;\r\n}\r\nexports.isReactNative = isReactNative;\r\nfunction twoDigit(n) {\r\n    // Format integers to have at least two digits.\r\n    return n < 10 ? '0' + n : n.toString();\r\n}\r\nfunction threeDigit(n) {\r\n    // Format integers to have at least three digits.\r\n    if (n < 10) {\r\n        return '00' + n;\r\n    }\r\n    else if (n < 100) {\r\n        return '0' + n;\r\n    }\r\n    return n.toString();\r\n}\r\nfunction sanitizePropertyType(value, type) {\r\n    if (!isPropertyType(type) || type === Enums_1.AWTPropertyType.Unspecified) {\r\n        return getCorrectType(value);\r\n    }\r\n    if (type === Enums_1.AWTPropertyType.String && typeof value === 'string') {\r\n        return type;\r\n    }\r\n    if ((type === Enums_1.AWTPropertyType.Double || type === Enums_1.AWTPropertyType.Int64) && typeof value === 'number') {\r\n        if (type === Enums_1.AWTPropertyType.Int64 && value % 1 !== 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return type;\r\n        }\r\n    }\r\n    if (type === Enums_1.AWTPropertyType.Boolean && typeof value === 'boolean') {\r\n        return type;\r\n    }\r\n}\r\nfunction getCorrectType(value) {\r\n    switch (typeof value) {\r\n        case 'string':\r\n            return Enums_1.AWTPropertyType.String;\r\n        case 'boolean':\r\n            return Enums_1.AWTPropertyType.Boolean;\r\n        case 'number':\r\n            return Enums_1.AWTPropertyType.Double;\r\n    }\r\n    return Enums_1.AWTPropertyType.Unspecified;\r\n}\r\nfunction isPii(value) {\r\n    if (isNumber(value) && value >= 0 && value <= 13) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isCustomerContent(value) {\r\n    if (isNumber(value) && value >= 0 && value <= 1) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isPropertyType(value) {\r\n    if (isNumber(value) && value >= 0 && value <= 4) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isSafariOrFirefox() {\r\n    // If non-browser navigator will be undefined\r\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n        var ua = navigator.userAgent.toLowerCase();\r\n        if ((ua.indexOf('safari') >= 0 || ua.indexOf('firefox') >= 0) && ua.indexOf('chrome') < 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/Utils.js\n// module id = 1\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nvar AWTNotificationManager = /** @class */ (function () {\r\n    function AWTNotificationManager() {\r\n    }\r\n    /**\r\n     * Adds a notification listener.\r\n     * @param {object} listener - The notification listener to be added.\r\n     */\r\n    AWTNotificationManager.addNotificationListener = function (listener) {\r\n        this.listeners.push(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {object} listener - AWTNotificationListener to remove.\r\n     */\r\n    AWTNotificationManager.removeNotificationListener = function (listener) {\r\n        var index = this.listeners.indexOf(listener);\r\n        while (index > -1) {\r\n            this.listeners.splice(index, 1);\r\n            index = this.listeners.indexOf(listener);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events sent.\r\n     * @param {object[]} events - The array of events that have been sent.\r\n     */\r\n    AWTNotificationManager.eventsSent = function (events) {\r\n        var _this = this;\r\n        var _loop_1 = function (i) {\r\n            if (this_1.listeners[i].eventsSent) {\r\n                setTimeout(function () { return _this.listeners[i].eventsSent(events); }, 0);\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being dropped.\r\n     * @param {object[]} events - The array of events that have been dropped.\r\n     * @param {enum} reason     - The reason for which the SDK dropped the events.\r\n     */\r\n    AWTNotificationManager.eventsDropped = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_2 = function (i) {\r\n            if (this_2.listeners[i].eventsDropped) {\r\n                setTimeout(function () { return _this.listeners[i].eventsDropped(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_2 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_2(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being retried when the request failed with a retryable status.\r\n     * @param {object[]} events - The array of events that are being retried.\r\n     */\r\n    AWTNotificationManager.eventsRetrying = function (events) {\r\n        var _this = this;\r\n        var _loop_3 = function (i) {\r\n            if (this_3.listeners[i].eventsRetrying) {\r\n                setTimeout(function () { return _this.listeners[i].eventsRetrying(events); }, 0);\r\n            }\r\n        };\r\n        var this_3 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_3(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being rejected.\r\n     * @param {object[]} events - The array of events that have been rejected.\r\n     * @param {enum} reason     - The reason for which the SDK rejeceted the events.\r\n     */\r\n    AWTNotificationManager.eventsRejected = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_4 = function (i) {\r\n            if (this_4.listeners[i].eventsRejected) {\r\n                setTimeout(function () { return _this.listeners[i].eventsRejected(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_4 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_4(i);\r\n        }\r\n    };\r\n    AWTNotificationManager.listeners = [];\r\n    return AWTNotificationManager;\r\n}());\r\nexports.default = AWTNotificationManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTNotificationManager.js\n// module id = 2\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTTransmissionManagerCore.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar DataModels_1 = require(\"./DataModels\");\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar AWTQueueManager_1 = require(\"./AWTQueueManager\");\r\nvar AWTStatsManager_1 = require(\"../common/AWTStatsManager\");\r\nvar AWTEventProperties_1 = require(\"./AWTEventProperties\");\r\nvar AWTLogManager_1 = require(\"./AWTLogManager\");\r\nvar Utils = require(\"../common/Utils\");\r\nvar MaxBackoffCount = 4;\r\nvar MinDurationBetweenUploadNow = 30000; //30 sec\r\nvar StatName = 'awt_stats';\r\n/**\r\n * Class that manages the timers for when to send events. It also\r\n * handles flush and flushAndTeardown. This class also allows setting\r\n * new event handlers. The default event handler is the Inbound Queue Manager.\r\n */\r\nvar AWTTransmissionManagerCore = /** @class */ (function () {\r\n    function AWTTransmissionManagerCore() {\r\n    }\r\n    /**\r\n     * Sets the event handler to be used by the tranmission manager.\r\n     * The default event handler is the Inbound queue manager. This handler\r\n     * is used to batch and send events to Aria. If you intend to send events\r\n     * to Aria please make sure your event handler forwards events to the Inbound\r\n     * Queue Manager. You can retrieve the Inbound Queue Manager by calling\r\n     * getEventsHandler before you set your handler.\r\n     * @param {object} eventsHandler - The new events handler to be used by the tranmission\r\n     * manager.\r\n     */\r\n    AWTTransmissionManagerCore.setEventsHandler = function (eventsHandler) {\r\n        this._eventHandler = eventsHandler;\r\n    };\r\n    /**\r\n     * Gets the current event handler used by the tranmission manager.\r\n     * @return {object} The event handler currently used by the tranmission manager.\r\n     */\r\n    AWTTransmissionManagerCore.getEventsHandler = function () {\r\n        return this._eventHandler;\r\n    };\r\n    /**\r\n     * Try to schedule the timer after which events will be sent. If there are\r\n     * no events to be sent, or there is already a timer scheduled, or the\r\n     * http manager doesn't have any idle connections this method is no-op.\r\n     */\r\n    AWTTransmissionManagerCore.scheduleTimer = function () {\r\n        var _this = this;\r\n        var timer = this._profiles[this._currentProfile][2];\r\n        if (this._timeout < 0 && timer >= 0 && !this._paused) {\r\n            if (this._eventHandler.hasEvents()) {\r\n                //If the transmission is backed off make the timer atleast 1 sec to allow for backoff.\r\n                if (timer === 0 && this._currentBackoffCount > 0) {\r\n                    timer = 1;\r\n                }\r\n                this._timeout = setTimeout(function () { return _this._batchAndSendEvents(); }, timer * (1 << this._currentBackoffCount) * 1000);\r\n            }\r\n            else {\r\n                this._timerCount = 0;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Initialize the transmission manager. After this method is called events are\r\n     * accepted for tranmission.\r\n     * @param {object} config - The configuration passed during AWTLogManager initialize.\r\n     */\r\n    AWTTransmissionManagerCore.initialize = function (config) {\r\n        var _this = this;\r\n        this._newEventsAllowed = true;\r\n        this._config = config;\r\n        this._eventHandler = new AWTQueueManager_1.default(config.collectorUri, config.cacheMemorySizeLimitInNumberOfEvents, config.httpXHROverride);\r\n        this._initializeProfiles();\r\n        AWTStatsManager_1.default.initialize(function (stats, tenantId) {\r\n            if (_this._config.canSendStatEvent(StatName)) {\r\n                var event_1 = new AWTEventProperties_1.default(StatName);\r\n                event_1.setEventPriority(Enums_1.AWTEventPriority.High);\r\n                event_1.setProperty('TenantId', tenantId);\r\n                for (var statKey in stats) {\r\n                    if (stats.hasOwnProperty(statKey)) {\r\n                        event_1.setProperty(statKey, stats[statKey].toString());\r\n                    }\r\n                }\r\n                AWTLogManager_1.default.getLogger(Utils.StatsApiKey).logEvent(event_1);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Set the transmit profile to be used. This will change the tranmission timers\r\n     * based on the transmit profile.\r\n     * @param {string} profileName - The name of the transmit profile to be used.\r\n     */\r\n    AWTTransmissionManagerCore.setTransmitProfile = function (profileName) {\r\n        if (this._currentProfile !== profileName && this._profiles[profileName] !== undefined) {\r\n            this.clearTimeout();\r\n            this._currentProfile = profileName;\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Load custom tranmission profiles. Each profile should have timers for\r\n     * high, normal and low.  Each profile should make sure\r\n     * that a each priority timer is a multiple of the priority higher than it.\r\n     * Setting the timer value to -1 means that the events for that priority will\r\n     * not be sent. Note that once a priority has been set to not send, all priorities\r\n     * below it will also not be sent. The timers should be in the form of [low, normal, high].\r\n     * e.g Custom: [30,10,5]\r\n     * This also removes any previously loaded custom profiles.\r\n     * @param {object} profiles - A dictionary containing the transmit profiles.\r\n     */\r\n    AWTTransmissionManagerCore.loadTransmitProfiles = function (profiles) {\r\n        this._resetTransmitProfiles();\r\n        for (var profileName in profiles) {\r\n            if (profiles.hasOwnProperty(profileName)) {\r\n                if (profiles[profileName].length !== 3) {\r\n                    continue;\r\n                }\r\n                //Make sure if a higher priority is set to not send then dont send lower priority\r\n                for (var i = 2; i >= 0; --i) {\r\n                    if (profiles[profileName][i] < 0) {\r\n                        for (var j = i; j >= 0; --j) {\r\n                            profiles[profileName][j] = -1;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                //Make sure each priority is multiple of the priority higher then it. If not a multiple\r\n                //we round up so that it becomes a multiple.\r\n                for (var i = 2; i > 0; --i) {\r\n                    if (profiles[profileName][i] > 0 && profiles[profileName][i - 1] > 0) {\r\n                        var timerMultiplier = profiles[profileName][i - 1] / profiles[profileName][i];\r\n                        profiles[profileName][i - 1] = Math.ceil(timerMultiplier) * profiles[profileName][i];\r\n                    }\r\n                }\r\n                this._profiles[profileName] = profiles[profileName];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Pass the event to the event handler and try to schedule the timer.\r\n     * @param {object} event - The event to be sent.\r\n     */\r\n    AWTTransmissionManagerCore.sendEvent = function (event) {\r\n        if (this._newEventsAllowed) {\r\n            //If the transmission is backed off then do not send synchronous events.\r\n            //We will convert these events to High priority instead.\r\n            if (this._currentBackoffCount > 0 && event.priority === Enums_1.AWTEventPriority.Immediate_sync) {\r\n                event.priority = Enums_1.AWTEventPriority.High;\r\n            }\r\n            this._eventHandler.addEvent(event);\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Sends events for all priority for the current inbound queue.\r\n     * This method adds new inbound queues to which new events will be added.\r\n     * Note: If LogManager is paused or flush is called again in less than 30 sec\r\n     * then flush will be no-op and the callback will not be called.\r\n     * @param {function} callback - The function to be called when flush is finished.\r\n     */\r\n    AWTTransmissionManagerCore.flush = function (callback) {\r\n        var currentTime = (new Date()).getTime();\r\n        if (!this._paused && this._lastUploadNowCall + MinDurationBetweenUploadNow < currentTime) {\r\n            this._lastUploadNowCall = currentTime;\r\n            if (this._timeout > -1) {\r\n                clearTimeout(this._timeout);\r\n                this._timeout = -1;\r\n            }\r\n            this._eventHandler.uploadNow(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Pauses transmission. It pauses the http manager and also clears timers.\r\n     */\r\n    AWTTransmissionManagerCore.pauseTransmission = function () {\r\n        if (!this._paused) {\r\n            this.clearTimeout();\r\n            this._eventHandler.pauseTransmission();\r\n            this._paused = true;\r\n        }\r\n    };\r\n    /**\r\n     * Resumes tranmission. It resumes the http manager and tries to schedule the timer.\r\n     */\r\n    AWTTransmissionManagerCore.resumeTransmision = function () {\r\n        if (this._paused) {\r\n            this._paused = false;\r\n            this._eventHandler.resumeTransmission();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Stops allowing new events being added for tranmission. It also batches all\r\n     * events currently in the queue and creates requests from them to be sent.\r\n     */\r\n    AWTTransmissionManagerCore.flushAndTeardown = function () {\r\n        AWTStatsManager_1.default.teardown();\r\n        this._newEventsAllowed = false;\r\n        this.clearTimeout();\r\n        //No op if offline storage is added\r\n        this._eventHandler.teardown();\r\n    };\r\n    /**\r\n     * Backs off tranmission. This exponentially increases all the timers.\r\n     */\r\n    AWTTransmissionManagerCore.backOffTransmission = function () {\r\n        if (this._currentBackoffCount < MaxBackoffCount) {\r\n            this._currentBackoffCount++;\r\n            this.clearTimeout();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Clears backoff for tranmission.\r\n     */\r\n    AWTTransmissionManagerCore.clearBackOff = function () {\r\n        if (this._currentBackoffCount > 0) {\r\n            this._currentBackoffCount = 0;\r\n            this.clearTimeout();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Resets the transmit profiles to the default profiles of Real Time, Near Real Time\r\n     * and Best Effort. This removes all the custom profiles that were loaded.\r\n     */\r\n    AWTTransmissionManagerCore._resetTransmitProfiles = function () {\r\n        this.clearTimeout();\r\n        this._initializeProfiles();\r\n        this._currentProfile = DataModels_1.AWT_REAL_TIME;\r\n        this.scheduleTimer();\r\n    };\r\n    AWTTransmissionManagerCore.clearTimeout = function () {\r\n        if (this._timeout > 0) {\r\n            clearTimeout(this._timeout);\r\n            this._timeout = -1;\r\n            this._timerCount = 0;\r\n        }\r\n    };\r\n    AWTTransmissionManagerCore._batchAndSendEvents = function () {\r\n        var priority = Enums_1.AWTEventPriority.High;\r\n        this._timerCount++;\r\n        if (this._timerCount * this._profiles[this._currentProfile][2] === this._profiles[this._currentProfile][0]) {\r\n            priority = Enums_1.AWTEventPriority.Low;\r\n            this._timerCount = 0;\r\n        }\r\n        else if (this._timerCount * this._profiles[this._currentProfile][2] === this._profiles[this._currentProfile][1]) {\r\n            priority = Enums_1.AWTEventPriority.Normal;\r\n        }\r\n        this._eventHandler.sendEventsForPriorityAndAbove(priority);\r\n        this._timeout = -1;\r\n        this.scheduleTimer();\r\n    };\r\n    AWTTransmissionManagerCore._initializeProfiles = function () {\r\n        this._profiles = {};\r\n        this._profiles[DataModels_1.AWT_REAL_TIME] = [4, 2, 1];\r\n        this._profiles[DataModels_1.AWT_NEAR_REAL_TIME] = [12, 6, 3];\r\n        this._profiles[DataModels_1.AWT_BEST_EFFORT] = [36, 18, 9];\r\n    };\r\n    AWTTransmissionManagerCore._newEventsAllowed = false;\r\n    AWTTransmissionManagerCore._currentProfile = DataModels_1.AWT_REAL_TIME;\r\n    AWTTransmissionManagerCore._timeout = -1;\r\n    AWTTransmissionManagerCore._currentBackoffCount = 0;\r\n    AWTTransmissionManagerCore._paused = false;\r\n    AWTTransmissionManagerCore._timerCount = 0;\r\n    AWTTransmissionManagerCore._lastUploadNowCall = 0;\r\n    return AWTTransmissionManagerCore;\r\n}());\r\nexports.default = AWTTransmissionManagerCore;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTTransmissionManagerCore.js\n// module id = 3\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Enums.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing the enums.\r\n*/\r\n/**\r\n * The AWTUserIdType enumeration contains a set of values that specify the type of user ID.\r\n * @enum {number}\r\n */\r\nvar AWTUserIdType;\r\n(function (AWTUserIdType) {\r\n    /**\r\n     * The user ID type is unknown.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * Microsoft Account ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MSACID\"] = 1] = \"MSACID\";\r\n    /**\r\n     * Microsoft .NET Passport Unique ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MSAPUID\"] = 2] = \"MSAPUID\";\r\n    /**\r\n     * Anonymous user ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"ANID\"] = 3] = \"ANID\";\r\n    /**\r\n     * Organization customer ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"OrgIdCID\"] = 4] = \"OrgIdCID\";\r\n    /**\r\n     * Microsoft Exchange Passport ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"OrgIdPUID\"] = 5] = \"OrgIdPUID\";\r\n    /**\r\n     * User object ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"UserObjectId\"] = 6] = \"UserObjectId\";\r\n    /**\r\n     * Skype ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Skype\"] = 7] = \"Skype\";\r\n    /**\r\n     * Yammer ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Yammer\"] = 8] = \"Yammer\";\r\n    /**\r\n     * E-mail address.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"EmailAddress\"] = 9] = \"EmailAddress\";\r\n    /**\r\n     * Telephone number.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"PhoneNumber\"] = 10] = \"PhoneNumber\";\r\n    /**\r\n     * SIP address.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"SipAddress\"] = 11] = \"SipAddress\";\r\n    /**\r\n     * Multiple unit identity.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MUID\"] = 12] = \"MUID\";\r\n})(AWTUserIdType = exports.AWTUserIdType || (exports.AWTUserIdType = {}));\r\n/**\r\n * The AWTSessionState enumeration contains a set of values that indicate the session state.\r\n * @enum {number}\r\n */\r\nvar AWTSessionState;\r\n(function (AWTSessionState) {\r\n    /**\r\n     * Session started.\r\n     */\r\n    AWTSessionState[AWTSessionState[\"Started\"] = 0] = \"Started\";\r\n    /**\r\n     * Session ended.\r\n     */\r\n    AWTSessionState[AWTSessionState[\"Ended\"] = 1] = \"Ended\";\r\n})(AWTSessionState = exports.AWTSessionState || (exports.AWTSessionState = {}));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/Enums.js\n// module id = 4\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTEventProperties.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Utils = require(\"../common/Utils\");\r\nvar Enums_1 = require(\"../common/Enums\");\r\n/**\r\n* The AWTEventProperties class is used for creating an event.\r\n*/\r\nvar AWTEventProperties = /** @class */ (function () {\r\n    /**\r\n     * The AWTEventProperties class constructor.\r\n     * @constructor\r\n     * @param {string} - [Optional] The name of the event.\r\n     */\r\n    function AWTEventProperties(name) {\r\n        this._event = { name: '', properties: {} };\r\n        if (name) {\r\n            this.setName(name);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the name of the event.\r\n     * @param {string} name - The name of the event.\r\n     */\r\n    AWTEventProperties.prototype.setName = function (name) {\r\n        this._event.name = name;\r\n    };\r\n    /**\r\n     * Gets the name of the event.\r\n     * @return {string|undefined} - The name of the event, or undefined if the name has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getName = function () {\r\n        return this._event.name;\r\n    };\r\n    /**\r\n     * Sets the base type of the event.\r\n     * @param {string} type - The base type of the event.\r\n     */\r\n    AWTEventProperties.prototype.setType = function (type) {\r\n        this._event.type = type;\r\n    };\r\n    /**\r\n     * Gets the base type of the event.\r\n     * @return {string|undefined} The base type of the event, or undefined if the base type has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getType = function () {\r\n        return this._event.type;\r\n    };\r\n    /**\r\n     * Sets the timestamp for the event.\r\n     * @param {number} timestampInEpochMillis - The timestamp (in milliseconds) since UNIX Epoch.\r\n     */\r\n    AWTEventProperties.prototype.setTimestamp = function (timestampInEpochMillis) {\r\n        this._event.timestamp = timestampInEpochMillis;\r\n    };\r\n    /**\r\n     * Gets the timestamp for the event.\r\n     * @return {number|undefined} The timestamp for the event, or undefined if it has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getTimestamp = function () {\r\n        return this._event.timestamp;\r\n    };\r\n    /**\r\n     * Sets the priority for sending the event. The default priority\r\n     * of the event is Normal.\r\n     * @param {enum} priority - An AWTEventPriority enumeration value that specifies the priority of the event.\r\n     */\r\n    AWTEventProperties.prototype.setEventPriority = function (priority) {\r\n        this._event.priority = priority;\r\n    };\r\n    /**\r\n     * Gets the priority for the event.\r\n     * @return {AWTEventPriority} - An AWTEventPriority enumeration value that specifies the priority of the event.\r\n     */\r\n    AWTEventProperties.prototype.getEventPriority = function () {\r\n        return this._event.priority;\r\n    };\r\n    /**\r\n     * Sets a property with a name and value. Optionally sets the property type.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setProperty = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: Enums_1.AWTPiiKind.NotSet, cc: Enums_1.AWTCustomerContentKind.NotSet };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Sets a property with a name, a value, and a PII. Optionally sets the property type.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} pii                    - The kind of PII for the property.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setPropertyWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: pii, cc: Enums_1.AWTCustomerContentKind.NotSet };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Sets a property with name, value and customer content. Optionally set the property type of the value.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} customerContent        - The customer content kind for the property.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setPropertyWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: Enums_1.AWTPiiKind.NotSet, cc: customerContent };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Gets the properties currently added to the event.\r\n     * @return {object} A Map<string, AWTEventProperty> containing the current properties.\r\n     */\r\n    AWTEventProperties.prototype.getPropertyMap = function () {\r\n        return this._event.properties;\r\n    };\r\n    /**\r\n     * Gets the event from this event properties object.\r\n     * @return {object} The event properties compiled into AWTEventData.\r\n     */\r\n    AWTEventProperties.prototype.getEvent = function () {\r\n        return this._event;\r\n    };\r\n    return AWTEventProperties;\r\n}());\r\nexports.default = AWTEventProperties;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTEventProperties.js\n// module id = 5\n// module chunks = 0","\"use strict\";\r\n/**\r\n* microsoft.bond.primitives.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Int64 = /** @class */ (function () {\r\n    function Int64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n        if (this.low < 0) {\r\n            this.high = -1;\r\n        }\r\n    }\r\n    Int64.prototype._Equals = function (numberStr) {\r\n        var tmp = new Int64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return Int64;\r\n}());\r\nexports.Int64 = Int64;\r\nvar UInt64 = /** @class */ (function () {\r\n    function UInt64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n    }\r\n    UInt64.prototype._Equals = function (numberStr) {\r\n        var tmp = new UInt64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return UInt64;\r\n}());\r\nexports.UInt64 = UInt64;\r\nvar Number = /** @class */ (function () {\r\n    function Number() {\r\n    }\r\n    Number._ToByte = function (value) {\r\n        return this._ToUInt8(value);\r\n    };\r\n    Number._ToUInt8 = function (value) {\r\n        return value & 0xff;\r\n    };\r\n    Number._ToInt32 = function (value) {\r\n        var signMask = (value & 0x80000000);\r\n        return (value & 0x7fffffff) | signMask;\r\n    };\r\n    Number._ToUInt32 = function (value) {\r\n        return value & 0xffffffff;\r\n    };\r\n    return Number;\r\n}());\r\nexports.Number = Number;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.primitives.js\n// module id = 6\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTAutoCollection_1 = require(\"./AWTAutoCollection\");\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar Enums_2 = require(\"./Enums\");\r\nvar UI_IDTYPE = 'UserInfo.IdType';\r\n/**\r\n *  Class to allow users to set semantic context properties.\r\n */\r\nvar AWTSemanticContext = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {boolean} _allowDeviceFields - Allow setting of device semantic context.\r\n     * @param {object} _properties         - The event properties where to add the semantic context.\r\n     */\r\n    function AWTSemanticContext(_allowDeviceFields, _properties) {\r\n        this._allowDeviceFields = _allowDeviceFields;\r\n        this._properties = _properties;\r\n    }\r\n    /**\r\n     * Sets the field AppInfo.Id with the given value.\r\n     * @param {string} appId  - The Id uniquely identifies the App from this this event originated.\r\n     * In the multi-tenant Aria Platform, this is the Application Id of the\r\n     * registered Application. Example, \"735d47645f7c4de69964e2c01888d6b6\".\r\n     */\r\n    AWTSemanticContext.prototype.setAppId = function (appId) {\r\n        this._addContext('AppInfo.Id', appId);\r\n    };\r\n    /**\r\n     * Sets the field AppInfo.Version with the given value.\r\n     * @param {string} appVersion  - The version of the App, retrieved programmatically where possible. This\r\n     * is app/platform dependent. Examples such as \"7.0.0.100\" for Skype,\r\n     * or \"12.0.30723.00 Update 3\" for Microsoft Visual Studio Ultimate 2013\r\n     */\r\n    AWTSemanticContext.prototype.setAppVersion = function (appVersion) {\r\n        this._addContext('AppInfo.Version', appVersion);\r\n    };\r\n    /**\r\n     * Sets the field AppInfo.Language with the given value.\r\n     * @param {string} appLanguage  - Language of the App in IETF language tag format, as described in RFC 4646.\r\n     * Examples of acceptable values include \"en\", \"pt-BR\" and \"zh-Hant-CN\".\r\n     */\r\n    AWTSemanticContext.prototype.setAppLanguage = function (appLanguage) {\r\n        this._addContext('AppInfo.Language', appLanguage);\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceId  - The device Id uniquely identifies the physical device, using platform\r\n     * available API's. This allows correlation against Aria Hardware Inventory.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceId = function (deviceId) {\r\n        if (this._allowDeviceFields) {\r\n            AWTAutoCollection_1.default.checkAndSaveDeviceId(deviceId);\r\n            this._addContext('DeviceInfo.Id', deviceId);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.OsName with the given value.\r\n     * @param {string} deviceOsName  - The name of the OS. The SDK should ensure this is a limited normalized\r\n     * set. Asimov is using very high level value e.g. Windows/Android/iOS.\r\n     * Examples such as \"iOS\" or \"Windows Phone\".\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceOsName = function (deviceOsName) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.OsName', deviceOsName);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.OsVersion with the given value.\r\n     * @param {string} deviceOsVersion  - The version of the OS, retrieved programmatically, which can be used\r\n     * for aggregation or filtering for scenarios like real time monitoring\r\n     * or metrics reporting. Flurry and GA provide aggregation at this level.\r\n     * Examples such as \"8.1.2\" for iOS, or \"8.1\" for Windows Phone.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceOsVersion = function (deviceOsVersion) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.OsVersion', deviceOsVersion);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceBrowserName  - he name of the OS. The SDK should ensure this is a limited normalized set.\r\n     * Examples such as \"Chrome\" or \"Edge\".\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceBrowserName = function (deviceBrowserName) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.BrowserName', deviceBrowserName);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceBrowserVersion  - The version of the browser, retrieved programmatically, which can be used\r\n     * for aggregation or filtering for scenarios like real time monitoring or metrics reporting.\r\n     * Examples such as \"57.0.2987.133\" for Chrome, or \"15.15063\" for Edge.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceBrowserVersion = function (deviceBrowserVersion) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.BrowserVersion', deviceBrowserVersion);\r\n        }\r\n    };\r\n    /**\r\n     * Set the device manufacturer context information of telemetry event.\r\n     * Can only be set at the LogManager level. Setting it via the object obtained from ILogger\r\n     * will be no-op.\r\n     * @param {string} deviceMake The manufacturer of the device, retrieved\r\n     *            programmatically where possible and is app/platform specific\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceMake = function (deviceMake) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.Make', deviceMake);\r\n        }\r\n    };\r\n    /**\r\n     * Set the device model context information of telemetry event.\r\n     * Can only be set at the LogManager level. Setting it via the object obtained from ILogger\r\n     * will be no-op.\r\n     * @param {string} deviceModel The model of the device, retrieved programmatically\r\n     *            where possible and is app/platform specific\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceModel = function (deviceModel) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.Model', deviceModel);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.Id with the given value.\r\n     * @param {string} userId     - The id uniquely identifies the user in an application-specific\r\n     * user namespace, such as a Skype ID in the Skype App. This may be empty for Apps\r\n     * which do not require user sign-in.\r\n     * @param {enum} pii        - Optional pii type for the user id.\r\n     * @param {enum} userIdType - Optional id type for the user id.\r\n     */\r\n    AWTSemanticContext.prototype.setUserId = function (userId, pii, userIdType) {\r\n        if (!isNaN(userIdType) && userIdType !== null && userIdType >= 0 && userIdType <= 12) {\r\n            this._addContext(UI_IDTYPE, userIdType.toString());\r\n        }\r\n        else {\r\n            var inferredUserIdType = void 0;\r\n            switch (pii) {\r\n                case Enums_1.AWTPiiKind.SipAddress:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.SipAddress;\r\n                    break;\r\n                case Enums_1.AWTPiiKind.PhoneNumber:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.PhoneNumber;\r\n                    break;\r\n                case Enums_1.AWTPiiKind.SmtpAddress:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.EmailAddress;\r\n                    break;\r\n                default:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.Unknown;\r\n                    break;\r\n            }\r\n            this._addContext(UI_IDTYPE, inferredUserIdType.toString());\r\n        }\r\n        if (isNaN(pii) || pii === null || pii === Enums_1.AWTPiiKind.NotSet || pii > 13) {\r\n            switch (userIdType) {\r\n                case Enums_2.AWTUserIdType.Skype:\r\n                    pii = Enums_1.AWTPiiKind.Identity;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.EmailAddress:\r\n                    pii = Enums_1.AWTPiiKind.SmtpAddress;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.PhoneNumber:\r\n                    pii = Enums_1.AWTPiiKind.PhoneNumber;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.SipAddress:\r\n                    pii = Enums_1.AWTPiiKind.SipAddress;\r\n                    break;\r\n                default:\r\n                    pii = Enums_1.AWTPiiKind.NotSet;\r\n                    break;\r\n            }\r\n        }\r\n        this._addContextWithPii('UserInfo.Id', userId, pii);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.AdvertisingId with the given value.\r\n     * @param {string} userAdvertisingId  - The AdvertisingId is the user-specific device id obtainable through\r\n     * platform API's. This may not be available if users choose to opt-out\r\n     * of this id, or if the underlying platform does not support it.\r\n     */\r\n    AWTSemanticContext.prototype.setUserAdvertisingId = function (userAdvertisingId) {\r\n        this._addContext('UserInfo.AdvertisingId', userAdvertisingId);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.TimeZone with the given value.\r\n     * @param {string} userTimeZone  - The user's time zone relative to UTC, in ISO 8601 time zone format.\r\n     * Examples of acceptable values include \"+00\", \"+07:00\", and \"-1130\".\r\n     */\r\n    AWTSemanticContext.prototype.setUserTimeZone = function (userTimeZone) {\r\n        this._addContext('UserInfo.TimeZone', userTimeZone);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.Language with the given value.\r\n     * @param {string} userLanguage  - The user's language in IETF language tag format, as described in RFC 4646.\r\n     * Examples of acceptable values include \"en\", \"pt-BR\" and \"zh-Hant-CN\".\r\n     */\r\n    AWTSemanticContext.prototype.setUserLanguage = function (userLanguage) {\r\n        this._addContext('UserInfo.Language', userLanguage);\r\n    };\r\n    AWTSemanticContext.prototype._addContext = function (key, value) {\r\n        if (typeof value === 'string') {\r\n            this._properties.setProperty(key, value);\r\n        }\r\n    };\r\n    AWTSemanticContext.prototype._addContextWithPii = function (key, value, pii) {\r\n        if (typeof value === 'string') {\r\n            this._properties.setPropertyWithPii(key, value, pii);\r\n        }\r\n    };\r\n    return AWTSemanticContext;\r\n}());\r\nexports.default = AWTSemanticContext;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTSemanticContext.js\n// module id = 7\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTAutoCollection.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2018\r\n*/\r\nvar Utils = require(\"../common/Utils\");\r\nvar DEVICE_ID_COOKIE = 'MicrosoftApplicationsTelemetryDeviceId';\r\nvar FIRSTLAUNCHTIME_COOKIE = 'MicrosoftApplicationsTelemetryFirstLaunchTime';\r\nvar BROWSERS = {\r\n    MSIE: 'MSIE',\r\n    CHROME: 'Chrome',\r\n    FIREFOX: 'Firefox',\r\n    SAFARI: 'Safari',\r\n    EDGE: 'Edge',\r\n    ELECTRON: 'Electron',\r\n    SKYPE_SHELL: 'SkypeShell',\r\n    PHANTOMJS: 'PhantomJS',\r\n    OPERA: 'Opera'\r\n};\r\nvar OPERATING_SYSTEMS = {\r\n    WINDOWS: 'Windows',\r\n    MACOSX: 'Mac OS X',\r\n    WINDOWS_PHONE: 'Windows Phone',\r\n    WINDOWS_RT: 'Windows RT',\r\n    IOS: 'iOS',\r\n    ANDROID: 'Android',\r\n    LINUX: 'Linux',\r\n    CROS: 'Chrome OS',\r\n    UNKNOWN: 'Unknown'\r\n};\r\nvar OSNAMEREGEX = {\r\n    WIN: /(windows|win32)/i,\r\n    WINRT: / arm;/i,\r\n    WINPHONE: /windows\\sphone\\s\\d+\\.\\d+/i,\r\n    OSX: /(macintosh|mac os x)/i,\r\n    IOS: /(iPad|iPhone|iPod)(?=.*like Mac OS X)/i,\r\n    LINUX: /(linux|joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk)/i,\r\n    ANDROID: /android/i,\r\n    CROS: /CrOS/i\r\n};\r\nvar VERSION_MAPPINGS = {\r\n    '5.1': 'XP',\r\n    '6.0': 'Vista',\r\n    '6.1': '7',\r\n    '6.2': '8',\r\n    '6.3': '8.1',\r\n    '10.0': '10'\r\n};\r\nvar REGEX_VERSION = '([\\\\d,.]+)';\r\nvar REGEX_VERSION_MAC = '([\\\\d,_,.]+)';\r\nvar UNKNOWN = 'Unknown';\r\nvar UNDEFINED = 'undefined';\r\n/**\r\n * Class that stores semantic properties.\r\n */\r\nvar AWTAutoCollection = /** @class */ (function () {\r\n    function AWTAutoCollection() {\r\n    }\r\n    /**\r\n     * Add a property storage override to override the usage of document.cookie to store\r\n     * properties. The property storage object should implement both getProperty and setProperty, otherwise\r\n     * it will be rejected.\r\n     * @param {object} propertyStorage - Property storage object which is used for storing SDK properties.\r\n     * @return {boolean} True if the property storage override was accepted, false otherwise.\r\n     */\r\n    AWTAutoCollection.addPropertyStorageOverride = function (propertyStorage) {\r\n        if (propertyStorage) {\r\n            this._propertyStorage = propertyStorage;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Auto collect semantic context properties.\r\n     * @param {object} semantContext   - The semantic context to use to set auto collected information.\r\n     * @param {boolean} disableCookies - Determines if setting cookies is disabled.\r\n     * @param {object} userAgent       - UserAgent string to be used for auto collection of semantic properties.\r\n     */\r\n    AWTAutoCollection.autoCollect = function (semanticContext, disableCookies, userAgent) {\r\n        this._semanticContext = semanticContext;\r\n        this._disableCookies = disableCookies;\r\n        this._autoCollect();\r\n        if (!userAgent && typeof navigator !== UNDEFINED) {\r\n            userAgent = navigator.userAgent || '';\r\n        }\r\n        this._autoCollectFromUserAgent(userAgent);\r\n        if (this._disableCookies && !this._propertyStorage) {\r\n            this._deleteCookie(DEVICE_ID_COOKIE);\r\n            this._deleteCookie(FIRSTLAUNCHTIME_COOKIE);\r\n            return;\r\n        }\r\n        //Only collect device id if it can be stored\r\n        if (this._propertyStorage || (this._areCookiesAvailable && !this._disableCookies)) {\r\n            this._autoCollectDeviceId();\r\n        }\r\n    };\r\n    /**\r\n     * Checks if the device id stored is the same as the new device id. If they are not,\r\n     * store the new id and store a new first launch time.\r\n     * @param {string} deviceId - The new device id.\r\n     */\r\n    AWTAutoCollection.checkAndSaveDeviceId = function (deviceId) {\r\n        if (deviceId) {\r\n            var oldDeviceId = this._getData(DEVICE_ID_COOKIE);\r\n            if (oldDeviceId !== deviceId) {\r\n                this._saveData(DEVICE_ID_COOKIE, deviceId);\r\n                this._saveData(FIRSTLAUNCHTIME_COOKIE, Utils.getISOString(new Date()));\r\n            }\r\n            this._setFirstLaunchTime(this._getData(FIRSTLAUNCHTIME_COOKIE));\r\n        }\r\n    };\r\n    /**\r\n     * Auto collect the device SDK Id.\r\n     */\r\n    AWTAutoCollection._autoCollectDeviceId = function () {\r\n        var deviceId = this._getData(DEVICE_ID_COOKIE);\r\n        if (!deviceId) {\r\n            deviceId = Utils.newGuid();\r\n            this.checkAndSaveDeviceId(deviceId);\r\n        }\r\n        else {\r\n            this._setFirstLaunchTime(this._getData(FIRSTLAUNCHTIME_COOKIE));\r\n        }\r\n        this._semanticContext.setDeviceId(deviceId);\r\n    };\r\n    AWTAutoCollection._autoCollect = function () {\r\n        //Get app language\r\n        if (typeof document !== UNDEFINED && document.documentElement) {\r\n            this._semanticContext.setAppLanguage(document.documentElement.lang);\r\n        }\r\n        //Get user language\r\n        if (typeof navigator !== UNDEFINED) {\r\n            this._semanticContext.setUserLanguage(navigator.userLanguage || navigator.language);\r\n        }\r\n        //Get time zone\r\n        var timeZone = new Date().getTimezoneOffset();\r\n        var minutes = timeZone % 60;\r\n        var hours = (timeZone - minutes) / 60;\r\n        var timeZonePrefix = '+';\r\n        if (hours > 0) {\r\n            timeZonePrefix = '-';\r\n        }\r\n        hours = Math.abs(hours);\r\n        minutes = Math.abs(minutes);\r\n        this._semanticContext.setUserTimeZone(timeZonePrefix + (hours < 10 ? '0' + hours : hours.toString()) + ':'\r\n            + (minutes < 10 ? '0' + minutes : minutes.toString()));\r\n    };\r\n    AWTAutoCollection._autoCollectFromUserAgent = function (userAgent) {\r\n        if (userAgent) {\r\n            var browserName = this._getBrowserName(userAgent);\r\n            this._semanticContext.setDeviceBrowserName(browserName);\r\n            this._semanticContext.setDeviceBrowserVersion(this._getBrowserVersion(userAgent, browserName));\r\n            var osName = this._getOsName(userAgent);\r\n            this._semanticContext.setDeviceOsName(osName);\r\n            this._semanticContext.setDeviceOsVersion(this._getOsVersion(userAgent, osName));\r\n        }\r\n    };\r\n    AWTAutoCollection._getBrowserName = function (userAgent) {\r\n        //Check for Opera first        \r\n        if (this._userAgentContainsString('OPR/', userAgent)) {\r\n            return BROWSERS.OPERA;\r\n        }\r\n        //Check for Phantom JS\r\n        if (this._userAgentContainsString(BROWSERS.PHANTOMJS, userAgent)) {\r\n            return BROWSERS.PHANTOMJS;\r\n        }\r\n        //Check for Edge\r\n        if (this._userAgentContainsString(BROWSERS.EDGE, userAgent)) {\r\n            return BROWSERS.EDGE;\r\n        }\r\n        //Check for Electron\r\n        if (this._userAgentContainsString(BROWSERS.ELECTRON, userAgent)) {\r\n            return BROWSERS.ELECTRON;\r\n        }\r\n        //Check for Chrome\r\n        if (this._userAgentContainsString(BROWSERS.CHROME, userAgent)) {\r\n            return BROWSERS.CHROME;\r\n        }\r\n        //Check for Internet Explorer\r\n        if (this._userAgentContainsString('Trident', userAgent)) {\r\n            return BROWSERS.MSIE;\r\n        }\r\n        //Check for Firefox\r\n        if (this._userAgentContainsString(BROWSERS.FIREFOX, userAgent)) {\r\n            return BROWSERS.FIREFOX;\r\n        }\r\n        //Check for Safari\r\n        if (this._userAgentContainsString(BROWSERS.SAFARI, userAgent)) {\r\n            return BROWSERS.SAFARI;\r\n        }\r\n        //Check for Skype shell\r\n        if (this._userAgentContainsString(BROWSERS.SKYPE_SHELL, userAgent)) {\r\n            return BROWSERS.SKYPE_SHELL;\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._setFirstLaunchTime = function (flt) {\r\n        if (!isNaN(flt)) {\r\n            var fltDate = new Date();\r\n            fltDate.setTime(parseInt(flt, 10));\r\n            flt = Utils.getISOString(fltDate);\r\n        }\r\n        this.firstLaunchTime = flt;\r\n    };\r\n    AWTAutoCollection._userAgentContainsString = function (searchString, userAgent) {\r\n        return userAgent.indexOf(searchString) > -1;\r\n    };\r\n    AWTAutoCollection._getBrowserVersion = function (userAgent, browserName) {\r\n        if (browserName === BROWSERS.MSIE) {\r\n            return this._getIeVersion(userAgent);\r\n        }\r\n        else {\r\n            return this._getOtherVersion(browserName, userAgent);\r\n        }\r\n    };\r\n    AWTAutoCollection._getIeVersion = function (userAgent) {\r\n        var classicIeVersionMatches = userAgent.match(new RegExp(BROWSERS.MSIE + ' ' + REGEX_VERSION));\r\n        if (classicIeVersionMatches) {\r\n            return classicIeVersionMatches[1];\r\n        }\r\n        else {\r\n            var ieVersionMatches = userAgent.match(new RegExp('rv:' + REGEX_VERSION));\r\n            if (ieVersionMatches) {\r\n                return ieVersionMatches[1];\r\n            }\r\n        }\r\n    };\r\n    AWTAutoCollection._getOtherVersion = function (browserString, userAgent) {\r\n        if (browserString === BROWSERS.SAFARI) {\r\n            browserString = 'Version';\r\n        }\r\n        var matches = userAgent.match(new RegExp(browserString + '/' + REGEX_VERSION));\r\n        if (matches) {\r\n            return matches[1];\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getOsName = function (userAgent) {\r\n        if (userAgent.match(OSNAMEREGEX.WINPHONE)) {\r\n            return OPERATING_SYSTEMS.WINDOWS_PHONE;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.WINRT)) {\r\n            return OPERATING_SYSTEMS.WINDOWS_RT;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.IOS)) {\r\n            return OPERATING_SYSTEMS.IOS;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.ANDROID)) {\r\n            return OPERATING_SYSTEMS.ANDROID;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.LINUX)) {\r\n            return OPERATING_SYSTEMS.LINUX;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.OSX)) {\r\n            return OPERATING_SYSTEMS.MACOSX;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.WIN)) {\r\n            return OPERATING_SYSTEMS.WINDOWS;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.CROS)) {\r\n            return OPERATING_SYSTEMS.CROS;\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getOsVersion = function (userAgent, osName) {\r\n        if (osName === OPERATING_SYSTEMS.WINDOWS) {\r\n            return this._getGenericOsVersion(userAgent, 'Windows NT');\r\n        }\r\n        if (osName === OPERATING_SYSTEMS.ANDROID) {\r\n            return this._getGenericOsVersion(userAgent, osName);\r\n        }\r\n        if (osName === OPERATING_SYSTEMS.MACOSX) {\r\n            return this._getMacOsxVersion(userAgent);\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getGenericOsVersion = function (userAgent, osName) {\r\n        var ntVersionMatches = userAgent.match(new RegExp(osName + ' ' + REGEX_VERSION));\r\n        if (ntVersionMatches) {\r\n            if (VERSION_MAPPINGS[ntVersionMatches[1]]) {\r\n                return VERSION_MAPPINGS[ntVersionMatches[1]];\r\n            }\r\n            return ntVersionMatches[1];\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getMacOsxVersion = function (userAgent) {\r\n        var macOsxVersionInUserAgentMatches = userAgent.match(new RegExp(OPERATING_SYSTEMS.MACOSX + ' ' + REGEX_VERSION_MAC));\r\n        if (macOsxVersionInUserAgentMatches) {\r\n            var versionString = macOsxVersionInUserAgentMatches[1].replace(/_/g, '.');\r\n            if (versionString) {\r\n                var delimiter = this._getDelimiter(versionString);\r\n                if (delimiter) {\r\n                    var components = versionString.split(delimiter);\r\n                    return components[0];\r\n                }\r\n                else {\r\n                    return versionString;\r\n                }\r\n            }\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getDelimiter = function (versionString) {\r\n        if (versionString.indexOf('.') > -1) {\r\n            return '.';\r\n        }\r\n        if (versionString.indexOf('_') > -1) {\r\n            return '_';\r\n        }\r\n        return null;\r\n    };\r\n    AWTAutoCollection._saveData = function (name, value) {\r\n        if (this._propertyStorage) {\r\n            this._propertyStorage.setProperty(name, value);\r\n        }\r\n        else if (this._areCookiesAvailable) {\r\n            //Expires in 365 days\r\n            var date = new Date();\r\n            date.setTime(date.getTime() + 31536000000 /*365 days in milliseconds*/);\r\n            var expires = 'expires=' + date.toUTCString();\r\n            document.cookie = name + '=' + value + '; ' + expires;\r\n        }\r\n    };\r\n    AWTAutoCollection._getData = function (name) {\r\n        if (this._propertyStorage) {\r\n            return this._propertyStorage.getProperty(name) || '';\r\n        }\r\n        else if (this._areCookiesAvailable) {\r\n            name = name + '=';\r\n            var ca = document.cookie.split(';');\r\n            for (var i = 0; i < ca.length; i++) {\r\n                var c = ca[i];\r\n                var j = 0;\r\n                while (c.charAt(j) === ' ') {\r\n                    j++;\r\n                }\r\n                c = c.substring(j);\r\n                if (c.indexOf(name) === 0) {\r\n                    return c.substring(name.length, c.length);\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n    AWTAutoCollection._deleteCookie = function (name) {\r\n        if (this._areCookiesAvailable) {\r\n            document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n        }\r\n    };\r\n    AWTAutoCollection._disableCookies = false;\r\n    AWTAutoCollection._areCookiesAvailable = typeof document !== UNDEFINED && typeof document.cookie !== UNDEFINED;\r\n    return AWTAutoCollection;\r\n}());\r\nexports.default = AWTAutoCollection;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTAutoCollection.js\n// module id = 8\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AWT_REAL_TIME = 'REAL_TIME';\r\nexports.AWT_NEAR_REAL_TIME = 'NEAR_REAL_TIME';\r\nexports.AWT_BEST_EFFORT = 'BEST_EFFORT';\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/DataModels.js\n// module id = 9\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTLogger.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar Enums_2 = require(\"./Enums\");\r\nvar AWTEventProperties_1 = require(\"./AWTEventProperties\");\r\nvar Utils = require(\"../common/Utils\");\r\nvar AWTStatsManager_1 = require(\"../common/AWTStatsManager\");\r\nvar AWTNotificationManager_1 = require(\"../common/AWTNotificationManager\");\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\nvar AWTLogManagerSettings_1 = require(\"./AWTLogManagerSettings\");\r\nvar Version = require(\"./Version\");\r\nvar AWTSemanticContext_1 = require(\"./AWTSemanticContext\");\r\nvar AWTAutoCollection_1 = require(\"./AWTAutoCollection\");\r\n/**\r\n* The AWTLogger class defines a logger.\r\n*/\r\nvar AWTLogger = /** @class */ (function () {\r\n    /**\r\n     * The AWTLogger class constructor.\r\n     * @constructor\r\n     * @param {string} _apiKey - The API key (also known as application key, and tenant token).\r\n     */\r\n    function AWTLogger(_apiKey) {\r\n        this._apiKey = _apiKey;\r\n        this._contextProperties = new AWTEventProperties_1.default();\r\n        this._semanticContext = new AWTSemanticContext_1.default(false, this._contextProperties);\r\n        this._sessionStartTime = 0;\r\n        this._createInitId();\r\n    }\r\n    /**\r\n     * Sets the context sent with every event from this logger.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContext = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setProperty(name, value, type);\r\n    };\r\n    /**\r\n     * Sets context that will be sent with every event from this logger, and tags it as PII.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} pii                    - The kind of PII for the context property, as one of the AWTPiiKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContextWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setPropertyWithPii(name, value, pii, type);\r\n    };\r\n    /**\r\n     * Sets the context that sent with every event from this logger, and tags it as customer content.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} customerContent        - The customer content kind, as one of the AWTCustomerContentKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContextWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setPropertyWithCustomerContent(name, value, customerContent, type);\r\n    };\r\n    /**\r\n     * Gets the logger semantic context.\r\n     * <b>Note:</b> Device properties are not permitted at the logger level, but you can set them\r\n     * at the global level using the AWTLogManager class.\r\n     *\r\n     * @return A AWTSemanticContext object that you can use to set common semantic properties.\r\n     */\r\n    AWTLogger.prototype.getSemanticContext = function () {\r\n        return this._semanticContext;\r\n    };\r\n    /**\r\n     * Logs a custom event with the specified name and fields - to track information\r\n     * such as how a particular feature is used.\r\n     * @param {Object} event - Can be either an AWTEventProperties object or an AWTEventData object or an event name.\r\n     */\r\n    AWTLogger.prototype.logEvent = function (event) {\r\n        if (AWTLogManagerSettings_1.default.loggingEnabled) {\r\n            if (!this._apiKey) {\r\n                this._apiKey = AWTLogManagerSettings_1.default.defaultTenantToken;\r\n                this._createInitId();\r\n            }\r\n            var sanitizeProperties = true;\r\n            if (Utils.isString(event)) {\r\n                event = {\r\n                    name: event\r\n                };\r\n            }\r\n            else if (event instanceof AWTEventProperties_1.default) {\r\n                event = event.getEvent();\r\n                //AWTEventProperties will already sanitize properties\r\n                sanitizeProperties = false;\r\n            }\r\n            AWTStatsManager_1.default.eventReceived(this._apiKey);\r\n            AWTLogger._logEvent(AWTLogger._getInternalEvent(event, this._apiKey, sanitizeProperties), this._contextProperties);\r\n        }\r\n    };\r\n    /**\r\n     * Logs the session state.\r\n     * <b>Note:</b> Calling Logging session <i>start</i> while a session already exists will produce a no-op. Similarly, calling logging\r\n     * session <i>end</i> while a session does not exist will also produce a no-op.\r\n     * @param {enum} state         - The session's state.\r\n     * @param {obbject} properties - [Optional] Properties of the session event as either a AWTEventProperties object,\r\n     * or a AWTEventData object.\r\n     */\r\n    AWTLogger.prototype.logSession = function (state, properties) {\r\n        if (AWTLogManagerSettings_1.default.sessionEnabled) {\r\n            var sessionEvent = {\r\n                name: 'session',\r\n                type: 'session',\r\n                properties: {}\r\n            };\r\n            AWTLogger._addPropertiesToEvent(sessionEvent, properties);\r\n            sessionEvent.priority = Enums_1.AWTEventPriority.High;\r\n            if (state === Enums_2.AWTSessionState.Started) {\r\n                if (this._sessionStartTime > 0) {\r\n                    //Session start called out of order. Session start time being non zero indicates an ongoing session.\r\n                    return;\r\n                }\r\n                this._sessionStartTime = (new Date()).getTime();\r\n                this._sessionId = Utils.newGuid();\r\n                this.setContext('Session.Id', this._sessionId);\r\n                sessionEvent.properties['Session.State'] = 'Started';\r\n            }\r\n            else if (state === Enums_2.AWTSessionState.Ended) {\r\n                if (this._sessionStartTime === 0) {\r\n                    //Session end called out of order. Session start time being zero indicates no ongoing session.\r\n                    return;\r\n                }\r\n                var sessionDurationSec = Math.floor(((new Date()).getTime() - this._sessionStartTime) / 1000);\r\n                sessionEvent.properties['Session.Id'] = this._sessionId;\r\n                sessionEvent.properties['Session.State'] = 'Ended';\r\n                sessionEvent.properties['Session.Duration'] = sessionDurationSec.toString();\r\n                sessionEvent.properties['Session.DurationBucket'] =\r\n                    AWTLogger._getSessionDurationFromTime(sessionDurationSec);\r\n                this._sessionStartTime = 0;\r\n                this.setContext('Session.Id', null);\r\n                this._sessionId = undefined;\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n            sessionEvent.properties['Session.FirstLaunchTime'] = AWTAutoCollection_1.default.firstLaunchTime;\r\n            this.logEvent(sessionEvent);\r\n        }\r\n    };\r\n    /**\r\n     * Gets the session ID for the ongoing session.\r\n     * @return {string} A string that contains the session ID for the ongoing session. Returns undefined if there is\r\n     * no ongoing session.\r\n     */\r\n    AWTLogger.prototype.getSessionId = function () {\r\n        return this._sessionId;\r\n    };\r\n    /**\r\n     * Logs a failure event, such as an application exception.\r\n     * @param {string} signature  - A string that identifies the bucket of the failure.\r\n     * @param {string} detail     - A string that contains the a description of the failure.\r\n     * @param {string} category   - [Optional] A string that identifies the category of the failure, such as an application error,\r\n     * a hang, or a crash.\r\n     * @param {string} id         - [Optional] A string that that uniquely identifies this failure.\r\n     * @param {object} properties - [Optional] Properties of the failure event, as either an AWTEventProperties object or an\r\n     * AWTEventData object. This value can also be null.\r\n     */\r\n    AWTLogger.prototype.logFailure = function (signature, detail, category, id, properties) {\r\n        if (!signature || !detail) {\r\n            return;\r\n        }\r\n        var failureEvent = {\r\n            name: 'failure',\r\n            type: 'failure',\r\n            properties: {}\r\n        };\r\n        AWTLogger._addPropertiesToEvent(failureEvent, properties);\r\n        failureEvent.properties['Failure.Signature'] = signature;\r\n        failureEvent.properties['Failure.Detail'] = detail;\r\n        if (category) {\r\n            failureEvent.properties['Failure.Category'] = category;\r\n        }\r\n        if (id) {\r\n            failureEvent.properties['Failure.Id'] = id;\r\n        }\r\n        failureEvent.priority = Enums_1.AWTEventPriority.High;\r\n        this.logEvent(failureEvent);\r\n    };\r\n    /**\r\n     * Logs a page view event which is normally a result of a user action on a UI page - such as search query,\r\n     * a content request, or a page navigation.\r\n     *\r\n     * @param {string} id          - A string that uniquely identifies this page.\r\n     * @param {string} pageName    - The name of the page.\r\n     * @param {string} category    - [Optional] A string that contains the category to which this page belongs.\r\n     * @param {string} uri         - [Optional] A string that contains the URI of this page.\r\n     * @param {string} referrerUri - [Optional] A string that contains the URI that refers to this page.\r\n     * @param {object} properties  - [Optional] Properties of the page view event, as an AWTEventProperties object.\r\n     * This value can also be null.\r\n     */\r\n    AWTLogger.prototype.logPageView = function (id, pageName, category, uri, referrerUri, properties) {\r\n        if (!id || !pageName) {\r\n            return;\r\n        }\r\n        var pageViewEvent = {\r\n            name: 'pageview',\r\n            type: 'pageview',\r\n            properties: {}\r\n        };\r\n        AWTLogger._addPropertiesToEvent(pageViewEvent, properties);\r\n        pageViewEvent.properties['PageView.Id'] = id;\r\n        pageViewEvent.properties['PageView.Name'] = pageName;\r\n        if (category) {\r\n            pageViewEvent.properties['PageView.Category'] = category;\r\n        }\r\n        if (uri) {\r\n            pageViewEvent.properties['PageView.Uri'] = uri;\r\n        }\r\n        if (referrerUri) {\r\n            pageViewEvent.properties['PageView.ReferrerUri'] = referrerUri;\r\n        }\r\n        this.logEvent(pageViewEvent);\r\n    };\r\n    AWTLogger.prototype._createInitId = function () {\r\n        // If no init ID for this tenant token exists, create one\r\n        if (!AWTLogger._initIdMap[this._apiKey] && this._apiKey) {\r\n            AWTLogger._initIdMap[this._apiKey] = Utils.newGuid();\r\n        }\r\n    };\r\n    AWTLogger._addPropertiesToEvent = function (event, propertiesEvent) {\r\n        if (propertiesEvent) {\r\n            if (propertiesEvent instanceof AWTEventProperties_1.default) {\r\n                propertiesEvent = propertiesEvent.getEvent();\r\n            }\r\n            if (propertiesEvent.name) {\r\n                event.name = propertiesEvent.name;\r\n            }\r\n            if (propertiesEvent.priority) {\r\n                event.priority = propertiesEvent.priority;\r\n            }\r\n            for (var name_1 in propertiesEvent.properties) {\r\n                if (propertiesEvent.properties.hasOwnProperty(name_1)) {\r\n                    event.properties[name_1] = propertiesEvent.properties[name_1];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AWTLogger._getSessionDurationFromTime = function (timeInSec) {\r\n        if (timeInSec < 0) {\r\n            return 'Undefined';\r\n        }\r\n        else if (timeInSec <= 3) {\r\n            return 'UpTo3Sec';\r\n        }\r\n        else if (timeInSec <= 10) {\r\n            return 'UpTo10Sec';\r\n        }\r\n        else if (timeInSec <= 30) {\r\n            return 'UpTo30Sec';\r\n        }\r\n        else if (timeInSec <= 60) {\r\n            return 'UpTo60Sec';\r\n        }\r\n        else if (timeInSec <= 180) {\r\n            return 'UpTo3Min';\r\n        }\r\n        else if (timeInSec <= 600) {\r\n            return 'UpTo10Min';\r\n        }\r\n        else if (timeInSec <= 1800) {\r\n            return 'UpTo30Min';\r\n        }\r\n        return 'Above30Min';\r\n    };\r\n    AWTLogger._logEvent = function (eventWithMetaData, contextProperties) {\r\n        if (!eventWithMetaData.name || !Utils.isString(eventWithMetaData.name)) {\r\n            AWTNotificationManager_1.default.eventsRejected([eventWithMetaData], Enums_1.AWTEventsRejectedReason.InvalidEvent);\r\n            return;\r\n        }\r\n        eventWithMetaData.name = eventWithMetaData.name.toLowerCase();\r\n        //Check if name is a string and replace . with _ if it is. Drop otherwise.\r\n        eventWithMetaData.name = eventWithMetaData.name.replace(Utils.EventNameDotRegex, '_');\r\n        if (!eventWithMetaData.type || !Utils.isString(eventWithMetaData.type)) {\r\n            eventWithMetaData.type = 'custom';\r\n        }\r\n        else {\r\n            eventWithMetaData.type = eventWithMetaData.type.toLowerCase();\r\n        }\r\n        //Validate name and type and drop if invalid\r\n        if (!Utils.EventNameAndTypeRegex.test(eventWithMetaData.name) || !Utils.EventNameAndTypeRegex.test(eventWithMetaData.type)) {\r\n            AWTNotificationManager_1.default.eventsRejected([eventWithMetaData], Enums_1.AWTEventsRejectedReason.InvalidEvent);\r\n            return;\r\n        }\r\n        //Add the timestamp if the timestamp is not set or is negative.\r\n        if (!Utils.isNumber(eventWithMetaData.timestamp) || eventWithMetaData.timestamp < 0) {\r\n            eventWithMetaData.timestamp = (new Date()).getTime();\r\n        }\r\n        //If no properties create one for EventInfo and context \r\n        if (!eventWithMetaData.properties) {\r\n            eventWithMetaData.properties = {};\r\n        }\r\n        // Logger ContextProperties\r\n        this._addContextIfAbsent(eventWithMetaData, contextProperties.getPropertyMap());\r\n        // LogManager ContextProperties\r\n        this._addContextIfAbsent(eventWithMetaData, AWTLogManagerSettings_1.default.logManagerContext.getPropertyMap());\r\n        //Add event info\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.InitId', this._getInitId(eventWithMetaData.apiKey));\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Sequence', this._getSequenceId(eventWithMetaData.apiKey));\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.SdkVersion', Version.FullVersionString);\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Name', eventWithMetaData.name);\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Time', (new Date(eventWithMetaData.timestamp)).toISOString());\r\n        if (!Utils.isPriority(eventWithMetaData.priority)) {\r\n            eventWithMetaData.priority = Enums_1.AWTEventPriority.Normal;\r\n        }\r\n        this._sendEvent(eventWithMetaData);\r\n    };\r\n    AWTLogger._addContextIfAbsent = function (event, contextProperties) {\r\n        if (contextProperties) {\r\n            for (var name_2 in contextProperties) {\r\n                if (contextProperties.hasOwnProperty(name_2)) {\r\n                    if (!event.properties[name_2]) {\r\n                        event.properties[name_2] = contextProperties[name_2];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AWTLogger._setDefaultProperty = function (event, name, value) {\r\n        event.properties[name] = { value: value, pii: Enums_1.AWTPiiKind.NotSet, type: Enums_1.AWTPropertyType.String };\r\n    };\r\n    AWTLogger._sendEvent = function (event) {\r\n        AWTTransmissionManagerCore_1.default.sendEvent(event);\r\n    };\r\n    AWTLogger._getInternalEvent = function (event, apiKey, sanitizeProperties) {\r\n        var internalEvent = event;\r\n        internalEvent.id = Utils.newGuid();\r\n        internalEvent.apiKey = apiKey;\r\n        internalEvent.properties = internalEvent.properties || {};\r\n        if (sanitizeProperties) {\r\n            // Event Properties \r\n            for (var name_3 in internalEvent.properties) {\r\n                if (internalEvent.properties.hasOwnProperty(name_3)) {\r\n                    internalEvent.properties[name_3] = Utils.sanitizeProperty(name_3, internalEvent.properties[name_3]);\r\n                    if (internalEvent.properties[name_3] === null) {\r\n                        delete internalEvent.properties[name_3];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return internalEvent;\r\n    };\r\n    AWTLogger._getInitId = function (apiKey) {\r\n        return AWTLogger._initIdMap[apiKey];\r\n    };\r\n    AWTLogger._getSequenceId = function (apiKey) {\r\n        if (AWTLogger._sequenceIdMap[apiKey] === undefined) {\r\n            AWTLogger._sequenceIdMap[apiKey] = 0;\r\n        }\r\n        return (++AWTLogger._sequenceIdMap[apiKey]).toString();\r\n    };\r\n    AWTLogger._sequenceIdMap = {};\r\n    AWTLogger._initIdMap = {};\r\n    return AWTLogger;\r\n}());\r\nexports.default = AWTLogger;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogger.js\n// module id = 10\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTStatsManager.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Utils = require(\"./Utils\");\r\nvar AWTNotificationManager_1 = require(\"./AWTNotificationManager\");\r\nvar Enums_1 = require(\"./Enums\");\r\nvar StatsTimer = 60000;\r\n/**\r\n* Class that manages the stats.\r\n*/\r\nvar AWTStatsManager = /** @class */ (function () {\r\n    function AWTStatsManager() {\r\n    }\r\n    /**\r\n     * Intiailizes the stats collection.\r\n     * @param {function} sendStats - The function to call when the stats are ready to be sent.\r\n     */\r\n    AWTStatsManager.initialize = function (sendStats) {\r\n        var _this = this;\r\n        this._sendStats = sendStats;\r\n        this._isInitalized = true;\r\n        AWTNotificationManager_1.default.addNotificationListener({\r\n            eventsSent: function (events) {\r\n                _this._addStat('records_sent_count', events.length, events[0].apiKey);\r\n            },\r\n            eventsDropped: function (events, reason) {\r\n                switch (reason) {\r\n                    case Enums_1.AWTEventsDroppedReason.NonRetryableStatus:\r\n                        _this._addStat('d_send_fail', events.length, events[0].apiKey);\r\n                        _this._addStat('records_dropped_count', events.length, events[0].apiKey);\r\n                        break;\r\n                    case Enums_1.AWTEventsDroppedReason.QueueFull:\r\n                        _this._addStat('d_queue_full', events.length, events[0].apiKey);\r\n                        break;\r\n                }\r\n            },\r\n            eventsRejected: function (events, reason) {\r\n                switch (reason) {\r\n                    case Enums_1.AWTEventsRejectedReason.InvalidEvent:\r\n                        _this._addStat('r_inv', events.length, events[0].apiKey);\r\n                        break;\r\n                    case Enums_1.AWTEventsRejectedReason.KillSwitch:\r\n                        _this._addStat('r_kl', events.length, events[0].apiKey);\r\n                        break;\r\n                    case Enums_1.AWTEventsRejectedReason.SizeLimitExceeded:\r\n                        _this._addStat('r_size', events.length, events[0].apiKey);\r\n                        break;\r\n                }\r\n                _this._addStat('r_count', events.length, events[0].apiKey);\r\n            },\r\n            eventsRetrying: null\r\n        });\r\n        setTimeout(function () { return _this.flush(); }, StatsTimer);\r\n    };\r\n    /**\r\n     * Flush the current stats and stop the stats collection.\r\n     */\r\n    AWTStatsManager.teardown = function () {\r\n        if (this._isInitalized) {\r\n            this.flush();\r\n            this._isInitalized = false;\r\n        }\r\n    };\r\n    /**\r\n     * Increments the stat for event received.\r\n     * @param {string} apiKey - The apiKey for which the event was received\r\n     */\r\n    AWTStatsManager.eventReceived = function (apiKey) {\r\n        AWTStatsManager._addStat('records_received_count', 1, apiKey);\r\n    };\r\n    /**\r\n     * Creates an event for each tenant token which had a stat and calls the\r\n     * sendStats for that token.\r\n     */\r\n    AWTStatsManager.flush = function () {\r\n        var _this = this;\r\n        if (this._isInitalized) {\r\n            for (var tenantId in this._stats) {\r\n                if (this._stats.hasOwnProperty(tenantId)) {\r\n                    this._sendStats(this._stats[tenantId], tenantId);\r\n                }\r\n            }\r\n            this._stats = {};\r\n            setTimeout(function () { return _this.flush(); }, StatsTimer);\r\n        }\r\n    };\r\n    AWTStatsManager._addStat = function (statName, value, apiKey) {\r\n        if (this._isInitalized && apiKey !== Utils.StatsApiKey) {\r\n            var tenantId = Utils.getTenantId(apiKey);\r\n            if (!this._stats[tenantId]) {\r\n                this._stats[tenantId] = {};\r\n            }\r\n            if (!this._stats[tenantId][statName]) {\r\n                this._stats[tenantId][statName] = value;\r\n            }\r\n            else {\r\n                this._stats[tenantId][statName] = this._stats[tenantId][statName] + value;\r\n            }\r\n        }\r\n    };\r\n    AWTStatsManager._isInitalized = false;\r\n    AWTStatsManager._stats = {};\r\n    return AWTStatsManager;\r\n}());\r\nexports.default = AWTStatsManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTStatsManager.js\n// module id = 11\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTSerializer.ts\r\n* @author Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Bond = require(\"../bond/microsoft.bond\");\r\nvar Enums_1 = require(\"./Enums\");\r\nvar AWTNotificationManager_1 = require(\"./AWTNotificationManager\");\r\nvar Utils = require(\"./Utils\");\r\nvar RequestSizeLimitBytes = 2936012; //approx 2.8 Mb\r\n/**\r\n* Class to handle serialization of event and request.\r\n* Currently uses Bond for serialization. Please note that this may be subject to change.\r\n*/\r\nvar AWTSerializer = /** @class */ (function () {\r\n    function AWTSerializer() {\r\n    }\r\n    /**\r\n     * Serialies a request using Bond.\r\n     * @param {object} requestDictionary - A dictionary containing the token to event mapping.\r\n     * @param {number} tokenCount        - Number of tenant tokens to be sent in the request.\r\n     * @return {number[]} The serialized bond request.\r\n     */\r\n    AWTSerializer.getPayloadBlob = function (requestDictionary, tokenCount) {\r\n        var requestFull = false;\r\n        var remainingRequest;\r\n        var stream = new Bond.IO.MemoryStream();\r\n        var writer = new Bond.CompactBinaryProtocolWriter(stream);\r\n        //Write TokenToDataPackagesMap\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 3, null);\r\n        writer._WriteMapContainerBegin(tokenCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_LIST);\r\n        for (var token in requestDictionary) {\r\n            if (!requestFull) {\r\n                if (requestDictionary.hasOwnProperty(token)) {\r\n                    //write token\r\n                    writer._WriteString(token);\r\n                    var dataPackage = requestDictionary[token];\r\n                    // Write list of DataPackages\r\n                    writer._WriteContainerBegin(1, Bond._BondDataType._BT_STRUCT);\r\n                    // Source\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 2, null);\r\n                    writer._WriteString('act_default_source');\r\n                    // DataPackageId\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 5, null);\r\n                    writer._WriteString(Utils.newGuid());\r\n                    // Timestamp\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT64, 6, null);\r\n                    writer._WriteInt64(Utils.numberToBondInt64(Date.now()));\r\n                    // Records\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_LIST, 8, null);\r\n                    //Advance position by 1 for the elementy type which is always struct\r\n                    var dpSizePos = stream._GetBuffer().length + 1;\r\n                    writer._WriteContainerBegin(requestDictionary[token].length, Bond._BondDataType._BT_STRUCT);\r\n                    var dpSizeSerialized = stream._GetBuffer().length - dpSizePos;\r\n                    for (var i = 0; i < dataPackage.length; ++i) {\r\n                        var currentStreamPos = stream._GetBuffer().length;\r\n                        this.writeEvent(dataPackage[i], writer);\r\n                        if (stream._GetBuffer().length - currentStreamPos > RequestSizeLimitBytes) {\r\n                            //single event too big\r\n                            AWTNotificationManager_1.default.eventsRejected([dataPackage[i]], Enums_1.AWTEventsRejectedReason.SizeLimitExceeded);\r\n                            //move i one place back so that we can evaluate the next element once we delete the current element at pos i\r\n                            dataPackage.splice(i--, 1);\r\n                            stream._GetBuffer().splice(currentStreamPos);\r\n                            //Bond serialization to change the datapackage length since we couldnt send this event\r\n                            this._addNewDataPackageSize(dataPackage.length, stream, dpSizeSerialized, dpSizePos);\r\n                            continue;\r\n                        }\r\n                        if (stream._GetBuffer().length > RequestSizeLimitBytes) {\r\n                            //Adding this event exceeded the max request size. We should rever this event and send the serialized request.\r\n                            //The remaining events should be returned to send in a separate request.\r\n                            stream._GetBuffer().splice(currentStreamPos);\r\n                            if (!remainingRequest) {\r\n                                remainingRequest = {};\r\n                            }\r\n                            requestDictionary[token] = dataPackage.splice(0, i);\r\n                            remainingRequest[token] = dataPackage;\r\n                            this._addNewDataPackageSize(requestDictionary[token].length, stream, dpSizeSerialized, dpSizePos);\r\n                            break;\r\n                        }\r\n                    }\r\n                    writer._WriteStructEnd(false);\r\n                }\r\n            }\r\n            else {\r\n                if (!remainingRequest) {\r\n                    remainingRequest = {};\r\n                }\r\n                remainingRequest[token] = requestDictionary[token];\r\n                delete requestDictionary[token];\r\n            }\r\n        }\r\n        // End ClientCollector\r\n        writer._WriteStructEnd(false);\r\n        return { payloadBlob: stream._GetBuffer(), remainingRequest: remainingRequest };\r\n    };\r\n    AWTSerializer._addNewDataPackageSize = function (size, stream, oldDpSize, streamPos) {\r\n        //Bond serialization to change the datapackage length since we couldnt send everything\r\n        var newRecordCountSerialized = Bond._Encoding._Varint_GetBytes(Bond.Number._ToUInt32(size));\r\n        for (var j = 0; j < oldDpSize; ++j) {\r\n            if (j < newRecordCountSerialized.length) {\r\n                stream._GetBuffer()[streamPos + j] = newRecordCountSerialized[j];\r\n            }\r\n            else {\r\n                stream._GetBuffer().slice(streamPos + j, oldDpSize - j);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Bond serialize the event.\r\n     * @param {object} eventData - The event that needs to be serialized.\r\n     * @return {number[]} The serialized bond event.\r\n     */\r\n    AWTSerializer.writeEvent = function (eventData, writer) {\r\n        // ID\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 1, null);\r\n        writer._WriteString(eventData.id);\r\n        // Timestamp\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_INT64, 3, null);\r\n        writer._WriteInt64(Utils.numberToBondInt64(eventData.timestamp));\r\n        // Type\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 5, null);\r\n        writer._WriteString(eventData.type);\r\n        // Event Type\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 6, null);\r\n        writer._WriteString(eventData.name);\r\n        var propsString = {};\r\n        var propStringCount = 0;\r\n        var propsInt64 = {};\r\n        var propInt64Count = 0;\r\n        var propsDouble = {};\r\n        var propDoubleCount = 0;\r\n        var propsBool = {};\r\n        var propBoolCount = 0;\r\n        var piiProps = {};\r\n        var piiPropCount = 0;\r\n        var ccProps = {};\r\n        var ccPropCount = 0;\r\n        // Iterate across event data properties and separate based on pii\r\n        for (var key in eventData.properties) {\r\n            if (eventData.properties.hasOwnProperty(key)) {\r\n                var property = eventData.properties[key];\r\n                if (property.cc > 0) {\r\n                    ccProps[key] = property;\r\n                    ccPropCount++;\r\n                }\r\n                else if (property.pii > 0) {\r\n                    piiProps[key] = property;\r\n                    piiPropCount++;\r\n                }\r\n                else {\r\n                    switch (property.type) {\r\n                        case Enums_1.AWTPropertyType.String:\r\n                            propsString[key] = property.value;\r\n                            propStringCount++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Int64:\r\n                            propsInt64[key] = property.value;\r\n                            propInt64Count++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Double:\r\n                            propsDouble[key] = property.value;\r\n                            propDoubleCount++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Boolean:\r\n                            propsBool[key] = property.value;\r\n                            propBoolCount++;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //Extension map\r\n        if (propStringCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 13, null);\r\n            writer._WriteMapContainerBegin(propStringCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRING);\r\n            for (var key in propsString) {\r\n                if (propsString.hasOwnProperty(key)) {\r\n                    var value = propsString[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteString(value.toString());\r\n                }\r\n            }\r\n        }\r\n        // Pii\r\n        if (piiPropCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 30, null);\r\n            writer._WriteMapContainerBegin(piiPropCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRUCT);\r\n            for (var key in piiProps) {\r\n                if (piiProps.hasOwnProperty(key)) {\r\n                    var property = piiProps[key];\r\n                    writer._WriteString(key);\r\n                    // PII Data\r\n                    // O365 scrubber type\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 1, null);\r\n                    writer._WriteInt32(1);\r\n                    // PII Kind\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 2, null);\r\n                    writer._WriteInt32(property.pii);\r\n                    // Value\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 3, null);\r\n                    writer._WriteString(property.value.toString());\r\n                    writer._WriteStructEnd(false);\r\n                }\r\n            }\r\n        }\r\n        // TypedExtensionBoolean map\r\n        if (propBoolCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 31, null);\r\n            writer._WriteMapContainerBegin(propBoolCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_BOOL);\r\n            for (var key in propsBool) {\r\n                if (propsBool.hasOwnProperty(key)) {\r\n                    var value = propsBool[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteBool(value);\r\n                }\r\n            }\r\n        }\r\n        //TypedExtensionInt64 map\r\n        if (propInt64Count) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 33, null);\r\n            writer._WriteMapContainerBegin(propInt64Count, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_INT64);\r\n            for (var key in propsInt64) {\r\n                if (propsInt64.hasOwnProperty(key)) {\r\n                    var value = propsInt64[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteInt64(Utils.numberToBondInt64(value));\r\n                }\r\n            }\r\n        }\r\n        //TypedExtensionDouble map\r\n        if (propDoubleCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 34, null);\r\n            writer._WriteMapContainerBegin(propDoubleCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_DOUBLE);\r\n            for (var key in propsDouble) {\r\n                if (propsDouble.hasOwnProperty(key)) {\r\n                    var value = propsDouble[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteDouble(value);\r\n                }\r\n            }\r\n        }\r\n        //CustomerContentExtensions map\r\n        if (ccPropCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 36, null);\r\n            writer._WriteMapContainerBegin(ccPropCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRUCT);\r\n            for (var key in ccProps) {\r\n                if (ccProps.hasOwnProperty(key)) {\r\n                    var property = ccProps[key];\r\n                    writer._WriteString(key);\r\n                    // CustomerContent Data\r\n                    // CustomerContentKind\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 1, null);\r\n                    writer._WriteInt32(property.cc);\r\n                    // RawContent\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 2, null);\r\n                    writer._WriteString(property.value.toString());\r\n                    writer._WriteStructEnd(false);\r\n                }\r\n            }\r\n        }\r\n        writer._WriteStructEnd(false);\r\n    };\r\n    /**\r\n     * Base64 encode the given number[].\r\n     * @param {number[]} data - The data to be base64 encoded.\r\n     * @return {string} The base64 encoded data.\r\n     */\r\n    AWTSerializer.base64Encode = function (data) {\r\n        return Bond._Encoding._Base64_GetString(data);\r\n    };\r\n    return AWTSerializer;\r\n}());\r\nexports.default = AWTSerializer;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTSerializer.js\n// module id = 12\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Version.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2018\r\n* File for SDK version.\r\n*/\r\nexports.Version = '1.6.2';\r\nexports.FullVersionString = 'AWT-Web-JS-' + exports.Version;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/Version.js\n// module id = 13\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar Enums_2 = require(\"./Enums\");\r\nvar AWTLogManagerSettings_1 = require(\"./AWTLogManagerSettings\");\r\nvar AWTLogger_1 = require(\"./AWTLogger\");\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\nvar AWTNotificationManager_1 = require(\"../common/AWTNotificationManager\");\r\nvar AWTAutoCollection_1 = require(\"./AWTAutoCollection\");\r\n/**\r\n* The AWTLogManager class manages the Aria SDK.\r\n*/\r\nvar AWTLogManager = /** @class */ (function () {\r\n    function AWTLogManager() {\r\n    }\r\n    /**\r\n    * Initializes the log manager. After this method is called, events are\r\n    * accepted for transmission.\r\n    * @param {string} tenantToken - A string that contains the default tenant token.\r\n    * @param {object} config      - [Optional] Configuration settings for initialize, as an AWTLogConfiguration object.\r\n    */\r\n    AWTLogManager.initialize = function (tenantToken, configuration) {\r\n        if (configuration === void 0) { configuration = {}; }\r\n        if (this._isInitialized) {\r\n            return;\r\n        }\r\n        this._isInitialized = true;\r\n        AWTLogManagerSettings_1.default.defaultTenantToken = tenantToken;\r\n        this._overrideValuesFromConfig(configuration);\r\n        if (this._config.disableCookiesUsage && !this._config.propertyStorageOverride) {\r\n            AWTLogManagerSettings_1.default.sessionEnabled = false;\r\n        }\r\n        AWTAutoCollection_1.default.addPropertyStorageOverride(this._config.propertyStorageOverride);\r\n        AWTAutoCollection_1.default.autoCollect(AWTLogManagerSettings_1.default.semanticContext, this._config.disableCookiesUsage, this._config.userAgent);\r\n        //Create sender\r\n        AWTTransmissionManagerCore_1.default.initialize(this._config);\r\n        AWTLogManagerSettings_1.default.loggingEnabled = true;\r\n        //Autolog session events for browsers\r\n        if (this._config.enableAutoUserSession) {\r\n            this.getLogger().logSession(Enums_2.AWTSessionState.Started);\r\n            window.addEventListener('beforeunload', this.flushAndTeardown);\r\n        }\r\n        return this.getLogger();\r\n    };\r\n    /**\r\n     * Gets the global semantic context.\r\n     *\r\n     * @return A AWTSemanticContext object, through which you can set common semantic properties.\r\n     */\r\n    AWTLogManager.getSemanticContext = function () {\r\n        return AWTLogManagerSettings_1.default.semanticContext;\r\n    };\r\n    /**\r\n     * Asynchronously sends events currently in the queue. New events added\r\n     * are sent after the current flush finishes. The passed callback is\r\n     * called when flush finishes. <b>Note:</b> If LogManager is paused, or if\r\n     * flush is called again in less than 30 seconds, then flush is no-op, and\r\n     * the callback is not called.\r\n     * @param {function} callback - The function that is called when flush finishes.\r\n     */\r\n    AWTLogManager.flush = function (callback) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.flush(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Prevents new events from being added for transmission. It also batches all\r\n     * events currently in the queue, and creates requests for them to be sent. If\r\n     * HTML5 Beacons are supported, then they will be used.\r\n     */\r\n    AWTLogManager.flushAndTeardown = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            if (this._config.enableAutoUserSession) {\r\n                this.getLogger().logSession(Enums_2.AWTSessionState.Ended);\r\n            }\r\n            AWTTransmissionManagerCore_1.default.flushAndTeardown();\r\n            AWTLogManagerSettings_1.default.loggingEnabled = false;\r\n            this._isDestroyed = true;\r\n        }\r\n    };\r\n    /**\r\n     * Pasues the transmission of events.\r\n     */\r\n    AWTLogManager.pauseTransmission = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.pauseTransmission();\r\n        }\r\n    };\r\n    /**\r\n     * Resumes the tranmission of events.\r\n     */\r\n    AWTLogManager.resumeTransmision = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.resumeTransmision();\r\n        }\r\n    };\r\n    /**\r\n     * Sets the transmit profile. This changes the transmission timers\r\n     * based on the transmit profile.\r\n     * @param {string} profileName - A string that contains the name of the transmit profile.\r\n     */\r\n    AWTLogManager.setTransmitProfile = function (profileName) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.setTransmitProfile(profileName);\r\n        }\r\n    };\r\n    /**\r\n     * Loads custom transmission profiles. Each profile should have timers for\r\n     * high, normal, and low. Each profile should make sure\r\n     * that a each priority timer is a multiple of the priority higher than it.\r\n     * Setting the timer value to <i>-1</i> means the events for that priority will\r\n     * not be sent. Note that once a priority has been set to <i>not send</i>, then all priorities\r\n     * below it will also not be sent. The timers should be in the form of [low, normal, high].\r\n     * E.g, <i>Custom: [30,10,5]</i>.\r\n     * This method removes any previously loaded custom profiles.\r\n     * @param {object} profiles - A dictionary that contains the transmit profiles.\r\n     */\r\n    AWTLogManager.loadTransmitProfiles = function (profiles) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.loadTransmitProfiles(profiles);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the context sent with every event.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.setContext = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setProperty(name, value, type);\r\n    };\r\n    /**\r\n     * Sets the context sents with every event, and tags it as PII.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} pii                    - The kind of PII for the context property.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.setContextWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setPropertyWithPii(name, value, pii, type);\r\n    };\r\n    /**\r\n     * Sets the context sent with every event from this logger, and tags it as <i>customer content</i>.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} customerContent        - The kind of customer content for the context property, as one of the\r\n     * AWTCustomerContentKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.setContextWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setPropertyWithCustomerContent(name, value, customerContent, type);\r\n    };\r\n    /**\r\n     * Gets the logger for the specified tenant token.\r\n     * @param {string} tenantToken - A string that contains the tenant token.\r\n     * @return An AWTLogger object which sends data with the specified tenant token. If the tenant token is\r\n     * undefined, or null, or empty, then undefined is returned.\r\n     */\r\n    AWTLogManager.getLogger = function (tenantToken) {\r\n        var key = tenantToken;\r\n        if (!key || key === AWTLogManagerSettings_1.default.defaultTenantToken) {\r\n            key = '';\r\n        }\r\n        if (!this._loggers[key]) {\r\n            this._loggers[key] = new AWTLogger_1.default(key);\r\n        }\r\n        return this._loggers[key];\r\n    };\r\n    /**\r\n     * Adds a notification listener. The Aria SDK calls methods on the listener\r\n     * when an appropriate notification is raised.\r\n     * @param {object} listener - An AWTNotificationListener object.\r\n     */\r\n    AWTLogManager.addNotificationListener = function (listener) {\r\n        AWTNotificationManager_1.default.addNotificationListener(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {object} listener - AWTNotificationListener to remove.\r\n     */\r\n    AWTLogManager.removeNotificationListener = function (listener) {\r\n        AWTNotificationManager_1.default.removeNotificationListener(listener);\r\n    };\r\n    AWTLogManager._overrideValuesFromConfig = function (config) {\r\n        if (config.collectorUri) {\r\n            this._config.collectorUri = config.collectorUri;\r\n        }\r\n        if (config.cacheMemorySizeLimitInNumberOfEvents > 0) {\r\n            this._config.cacheMemorySizeLimitInNumberOfEvents = config.cacheMemorySizeLimitInNumberOfEvents;\r\n        }\r\n        if (config.httpXHROverride && config.httpXHROverride.sendPOST) {\r\n            this._config.httpXHROverride = config.httpXHROverride;\r\n        }\r\n        if (config.propertyStorageOverride && config.propertyStorageOverride.getProperty &&\r\n            config.propertyStorageOverride.setProperty) {\r\n            this._config.propertyStorageOverride = config.propertyStorageOverride;\r\n        }\r\n        if (config.userAgent) {\r\n            this._config.userAgent = config.userAgent;\r\n        }\r\n        if (config.disableCookiesUsage) {\r\n            this._config.disableCookiesUsage = config.disableCookiesUsage;\r\n        }\r\n        if (config.canSendStatEvent) {\r\n            this._config.canSendStatEvent = config.canSendStatEvent;\r\n        }\r\n        if (config.enableAutoUserSession && typeof window !== 'undefined' && window.addEventListener) {\r\n            this._config.enableAutoUserSession = config.enableAutoUserSession;\r\n        }\r\n    };\r\n    AWTLogManager._loggers = {};\r\n    AWTLogManager._isInitialized = false;\r\n    AWTLogManager._isDestroyed = false;\r\n    AWTLogManager._config = {\r\n        collectorUri: 'https://browser.pipe.aria.microsoft.com/Collector/3.0/',\r\n        cacheMemorySizeLimitInNumberOfEvents: 10000,\r\n        disableCookiesUsage: false,\r\n        canSendStatEvent: function (eventName) { return true; }\r\n    };\r\n    return AWTLogManager;\r\n}());\r\nexports.default = AWTLogManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogManager.js\n// module id = 14\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTLogManagerSettings.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar AWTEventProperties_1 = require(\"./AWTEventProperties\");\r\nvar AWTSemanticContext_1 = require(\"./AWTSemanticContext\");\r\n/**\r\n* Class that stores LogManagers context.\r\n*/\r\nvar AWTLogManagerSettings = /** @class */ (function () {\r\n    function AWTLogManagerSettings() {\r\n    }\r\n    AWTLogManagerSettings.logManagerContext = new AWTEventProperties_1.default();\r\n    AWTLogManagerSettings.sessionEnabled = true;\r\n    AWTLogManagerSettings.loggingEnabled = false;\r\n    AWTLogManagerSettings.defaultTenantToken = '';\r\n    AWTLogManagerSettings.semanticContext = new AWTSemanticContext_1.default(true, AWTLogManagerSettings.logManagerContext);\r\n    return AWTLogManagerSettings;\r\n}());\r\nexports.default = AWTLogManagerSettings;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogManagerSettings.js\n// module id = 15\n// module chunks = 0","import { log, init, telemetry, flush } from \"./logger\";\r\n\r\n/**\r\n * 配置\r\n */\r\nconst ARIA_SCRIPT = document.getElementById('ARIA-LOG');\r\nconsole.assert(!!ARIA_SCRIPT, 'the element with id=\"ARIA-LOG\" NOT exist in this document');\r\n\r\nconst CONFIG = document.getElementById('ARIA-LOG').dataset;\r\n\r\nconst TOKEN = CONFIG.token;\r\nconst LEVEL = (CONFIG.level || 'warn').toLocaleLowerCase();\r\nconst CORELATION_ID = CONFIG.corelation || ((new Date).getTime() + '-' + Math.random());\r\nconst APP_NAME = CONFIG.appname || location.hostname;\r\nconst LOG_TABLE = (CONFIG.table || APP_NAME).replace(/[^\\w\\d]/g, '');\r\nconst VERBOSE = 'debug' in CONFIG ? CONFIG['debug'].toLowerCase() === \"true\" : true;\r\n\r\nconsole.assert(TOKEN && TOKEN.length > 0, 'data-token=\"token string\" MUST have an value');\r\nconsole.assert(LOG_TABLE.length >= 4, 'the table name MUST be 4-100 alphanumeric chars');\r\n\r\n\r\n/**\r\n * 日志级别\r\n */\r\nenum LogLevel {\r\n    all = 0,\r\n    trace = 10,\r\n    debug = 20,\r\n    info = 400,\r\n    warn = 500,\r\n    error = 600,\r\n    critical = 700,\r\n    alert = 800,\r\n}\r\n/**\r\n * 原始console API\r\n */\r\nconst _originConsole: Console | any = {\r\n    log: console.log\r\n};\r\n\r\n/**\r\n* @param {string} level 日志级别小写\r\n* @param {string} action 日志关键action或者位置\r\n* @param {any?} content 内容可以是string,数字或者Object\r\n*/\r\nfunction Log(level: string, action: string, content?: any, attrs?: any) {\r\n    var data: { [key: string]: any } = {\r\n        action: action,\r\n        title: document.title,\r\n        url: document.URL\r\n    }\r\n    for (var key in attrs) {\r\n        data[key] = attrs[key];\r\n    }\r\n    data.content = typeof content === 'object' ? JSON.stringify(content) : content;\r\n    if (level === \"telemetry\") {\r\n        telemetry(data);\r\n    } else if (!LEVEL || (LogLevel[level] >= LogLevel[LEVEL])) {\r\n        data.level = level;\r\n        log(data);\r\n    }\r\n};\r\n\r\n\r\n\r\n/**\r\n * 初始化设置\r\n */\r\ninit(TOKEN, APP_NAME, LOG_TABLE, {\r\n    corelationId: CORELATION_ID,\r\n    userId: CONFIG.userid,\r\n    subscribeId: CONFIG.subid,\r\n});\r\n\r\n/**\r\n * 日志接口覆盖\r\n */\r\nconsole.log = function () {\r\n    if (VERBOSE) {\r\n        _originConsole.log.apply(console, arguments);\r\n    }\r\n    if (arguments.length > 1 && arguments.length < 3) {\r\n        Log.apply(null, arguments);\r\n    }\r\n};\r\n\r\n/**\r\n * 接口扩展\r\n */\r\n['info', 'debug', 'warn', 'error'].forEach(key => {\r\n    _originConsole[key] = console[key];\r\n    console[key] = function (...args) {\r\n        if (VERBOSE) {\r\n            _originConsole[key].apply(null, args);\r\n        }\r\n        if (args.length && args.length < 3) {\r\n            args.unshift(key);\r\n            Log.apply(Log, args);\r\n        }\r\n    }\r\n});\r\n\r\n//关闭前清空\r\nif (CONFIG.flush === \"true\") {\r\n    window.onbeforeunload = flush;\r\n}\r\n\r\n//捕获全局错误\r\n\r\nwindow.onerror = function (msg, url, line, col, error) {\r\n    Log('error', msg as string, error, {\r\n        file: url,\r\n        line: line,\r\n        col: col,\r\n    })\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","import { AWTLogManager, AWTLogger } from '@aria/webjs-sdk';\r\n\r\n// AWTLogger logger\r\n\r\n\r\nlet _logger: AWTLogger;\r\nlet _token: string;\r\nlet _name: string = \"logging\";\r\nlet _table: string;\r\nlet _config = {};\r\n\r\nfunction getLogger(): AWTLogger {\r\n    if (!_logger) {\r\n        // _manager = \r\n        AWTLogManager.initialize(_token);\r\n        _logger = AWTLogManager.getLogger();\r\n        _logger.setContext(\"AppName\", _name);\r\n        _logger.setContext(\"UserAgent\", navigator.userAgent);\r\n        for (var key in _config) {\r\n            _logger.setContext(key, _config[key]);\r\n        }\r\n    }\r\n    return _logger;\r\n}\r\n\r\n// export function setToken(token: string): void {\r\n//     _token = token;\r\n// }\r\n\r\n// export function setName(name: string): void {\r\n//     _name = name;\r\n// }\r\n\r\nexport function init(token: string, name: string, table?: string, config?: Object): void {\r\n    _token = token;\r\n    _name = name;\r\n    _table = table;\r\n    for (var key in config) {\r\n        config[key] = config[key];\r\n    }\r\n}\r\n\r\n/**\r\n * 记录日志\r\n * @param data -  data to log\r\n */\r\nexport function log(data: any): void {\r\n    return getLogger().logEvent({\r\n        name: _table || _name,\r\n        properties: data,\r\n    });\r\n}\r\n\r\n/**\r\n * 统计数据\r\n * @param data - data to telemetry\r\n */\r\nexport function telemetry(data): void {\r\n    return getLogger().logEvent({\r\n        name: 'telemetry',\r\n        properties: data\r\n    });\r\n}\r\n\r\nexport function flush(): boolean {\r\n    if (_logger) {\r\n        AWTLogManager.flushAndTeardown();\r\n        _logger = null;\r\n    }\r\n    return true;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/logger.ts","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AriaSDK.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File to export public classes, interfaces and enums.\r\n*/\r\nvar Enums_1 = require(\"../common/Enums\");\r\nexports.AWTPropertyType = Enums_1.AWTPropertyType;\r\nexports.AWTPiiKind = Enums_1.AWTPiiKind;\r\nexports.AWTEventPriority = Enums_1.AWTEventPriority;\r\nexports.AWTEventsDroppedReason = Enums_1.AWTEventsDroppedReason;\r\nexports.AWTEventsRejectedReason = Enums_1.AWTEventsRejectedReason;\r\nexports.AWTCustomerContentKind = Enums_1.AWTCustomerContentKind;\r\nvar Enums_2 = require(\"./Enums\");\r\nexports.AWTUserIdType = Enums_2.AWTUserIdType;\r\nexports.AWTSessionState = Enums_2.AWTSessionState;\r\nvar DataModels_1 = require(\"./DataModels\");\r\nexports.AWT_BEST_EFFORT = DataModels_1.AWT_BEST_EFFORT;\r\nexports.AWT_NEAR_REAL_TIME = DataModels_1.AWT_NEAR_REAL_TIME;\r\nexports.AWT_REAL_TIME = DataModels_1.AWT_REAL_TIME;\r\nvar AWTEventProperties_1 = require(\"./AWTEventProperties\");\r\nexports.AWTEventProperties = AWTEventProperties_1.default;\r\nvar AWTLogger_1 = require(\"./AWTLogger\");\r\nexports.AWTLogger = AWTLogger_1.default;\r\nvar AWTLogManager_1 = require(\"./AWTLogManager\");\r\nexports.AWTLogManager = AWTLogManager_1.default;\r\nvar AWTTransmissionManager_1 = require(\"./AWTTransmissionManager\");\r\nexports.AWTTransmissionManager = AWTTransmissionManager_1.default;\r\nvar AWTSerializer_1 = require(\"../common/AWTSerializer\");\r\nexports.AWTSerializer = AWTSerializer_1.default;\r\nvar AWTSemanticContext_1 = require(\"./AWTSemanticContext\");\r\nexports.AWTSemanticContext = AWTSemanticContext_1.default;\r\nexports.AWT_COLLECTOR_URL_UNITED_STATES = 'https://us.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_GERMANY = 'https://de.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_JAPAN = 'https://jp.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_AUSTRALIA = 'https://au.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_EUROPE = 'https://eu.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_USGOV_DOD = 'https://pf.pipe.aria.microsoft.com/Collector/3.0';\r\nexports.AWT_COLLECTOR_URL_USGOV_DOJ = 'https://tb.pipe.aria.microsoft.com/Collector/3.0';\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AriaSDK.js\n// module id = 18\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar AWTHttpManager_1 = require(\"./AWTHttpManager\");\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\nvar AWTRecordBatcher_1 = require(\"../common/AWTRecordBatcher\");\r\nvar AWTNotificationManager_1 = require(\"../common/AWTNotificationManager\");\r\nvar UploadNowCheckTimer = 250;\r\nvar MaxNumberEventPerBatch = 500;\r\nvar MaxSendAttempts = 6;\r\n/**\r\n * Class that manages adding events to inbound queues and batching of events\r\n * into requests.\r\n */\r\nvar AWTQueueManager = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {string} collectorUrl - The collector url to which the requests must be sent.\r\n     */\r\n    function AWTQueueManager(collectorUrl, _queueSizeLimit, xhrOverride) {\r\n        this._queueSizeLimit = _queueSizeLimit;\r\n        this._isCurrentlyUploadingNow = false;\r\n        this._uploadNowQueue = [];\r\n        this._shouldDropEventsOnPause = false;\r\n        this._paused = false;\r\n        this._queueSize = 0;\r\n        this._outboundQueue = [];\r\n        this._inboundQueues = {};\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High] = [];\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal] = [];\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low] = [];\r\n        this._addEmptyQueues();\r\n        this._batcher = new AWTRecordBatcher_1.default(this._outboundQueue, MaxNumberEventPerBatch);\r\n        this._httpManager = new AWTHttpManager_1.default(this._outboundQueue, collectorUrl, this, xhrOverride);\r\n    }\r\n    /**\r\n     * Add an event to the appropriate inbound queue based on its priority.\r\n     * @param {object} event - The event to be added to the queue.\r\n     */\r\n    AWTQueueManager.prototype.addEvent = function (event) {\r\n        if (event.priority === Enums_1.AWTEventPriority.Immediate_sync) {\r\n            //Log event synchronously\r\n            this._httpManager.sendSynchronousRequest(this._batcher.addEventToBatch(event), event.apiKey);\r\n        }\r\n        else if (this._queueSize < this._queueSizeLimit) {\r\n            this._addEventToProperQueue(event);\r\n        }\r\n        else {\r\n            //Drop old event from lower or equal priority\r\n            if (this._dropEventWithPriorityOrLess(event.priority)) {\r\n                this._addEventToProperQueue(event);\r\n            }\r\n            else {\r\n                //Can't drop events from current queues because the all the slots are taken by queues that are being flushed.\r\n                AWTNotificationManager_1.default.eventsDropped([event], Enums_1.AWTEventsDroppedReason.QueueFull);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Batch and send events currently in the queue for the given priority.\r\n     * @param {enum} priority - Priority for which to send events.\r\n     */\r\n    AWTQueueManager.prototype.sendEventsForPriorityAndAbove = function (priority) {\r\n        this._batchEvents(priority);\r\n        this._httpManager.sendQueuedRequests();\r\n    };\r\n    /**\r\n     * Check if the inbound queues or batcher has any events that can be sent presently.\r\n     * @return {boolean} True if there are events, false otherwise.\r\n     */\r\n    AWTQueueManager.prototype.hasEvents = function () {\r\n        return (this._inboundQueues[Enums_1.AWTEventPriority.High][0].length > 0 || this._inboundQueues[Enums_1.AWTEventPriority.Normal][0].length > 0\r\n            || this._inboundQueues[Enums_1.AWTEventPriority.Low][0].length > 0 || this._batcher.hasBatch())\r\n            && this._httpManager.hasIdleConnection();\r\n    };\r\n    /**\r\n     * Add back the events from a failed request back to the queue.\r\n     * @param {object} request - The request whose events need to be added back to the batcher.\r\n     */\r\n    AWTQueueManager.prototype.addBackRequest = function (request) {\r\n        if (!this._paused || !this._shouldDropEventsOnPause) {\r\n            for (var token in request) {\r\n                if (request.hasOwnProperty(token)) {\r\n                    for (var i = 0; i < request[token].length; ++i) {\r\n                        if (request[token][i].sendAttempt < MaxSendAttempts) {\r\n                            this.addEvent(request[token][i]);\r\n                        }\r\n                        else {\r\n                            AWTNotificationManager_1.default.eventsDropped([request[token][i]], Enums_1.AWTEventsDroppedReason.NonRetryableStatus);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Batch all current events in the queues and send them.\r\n     */\r\n    AWTQueueManager.prototype.teardown = function () {\r\n        if (!this._paused) {\r\n            this._batchEvents(Enums_1.AWTEventPriority.Low);\r\n            this._httpManager.teardown();\r\n        }\r\n    };\r\n    /**\r\n     * Sends events for all priority for the current inbound queue.\r\n     * This method adds new inbound queues to which new events will be added.\r\n     * @param {function} callback - The function to be called when uploadNow is finished.\r\n     */\r\n    AWTQueueManager.prototype.uploadNow = function (callback) {\r\n        var _this = this;\r\n        this._addEmptyQueues();\r\n        if (!this._isCurrentlyUploadingNow) {\r\n            this._isCurrentlyUploadingNow = true;\r\n            setTimeout(function () { return _this._uploadNow(callback); }, 0);\r\n        }\r\n        else {\r\n            this._uploadNowQueue.push(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Pause the tranmission of any requests\r\n     */\r\n    AWTQueueManager.prototype.pauseTransmission = function () {\r\n        this._paused = true;\r\n        this._httpManager.pause();\r\n        if (this.shouldDropEventsOnPause) {\r\n            this._queueSize -= (this._inboundQueues[Enums_1.AWTEventPriority.High][0].length +\r\n                this._inboundQueues[Enums_1.AWTEventPriority.Normal][0].length + this._inboundQueues[Enums_1.AWTEventPriority.Low][0].length);\r\n            this._inboundQueues[Enums_1.AWTEventPriority.High][0] = [];\r\n            this._inboundQueues[Enums_1.AWTEventPriority.Normal][0] = [];\r\n            this._inboundQueues[Enums_1.AWTEventPriority.Low][0] = [];\r\n            this._httpManager.removeQueuedRequests();\r\n        }\r\n    };\r\n    /**\r\n     * Resumes transmission of events.\r\n     */\r\n    AWTQueueManager.prototype.resumeTransmission = function () {\r\n        this._paused = false;\r\n        this._httpManager.resume();\r\n    };\r\n    /**\r\n     * Determines whether events in the queues should be dropped when transmission is paused.\r\n     */\r\n    AWTQueueManager.prototype.shouldDropEventsOnPause = function (shouldDropEventsOnPause) {\r\n        this._shouldDropEventsOnPause = shouldDropEventsOnPause;\r\n    };\r\n    /**\r\n     * Remove the first queues for all priorities in the inbound queues map. This is called\r\n     * when transmission manager has finished flushing the events in the old queues. We now make\r\n     * the next queue the primary queue.\r\n     */\r\n    AWTQueueManager.prototype._removeFirstQueues = function () {\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High].shift();\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal].shift();\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low].shift();\r\n    };\r\n    /**\r\n     * Add empty queues for all priorities in the inbound queues map. This is called\r\n     * when Transmission Manager is being flushed. This ensures that new events added\r\n     * after flush are stored separately till we flush the current events.\r\n     */\r\n    AWTQueueManager.prototype._addEmptyQueues = function () {\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High].push([]);\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal].push([]);\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low].push([]);\r\n    };\r\n    AWTQueueManager.prototype._addEventToProperQueue = function (event) {\r\n        if (!this._paused || !this._shouldDropEventsOnPause) {\r\n            this._queueSize++;\r\n            this._inboundQueues[event.priority][this._inboundQueues[event.priority].length - 1].push(event);\r\n        }\r\n    };\r\n    AWTQueueManager.prototype._dropEventWithPriorityOrLess = function (priority) {\r\n        var currentPriority = Enums_1.AWTEventPriority.Low;\r\n        while (currentPriority <= priority) {\r\n            if (this._inboundQueues[currentPriority][this._inboundQueues[currentPriority].length - 1].length > 0) {\r\n                //Dropped oldest event from lowest possible priority\r\n                AWTNotificationManager_1.default.eventsDropped([this._inboundQueues[currentPriority][this._inboundQueues[currentPriority].length - 1].shift()], Enums_1.AWTEventsDroppedReason.QueueFull);\r\n                return true;\r\n            }\r\n            currentPriority++;\r\n        }\r\n        return false;\r\n    };\r\n    AWTQueueManager.prototype._batchEvents = function (priority) {\r\n        var priorityToProcess = Enums_1.AWTEventPriority.High;\r\n        while (priorityToProcess >= priority) {\r\n            while (this._inboundQueues[priorityToProcess][0].length > 0) {\r\n                var event_1 = this._inboundQueues[priorityToProcess][0].pop();\r\n                this._queueSize--;\r\n                this._batcher.addEventToBatch(event_1);\r\n            }\r\n            priorityToProcess--;\r\n        }\r\n        this._batcher.flushBatch();\r\n    };\r\n    AWTQueueManager.prototype._uploadNow = function (callback) {\r\n        var _this = this;\r\n        if (this.hasEvents()) {\r\n            this.sendEventsForPriorityAndAbove(Enums_1.AWTEventPriority.Low);\r\n        }\r\n        this._checkOutboundQueueEmptyAndSent(function () {\r\n            //Move the next queues to be primary\r\n            _this._removeFirstQueues();\r\n            if (callback !== null && callback !== undefined) {\r\n                callback();\r\n            }\r\n            if (_this._uploadNowQueue.length > 0) {\r\n                setTimeout(function () { return _this._uploadNow(_this._uploadNowQueue.shift()); }, 0);\r\n            }\r\n            else {\r\n                _this._isCurrentlyUploadingNow = false;\r\n                if (_this.hasEvents()) {\r\n                    AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    AWTQueueManager.prototype._checkOutboundQueueEmptyAndSent = function (callback) {\r\n        var _this = this;\r\n        if (this._httpManager.isCompletelyIdle()) {\r\n            callback();\r\n        }\r\n        else {\r\n            setTimeout(function () { return _this._checkOutboundQueueEmptyAndSent(callback); }, UploadNowCheckTimer);\r\n        }\r\n    };\r\n    return AWTQueueManager;\r\n}());\r\nexports.default = AWTQueueManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTQueueManager.js\n// module id = 19\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar AWTSerializer_1 = require(\"../common/AWTSerializer\");\r\nvar AWTRetryPolicy_1 = require(\"../common/AWTRetryPolicy\");\r\nvar AWTKillSwitch_1 = require(\"../common/AWTKillSwitch\");\r\nvar AWTClockSkewManager_1 = require(\"../common/AWTClockSkewManager\");\r\nvar Version = require(\"./Version\");\r\nvar Utils = require(\"../common/Utils\");\r\nvar AWTNotificationManager_1 = require(\"../common/AWTNotificationManager\");\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\nvar MaxConnections = 2;\r\nvar MaxRetries = 1;\r\nvar Method = 'POST';\r\n/**\r\n * Class managing the sending of requests.\r\n */\r\nvar AWTHttpManager = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {object} requestQueue   - The queue that contains the requests to be sent.\r\n     * @param {string} collectorUrl   - The collector url to which the requests must be sent.\r\n     * @param {object} _queueManager  - The queue manager that we should add requests back to if needed.\r\n     * @param {object} _httpInterface - The http interface that should be used to send HTTP requests.\r\n     */\r\n    function AWTHttpManager(_requestQueue, collectorUrl, _queueManager, _httpInterface) {\r\n        var _this = this;\r\n        this._requestQueue = _requestQueue;\r\n        this._queueManager = _queueManager;\r\n        this._httpInterface = _httpInterface;\r\n        this._urlString = '?qsp=true&content-type=application%2Fbond-compact-binary&client-id=NO_AUTH&sdk-version='\r\n            + Version.FullVersionString;\r\n        this._killSwitch = new AWTKillSwitch_1.default();\r\n        this._paused = false;\r\n        this._clockSkewManager = new AWTClockSkewManager_1.default();\r\n        this._useBeacons = false;\r\n        this._activeConnections = 0;\r\n        if (!Utils.isUint8ArrayAvailable()) {\r\n            this._urlString += '&content-encoding=base64';\r\n        }\r\n        this._urlString = collectorUrl + this._urlString;\r\n        if (!this._httpInterface) {\r\n            this._useBeacons = !Utils.isReactNative(); //Only use beacons if not running in React Native\r\n            this._httpInterface = {\r\n                sendPOST: function (urlString, data, ontimeout, onerror, onload, sync) {\r\n                    if (Utils.useXDomainRequest()) {\r\n                        var xdr = new XDomainRequest();\r\n                        xdr.open(Method, urlString);\r\n                        //can't get the status code in xdr.\r\n                        xdr.onload = function () {\r\n                            // we will assume onload means the request succeeded.\r\n                            onload(200, null);\r\n                        };\r\n                        xdr.onerror = function () {\r\n                            // we will assume onerror means we need to drop the events.\r\n                            onerror(400, null);\r\n                        };\r\n                        xdr.ontimeout = function () {\r\n                            // we will assume ontimeout means we need to retry the events.\r\n                            ontimeout(500, null);\r\n                        };\r\n                        xdr.send(data);\r\n                    }\r\n                    else if (Utils.isReactNative()) {\r\n                        //Use the fetch API to send events in React Native\r\n                        fetch(urlString, {\r\n                            body: data,\r\n                            method: Method\r\n                        }).then(function (response) {\r\n                            var headerMap = {};\r\n                            if (response.headers) {\r\n                                response.headers.forEach(function (value, name) {\r\n                                    headerMap[name] = value;\r\n                                });\r\n                            }\r\n                            onload(response.status, headerMap);\r\n                        }).catch(function (error) {\r\n                            //In case there is an error in the request. Set the status to 0\r\n                            //so that the events can be retried later.\r\n                            onerror(0, {});\r\n                        });\r\n                    }\r\n                    else {\r\n                        var xhr_1 = new XMLHttpRequest();\r\n                        xhr_1.open(Method, urlString, !sync);\r\n                        xhr_1.onload = function () {\r\n                            onload(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.onerror = function () {\r\n                            onerror(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.ontimeout = function () {\r\n                            ontimeout(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.send(data);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Check if there is an idle connection overwhich we can send a request.\r\n     * @return {boolean} True if there is an idle connection, false otherwise.\r\n     */\r\n    AWTHttpManager.prototype.hasIdleConnection = function () {\r\n        return this._activeConnections < MaxConnections;\r\n    };\r\n    /**\r\n     * Send requests in the request queue up if there is an idle connection, sending is\r\n     * not pause and clock skew manager allows sending request.\r\n     */\r\n    AWTHttpManager.prototype.sendQueuedRequests = function () {\r\n        while (this.hasIdleConnection() && !this._paused && this._requestQueue.length > 0\r\n            && this._clockSkewManager.allowRequestSending()) {\r\n            this._activeConnections++;\r\n            this._sendRequest(this._requestQueue.shift(), 0, false);\r\n        }\r\n        //No more requests to send, tell TPM to try to schedule timer\r\n        //in case it was waiting for idle connections\r\n        if (this.hasIdleConnection()) {\r\n            AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Check if there are no active requests being sent.\r\n     * @return {boolean} True if idle, false otherwise.\r\n     */\r\n    AWTHttpManager.prototype.isCompletelyIdle = function () {\r\n        return this._activeConnections === 0;\r\n    };\r\n    /**\r\n     * Queue all the remaning requests to be sent. The requests will be\r\n     * sent using HTML5 Beacons if they are available.\r\n     */\r\n    AWTHttpManager.prototype.teardown = function () {\r\n        while (this._requestQueue.length > 0) {\r\n            this._sendRequest(this._requestQueue.shift(), 0, true);\r\n        }\r\n    };\r\n    /**\r\n     * Pause the sending of requests. No new requests will be sent.\r\n     */\r\n    AWTHttpManager.prototype.pause = function () {\r\n        this._paused = true;\r\n    };\r\n    /**\r\n     * Resume the sending of requests.\r\n     */\r\n    AWTHttpManager.prototype.resume = function () {\r\n        this._paused = false;\r\n        this.sendQueuedRequests();\r\n    };\r\n    /**\r\n     * Removes any pending requests to be sent.\r\n     */\r\n    AWTHttpManager.prototype.removeQueuedRequests = function () {\r\n        this._requestQueue.length = 0;\r\n    };\r\n    /**\r\n     * Sends a request synchronously to the Aria collector. This api is used to send\r\n     * a request containing a single immediate event.\r\n     *\r\n     * @param request - The request to be sent.\r\n     * @param token   - The token used to send the request.\r\n     */\r\n    AWTHttpManager.prototype.sendSynchronousRequest = function (request, token) {\r\n        //This will not take into account the max connections restriction. Since this is sync, we can \r\n        //only send one of this request at a time and thus should not worry about multiple connections \r\n        //being used to send synchronoush events.\r\n        if (this._paused) {\r\n            //If paused then convert to High priority. It will be added back to queue in _sendRequest\r\n            request[token][0].priority = Enums_1.AWTEventPriority.High;\r\n        }\r\n        //Increment active connection since we are still going to use a connection to send the request.\r\n        this._activeConnections++;\r\n        //For sync requests we will not wait for the clock skew. \r\n        this._sendRequest(request, 0, false, true);\r\n    };\r\n    AWTHttpManager.prototype._sendRequest = function (request, retryCount, isTeardown, isSynchronous) {\r\n        var _this = this;\r\n        if (isSynchronous === void 0) { isSynchronous = false; }\r\n        if (this._paused) {\r\n            this._activeConnections--;\r\n            this._queueManager.addBackRequest(request);\r\n            return;\r\n        }\r\n        var tokenCount = 0;\r\n        var apikey = '';\r\n        for (var token in request) {\r\n            if (request.hasOwnProperty(token)) {\r\n                if (!this._killSwitch.isTenantKilled(token)) {\r\n                    if (apikey.length > 0) {\r\n                        apikey += ',';\r\n                    }\r\n                    apikey += token;\r\n                    tokenCount++;\r\n                }\r\n                else {\r\n                    AWTNotificationManager_1.default.eventsRejected(request[token], Enums_1.AWTEventsRejectedReason.KillSwitch);\r\n                    delete request[token];\r\n                }\r\n            }\r\n        }\r\n        if (tokenCount > 0) {\r\n            var payloadResult = AWTSerializer_1.default.getPayloadBlob(request, tokenCount);\r\n            if (payloadResult.remainingRequest) {\r\n                this._requestQueue.push(payloadResult.remainingRequest);\r\n            }\r\n            var urlString = this._urlString + '&x-apikey=' + apikey + '&client-time-epoch-millis='\r\n                + Date.now().toString();\r\n            if (this._clockSkewManager.shouldAddClockSkewHeaders()) {\r\n                urlString = urlString + '&time-delta-to-apply-millis=' + this._clockSkewManager.getClockSkewHeaderValue();\r\n            }\r\n            var data = void 0;\r\n            if (!Utils.isUint8ArrayAvailable()) {\r\n                data = AWTSerializer_1.default.base64Encode(payloadResult.payloadBlob);\r\n            }\r\n            else {\r\n                data = new Uint8Array(payloadResult.payloadBlob);\r\n            }\r\n            for (var token in request) {\r\n                if (request.hasOwnProperty(token)) {\r\n                    //Increment the send attempt count\r\n                    for (var i = 0; i < request[token].length; ++i) {\r\n                        request[token][i].sendAttempt > 0 ? request[token][i].sendAttempt++ : request[token][i].sendAttempt = 1;\r\n                    }\r\n                }\r\n            }\r\n            //beacons will not be used if an http interface was passed by the customer\r\n            if (this._useBeacons && isTeardown && Utils.isBeaconsSupported()) {\r\n                if (navigator.sendBeacon(urlString, data)) {\r\n                    //Request sent via beacon.\r\n                    return;\r\n                }\r\n            }\r\n            //Send sync requests if the request is immediate or we are tearing down telemetry.\r\n            this._httpInterface.sendPOST(urlString, data, function (status, headers) {\r\n                _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount, isTeardown, isSynchronous);\r\n            }, function (status, headers) {\r\n                _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount, isTeardown, isSynchronous);\r\n            }, function (status, headers) {\r\n                _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount, isTeardown, isSynchronous);\r\n            }, isTeardown || isSynchronous);\r\n        }\r\n        else if (!isTeardown) {\r\n            this._handleRequestFinished(null, {}, isTeardown, isSynchronous);\r\n        }\r\n    };\r\n    AWTHttpManager.prototype._retryRequestIfNeeded = function (status, headers, request, tokenCount, apikey, retryCount, isTeardown, isSynchronous) {\r\n        var _this = this;\r\n        var shouldRetry = true;\r\n        if (typeof status !== 'undefined') {\r\n            if (headers) {\r\n                var killedTokens = this._killSwitch.setKillSwitchTenants(headers['kill-tokens'], headers['kill-duration-seconds']);\r\n                this._clockSkewManager.setClockSkew(headers['time-delta-millis']);\r\n                for (var i = 0; i < killedTokens.length; ++i) {\r\n                    AWTNotificationManager_1.default.eventsRejected(request[killedTokens[i]], Enums_1.AWTEventsRejectedReason.KillSwitch);\r\n                    delete request[killedTokens[i]];\r\n                    tokenCount--;\r\n                }\r\n            }\r\n            else {\r\n                this._clockSkewManager.setClockSkew(null);\r\n            }\r\n            if (status === 200) {\r\n                this._handleRequestFinished(true, request, isTeardown, isSynchronous);\r\n                return;\r\n            }\r\n            if (!AWTRetryPolicy_1.default.shouldRetryForStatus(status) || tokenCount <= 0) {\r\n                shouldRetry = false;\r\n            }\r\n        }\r\n        if (shouldRetry) {\r\n            if (isSynchronous) {\r\n                //Synchronous events only contain a single event so the apiKey is equal to the token for that event.\r\n                //Convert the event to High priority and add back to queue to be sent as High event.\r\n                this._activeConnections--;\r\n                request[apikey][0].priority = Enums_1.AWTEventPriority.High;\r\n                this._queueManager.addBackRequest(request);\r\n            }\r\n            else if (retryCount < MaxRetries) {\r\n                for (var token in request) {\r\n                    if (request.hasOwnProperty(token)) {\r\n                        AWTNotificationManager_1.default.eventsRetrying(request[token]);\r\n                    }\r\n                }\r\n                setTimeout(function () { return _this._sendRequest(request, retryCount + 1, false); }, AWTRetryPolicy_1.default.getMillisToBackoffForRetry(retryCount));\r\n            }\r\n            else {\r\n                this._activeConnections--;\r\n                AWTTransmissionManagerCore_1.default.backOffTransmission();\r\n                this._queueManager.addBackRequest(request);\r\n            }\r\n        }\r\n        else {\r\n            this._handleRequestFinished(false, request, isTeardown, isSynchronous);\r\n        }\r\n    };\r\n    AWTHttpManager.prototype._handleRequestFinished = function (success, request, isTeardown, isSynchronous) {\r\n        if (success) {\r\n            AWTTransmissionManagerCore_1.default.clearBackOff();\r\n        }\r\n        for (var token in request) {\r\n            if (request.hasOwnProperty(token)) {\r\n                if (success) {\r\n                    AWTNotificationManager_1.default.eventsSent(request[token]);\r\n                }\r\n                else {\r\n                    AWTNotificationManager_1.default.eventsDropped(request[token], Enums_1.AWTEventsDroppedReason.NonRetryableStatus);\r\n                }\r\n            }\r\n        }\r\n        this._activeConnections--;\r\n        if (!isSynchronous && !isTeardown) {\r\n            //Only continue sending more requests as long as the current request was not an synchronous request or sent\r\n            //during teardown. We want to return after just sending this one sync request.\r\n            this.sendQueuedRequests();\r\n        }\r\n    };\r\n    /**\r\n     * Converts the XHR getAllResponseHeaders to a map containing the header key and value.\r\n     */\r\n    AWTHttpManager.prototype._convertAllHeadersToMap = function (headersString) {\r\n        var headers = {};\r\n        if (headersString) {\r\n            var headersArray = headersString.split('\\n');\r\n            for (var i = 0; i < headersArray.length; ++i) {\r\n                var header = headersArray[i].split(': ');\r\n                headers[header[0]] = header[1];\r\n            }\r\n        }\r\n        return headers;\r\n    };\r\n    return AWTHttpManager;\r\n}());\r\nexports.default = AWTHttpManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTHttpManager.js\n// module id = 20\n// module chunks = 0","\"use strict\";\r\n/**\r\n* microsoft.bond.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar bond_const_1 = require(\"./bond_const\");\r\nexports._BondDataType = bond_const_1._BondDataType;\r\nvar _Encoding = require(\"./microsoft.bond.encoding\");\r\nexports._Encoding = _Encoding;\r\nvar IO = require(\"./microsoft.bond.io\");\r\nexports.IO = IO;\r\nvar microsoft_bond_primitives_1 = require(\"./microsoft.bond.primitives\");\r\nexports.Int64 = microsoft_bond_primitives_1.Int64;\r\nexports.UInt64 = microsoft_bond_primitives_1.UInt64;\r\nexports.Number = microsoft_bond_primitives_1.Number;\r\nvar CompactBinaryProtocolWriter = /** @class */ (function () {\r\n    function CompactBinaryProtocolWriter(stream) {\r\n        this._stream = stream;\r\n    }\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteBlob = function (blob) {\r\n        this._stream._Write(blob, 0, blob.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteBool = function (value) {\r\n        this._stream._WriteByte(value ? 1 : 0);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteContainerBegin = function (size, elementType) {\r\n        this._WriteUInt8(elementType);\r\n        this._WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteMapContainerBegin = function (size, keyType, valueType) {\r\n        this._WriteUInt8(keyType);\r\n        this._WriteUInt8(valueType);\r\n        this._WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteDouble = function (value) {\r\n        var array = _Encoding._Double_GetBytes(value);\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteFieldBegin = function (type, id, metadata) {\r\n        if (id <= 5) {\r\n            this._stream._WriteByte(type | (id << 5));\r\n        }\r\n        else if (id <= 0xff) {\r\n            this._stream._WriteByte(type | (6 << 5));\r\n            this._stream._WriteByte(id);\r\n        }\r\n        else {\r\n            this._stream._WriteByte(type | (7 << 5));\r\n            this._stream._WriteByte(id);\r\n            this._stream._WriteByte(id >> 8);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteInt32 = function (value) {\r\n        value = _Encoding._Zigzag_EncodeZigzag32(value);\r\n        this._WriteUInt32(value);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteInt64 = function (value) {\r\n        this._WriteUInt64(_Encoding._Zigzag_EncodeZigzag64(value));\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteString = function (value) {\r\n        if (value === '') {\r\n            this._WriteUInt32(0 /*length*/);\r\n        }\r\n        else {\r\n            var array = _Encoding._Utf8_GetBytes(value);\r\n            this._WriteUInt32(array.length);\r\n            this._stream._Write(array, 0, array.length);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteStructEnd = function (isBase) {\r\n        this._WriteUInt8(isBase ? bond_const_1._BondDataType._BT_STOP_BASE : bond_const_1._BondDataType._BT_STOP);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt32 = function (value) {\r\n        var array = _Encoding._Varint_GetBytes(microsoft_bond_primitives_1.Number._ToUInt32(value));\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt64 = function (value) {\r\n        var array = _Encoding._Varint64_GetBytes(value);\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt8 = function (value) {\r\n        this._stream._WriteByte(microsoft_bond_primitives_1.Number._ToUInt8(value));\r\n    };\r\n    return CompactBinaryProtocolWriter;\r\n}());\r\nexports.CompactBinaryProtocolWriter = CompactBinaryProtocolWriter;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.js\n// module id = 21\n// module chunks = 0","\"use strict\";\r\n/**\r\n* bond_const.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Tool     : bondc, Version=3.0.1, Build=bond-git.debug.not\r\n//     Template : Microsoft.Bond.Rules.dll#TypeScript.tt\r\n//     File     : bond_const.ts\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost when\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\nvar _BondDataType;\r\n(function (_BondDataType) {\r\n    _BondDataType[_BondDataType[\"_BT_STOP\"] = 0] = \"_BT_STOP\";\r\n    _BondDataType[_BondDataType[\"_BT_STOP_BASE\"] = 1] = \"_BT_STOP_BASE\";\r\n    _BondDataType[_BondDataType[\"_BT_BOOL\"] = 2] = \"_BT_BOOL\";\r\n    _BondDataType[_BondDataType[\"_BT_DOUBLE\"] = 8] = \"_BT_DOUBLE\";\r\n    _BondDataType[_BondDataType[\"_BT_STRING\"] = 9] = \"_BT_STRING\";\r\n    _BondDataType[_BondDataType[\"_BT_STRUCT\"] = 10] = \"_BT_STRUCT\";\r\n    _BondDataType[_BondDataType[\"_BT_LIST\"] = 11] = \"_BT_LIST\";\r\n    _BondDataType[_BondDataType[\"_BT_MAP\"] = 13] = \"_BT_MAP\";\r\n    _BondDataType[_BondDataType[\"_BT_INT32\"] = 16] = \"_BT_INT32\";\r\n    _BondDataType[_BondDataType[\"_BT_INT64\"] = 17] = \"_BT_INT64\";\r\n})(_BondDataType = exports._BondDataType || (exports._BondDataType = {}));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/bond_const.js\n// module id = 22\n// module chunks = 0","\"use strict\";\r\n/**\r\n* microsoft.bond.encoding.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar microsoft_bond_primitives_1 = require(\"./microsoft.bond.primitives\");\r\nvar microsoft_bond_floatutils_1 = require(\"./microsoft.bond.floatutils\");\r\nvar microsoft_bond_utils_1 = require(\"./microsoft.bond.utils\");\r\nfunction _Utf8_GetBytes(value) {\r\n    var array = [];\r\n    for (var i = 0; i < value.length; ++i) {\r\n        var char = value.charCodeAt(i);\r\n        if (char < 0x80) {\r\n            array.push(char);\r\n        }\r\n        else if (char < 0x800) {\r\n            array.push(0xc0 | (char >> 6), 0x80 | (char & 0x3f));\r\n        }\r\n        else if (char < 0xd800 || char >= 0xe000) {\r\n            array.push(0xe0 | (char >> 12), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n        }\r\n        else {\r\n            char = 0x10000 + (((char & 0x3ff) << 10) | (value.charCodeAt(++i) & 0x3ff));\r\n            array.push(0xf0 | (char >> 18), 0x80 | ((char >> 12) & 0x3f), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n        }\r\n    }\r\n    return array;\r\n}\r\nexports._Utf8_GetBytes = _Utf8_GetBytes;\r\nfunction _Base64_GetString(inArray) {\r\n    var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n    var output = [];\r\n    var paddingBytes = inArray.length % 3;\r\n    var toBase64 = function (num) {\r\n        return [lookup.charAt((num >> 18) & 0x3F),\r\n            lookup.charAt((num >> 12) & 0x3F),\r\n            lookup.charAt((num >> 6) & 0x3F),\r\n            lookup.charAt(num & 0x3F)].join('');\r\n    };\r\n    for (var i = 0, length_1 = inArray.length - paddingBytes; i < length_1; i += 3) {\r\n        var temp = (inArray[i] << 16) + (inArray[i + 1] << 8) + (inArray[i + 2]);\r\n        output.push(toBase64(temp));\r\n    }\r\n    switch (paddingBytes) {\r\n        case 1:\r\n            var temp = inArray[inArray.length - 1];\r\n            output.push(lookup.charAt(temp >> 2));\r\n            output.push(lookup.charAt((temp << 4) & 0x3F));\r\n            output.push('==');\r\n            break;\r\n        case 2:\r\n            var temp2 = (inArray[inArray.length - 2] << 8) + (inArray[inArray.length - 1]);\r\n            output.push(lookup.charAt(temp2 >> 10));\r\n            output.push(lookup.charAt((temp2 >> 4) & 0x3F));\r\n            output.push(lookup.charAt((temp2 << 2) & 0x3F));\r\n            output.push('=');\r\n            break;\r\n    }\r\n    return output.join('');\r\n}\r\nexports._Base64_GetString = _Base64_GetString;\r\nfunction _Varint_GetBytes(value) {\r\n    var array = [];\r\n    while (value & 0xffffff80) {\r\n        array.push((value & 0x7f) | 0x80);\r\n        value >>>= 7;\r\n    }\r\n    array.push(value & 0x7f);\r\n    return array;\r\n}\r\nexports._Varint_GetBytes = _Varint_GetBytes;\r\nfunction _Varint64_GetBytes(value) {\r\n    var low = value.low;\r\n    var high = value.high;\r\n    var array = [];\r\n    while (high || (0xffffff80 & low)) {\r\n        array.push((low & 0x7f) | 0x80);\r\n        low = ((high & 0x7f) << 25) | (low >>> 7);\r\n        high >>>= 7;\r\n    }\r\n    array.push(low & 0x7f);\r\n    return array;\r\n}\r\nexports._Varint64_GetBytes = _Varint64_GetBytes;\r\n// Note: see notes of Float.\r\nfunction _Double_GetBytes(value) {\r\n    if (microsoft_bond_utils_1.BrowserChecker._IsDataViewSupport()) {\r\n        var view = new DataView(new ArrayBuffer(8));\r\n        view.setFloat64(0, value, true /*littleEndian*/);\r\n        var array = [];\r\n        for (var i = 0; i < 8; ++i) {\r\n            array.push(view.getUint8(i));\r\n        }\r\n        return array;\r\n    }\r\n    else {\r\n        return microsoft_bond_floatutils_1.FloatUtils._ConvertNumberToArray(value, true /*isDouble*/);\r\n    }\r\n}\r\nexports._Double_GetBytes = _Double_GetBytes;\r\nfunction _Zigzag_EncodeZigzag32(value) {\r\n    value = microsoft_bond_primitives_1.Number._ToInt32(value);\r\n    return ((value << 1) ^ (value >> (4 /*sizeof(int)*/ * 8 - 1)));\r\n}\r\nexports._Zigzag_EncodeZigzag32 = _Zigzag_EncodeZigzag32;\r\nfunction _Zigzag_EncodeZigzag64(value) {\r\n    var low = value.low;\r\n    var high = value.high;\r\n    var tmpH = (high << 1) | (low >>> 31);\r\n    var tmpL = low << 1;\r\n    if (high & 0x80000000) {\r\n        tmpH = ~tmpH;\r\n        tmpL = ~tmpL;\r\n    }\r\n    var res = new microsoft_bond_primitives_1.UInt64('0');\r\n    res.low = tmpL;\r\n    res.high = tmpH;\r\n    return res;\r\n}\r\nexports._Zigzag_EncodeZigzag64 = _Zigzag_EncodeZigzag64;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.encoding.js\n// module id = 23\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* microsoft.bond.floatutils.ts\r\n* Copyright: Microsoft 2016\r\n*\r\n* This class will be used to convert float/double to byte array on browsers which don't support html5.\r\n*\r\n* Format: IEEE-754, littleEndian, http://en.wikipedia.org/wiki/IEEE_754-1985\r\n*\r\n*  \\note\r\n* 1. Don't have negative zero. All zero will be positive zero.\r\n* 2. If the buffer array passed to ConvertArrayToFloat() is actual NaN or Inifinity value,\r\n*    exception will be raised.\r\n*/\r\nvar FloatUtils = /** @class */ (function () {\r\n    function FloatUtils() {\r\n    }\r\n    FloatUtils._ConvertNumberToArray = function (num, isDouble) {\r\n        if (!num) {\r\n            return isDouble ? this._doubleZero : this._floatZero;\r\n        }\r\n        var exponentBits = isDouble ? 11 : 8;\r\n        var precisionBits = isDouble ? 52 : 23;\r\n        // follow IEEE-754, exponent bias is 2^(k-1)-1 where k is the number of bits\r\n        // in the exponent: http://en.wikipedia.org/wiki/Exponent_bias\r\n        var bias = (1 << (exponentBits - 1)) - 1;\r\n        var minExponent = 1 - bias;\r\n        var maxExponent = bias;\r\n        var sign = num < 0 ? 1 : 0;\r\n        num = Math.abs(num);\r\n        var intPart = Math.floor(num);\r\n        var floatPart = num - intPart;\r\n        var len = 2 * (bias + 2) + precisionBits;\r\n        var buffer = new Array(len);\r\n        var i = 0;\r\n        while (i < len) {\r\n            buffer[i++] = 0;\r\n        }\r\n        // caculate the intPart\r\n        i = bias + 2;\r\n        while (i && intPart) {\r\n            buffer[--i] = intPart % 2;\r\n            intPart = Math.floor(intPart / 2);\r\n        }\r\n        // caculate the floatPart\r\n        i = bias + 1;\r\n        while (i < len - 1 && floatPart > 0) {\r\n            floatPart *= 2;\r\n            if (floatPart >= 1) {\r\n                buffer[++i] = 1;\r\n                --floatPart;\r\n            }\r\n            else {\r\n                buffer[++i] = 0;\r\n            }\r\n        }\r\n        // find the first 1\r\n        var firstBit = 0;\r\n        while (firstBit < len && !buffer[firstBit]) {\r\n            firstBit++;\r\n        }\r\n        // caculate exponent\r\n        var exponent = bias + 1 - firstBit;\r\n        // caculate round\r\n        var lastBit = firstBit + precisionBits;\r\n        if (buffer[lastBit + 1]) {\r\n            for (i = lastBit; i > firstBit; --i) {\r\n                buffer[i] = 1 - buffer[i];\r\n                if (buffer) {\r\n                    break;\r\n                }\r\n            }\r\n            if (i === firstBit) {\r\n                ++exponent;\r\n            }\r\n        }\r\n        // check overflow\r\n        if (exponent > maxExponent || intPart) {\r\n            if (sign) {\r\n                return isDouble ? this._doubleNegInifinity : this._floatNegInifinity;\r\n            }\r\n            else {\r\n                return isDouble ? this._doubleInifinity : this._floatInifinity;\r\n            }\r\n        }\r\n        else if (exponent < minExponent) {\r\n            return isDouble ? this._doubleZero : this._floatZero;\r\n        }\r\n        // caculate the result\r\n        if (isDouble) {\r\n            var high = 0;\r\n            for (i = 0; i < 20; ++i) {\r\n                high = (high << 1) | buffer[++firstBit];\r\n            }\r\n            var low = 0;\r\n            for (; i < 52; ++i) {\r\n                low = (low << 1) | buffer[++firstBit];\r\n            }\r\n            high |= (exponent + bias) << 20;\r\n            high = (sign << 31) | (high & 0x7FFFFFFF);\r\n            var resArray = [low & 0xff, (low >> 8) & 0xff, (low >> 16) & 0xff, low >>> 24,\r\n                high & 0xff, (high >> 8) & 0xff, (high >> 16) & 0xff, high >>> 24];\r\n            return resArray;\r\n        }\r\n        else {\r\n            var result = 0;\r\n            for (i = 0; i < 23; ++i) {\r\n                result = (result << 1) | buffer[++firstBit];\r\n            }\r\n            result |= (exponent + bias) << 23;\r\n            result = (sign << 31) | (result & 0x7FFFFFFF);\r\n            var resArray = [result & 0xff, (result >> 8) & 0xff, (result >> 16) & 0xff, result >>> 24];\r\n            return resArray;\r\n        }\r\n    };\r\n    FloatUtils._floatZero = [0x00, 0x00, 0x00, 0x00];\r\n    FloatUtils._doubleZero = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\r\n    FloatUtils._floatInifinity = [0x00, 0x00, 0x80, 0x7F];\r\n    FloatUtils._floatNegInifinity = [0x00, 0x00, 0x80, 0xFF];\r\n    FloatUtils._doubleInifinity = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f];\r\n    FloatUtils._doubleNegInifinity = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff];\r\n    return FloatUtils;\r\n}());\r\nexports.FloatUtils = FloatUtils;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.floatutils.js\n// module id = 24\n// module chunks = 0","\"use strict\";\r\n/**\r\n* microsoft.bond.utils.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar BrowserChecker = /** @class */ (function () {\r\n    function BrowserChecker() {\r\n    }\r\n    BrowserChecker._IsDataViewSupport = function () {\r\n        return typeof ArrayBuffer !== 'undefined' &&\r\n            typeof DataView !== 'undefined';\r\n    };\r\n    return BrowserChecker;\r\n}());\r\nexports.BrowserChecker = BrowserChecker;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.utils.js\n// module id = 25\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* microsoft.bond.io.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nvar microsoft_bond_primitives_1 = require(\"./microsoft.bond.primitives\");\r\nvar MemoryStream = /** @class */ (function () {\r\n    function MemoryStream() {\r\n        this._buffer = [];\r\n    }\r\n    /*override*/\r\n    MemoryStream.prototype._WriteByte = function (byte) {\r\n        this._buffer.push(microsoft_bond_primitives_1.Number._ToByte(byte));\r\n    };\r\n    /*override*/\r\n    MemoryStream.prototype._Write = function (buffer, offset, count) {\r\n        while (count--) {\r\n            this._WriteByte(buffer[offset++]);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the array of unsigned bytes from which this stream was created.\r\n     */\r\n    MemoryStream.prototype._GetBuffer = function () {\r\n        return this._buffer;\r\n    };\r\n    return MemoryStream;\r\n}());\r\nexports.MemoryStream = MemoryStream;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.io.js\n// module id = 26\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTRetryPolicy.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar RandomizationLowerThreshold = 0.8;\r\nvar RandomizationUpperThreshold = 1.2;\r\nvar BaseBackoff = 3000;\r\nvar MaxBackoff = 120000;\r\n/**\r\n* Class for retry policy.\r\n*/\r\nvar AWTRetryPolicy = /** @class */ (function () {\r\n    function AWTRetryPolicy() {\r\n    }\r\n    /**\r\n     * Determine if the request should be retried for the given status code.\r\n     * The below expression reads that we should only retry for:\r\n     *      - HttpStatusCodes that are smaller than 300.\r\n     *      - HttpStatusCodes greater or equal to 500 (except for 501-NotImplement\r\n     *        and 505-HttpVersionNotSupport).\r\n     *      - HttpStatusCode 408-RequestTimeout.\r\n     * This is based on Microsoft.WindowsAzure.Storage.RetryPolicies.ExponentialRetry class\r\n     * @param {number} httpStatusCode - The status code returned for the request.\r\n     * @return {boolean} True if request should be retried, false otherwise.\r\n     */\r\n    AWTRetryPolicy.shouldRetryForStatus = function (httpStatusCode) {\r\n        /* */\r\n        return !((httpStatusCode >= 300 && httpStatusCode < 500 && httpStatusCode !== 408)\r\n            || (httpStatusCode === 501)\r\n            || (httpStatusCode === 505));\r\n    };\r\n    /**\r\n     * Gets the number of milliseconds to back off before retrying the request. The\r\n     * back off duration is exponentially scaled based on the number of retries already\r\n     * done for the request.\r\n     * @param {number} retriesSoFar - The number of times the request has already been retried.\r\n     * @return {number} The back off duration for the request before it can be retried.\r\n     */\r\n    AWTRetryPolicy.getMillisToBackoffForRetry = function (retriesSoFar) {\r\n        var waitDuration = 0;\r\n        var minBackoff = BaseBackoff * RandomizationLowerThreshold;\r\n        var maxBackoff = BaseBackoff * RandomizationUpperThreshold;\r\n        var randomBackoff = Math.floor(Math.random() * (maxBackoff - minBackoff)) + minBackoff;\r\n        waitDuration = Math.pow(4, retriesSoFar) * randomBackoff;\r\n        return Math.min(waitDuration, MaxBackoff);\r\n    };\r\n    return AWTRetryPolicy;\r\n}());\r\nexports.default = AWTRetryPolicy;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTRetryPolicy.js\n// module id = 27\n// module chunks = 0","\"use strict\";\r\n/**\r\n* AWTKillSwitch.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SecToMsMultiplier = 1000;\r\n/**\r\n* Class to stop certain tenants sending events.\r\n*/\r\nvar AWTKillSwitch = /** @class */ (function () {\r\n    function AWTKillSwitch() {\r\n        this._killedTokenDictionary = {};\r\n    }\r\n    /**\r\n     * Set the tenants that are to be killed along with the duration. If the duration is\r\n     * a special value identifying that the tokens are too be killed for only this request, then\r\n     * a array of tokens is returned.\r\n     * @param {string} killedTokens - Tokens that are too be marked to be killed.\r\n     * @param {string} killDuration - The duration for which the tokens are to be killed.\r\n     * @return {string[]} The tokens that are killed only for this given request.\r\n     */\r\n    AWTKillSwitch.prototype.setKillSwitchTenants = function (killTokens, killDuration) {\r\n        if (killTokens && killDuration) {\r\n            try {\r\n                var killedTokens = killTokens.split(',');\r\n                if (killDuration === 'this-request-only') {\r\n                    return killedTokens;\r\n                }\r\n                var durationMs = parseInt(killDuration, 10) * SecToMsMultiplier;\r\n                for (var i = 0; i < killedTokens.length; ++i) {\r\n                    this._killedTokenDictionary[killedTokens[i]] = Date.now() + durationMs;\r\n                }\r\n            }\r\n            catch (ex) {\r\n                return [];\r\n            }\r\n        }\r\n        return [];\r\n    };\r\n    /**\r\n     * Determing if the given tenant token has been killed for the moment.\r\n     * @param {string} tenantToken - The token to be checked.\r\n     * @return {boolean} True if token has been killed, false otherwise.\r\n     */\r\n    AWTKillSwitch.prototype.isTenantKilled = function (tenantToken) {\r\n        if (this._killedTokenDictionary[tenantToken] !== undefined && this._killedTokenDictionary[tenantToken] > Date.now()) {\r\n            return true;\r\n        }\r\n        delete this._killedTokenDictionary[tenantToken];\r\n        return false;\r\n    };\r\n    return AWTKillSwitch;\r\n}());\r\nexports.default = AWTKillSwitch;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTKillSwitch.js\n// module id = 28\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTClockSkewManager.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\n/**\r\n* Class to manage clock skew correction.\r\n*/\r\nvar AWTClockSkewManager = /** @class */ (function () {\r\n    function AWTClockSkewManager() {\r\n        this._allowRequestSending = true;\r\n        this._shouldAddClockSkewHeaders = true;\r\n        this._isFirstRequest = true;\r\n        this._clockSkewHeaderValue = 'use-collector-delta';\r\n        this._clockSkewSet = false;\r\n    }\r\n    /**\r\n     * Determine if the request can be sent.\r\n     * @return {boolean} True if requests can be sent, false otherwise.\r\n     */\r\n    AWTClockSkewManager.prototype.allowRequestSending = function () {\r\n        if (this._isFirstRequest && !this._clockSkewSet) {\r\n            this._isFirstRequest = false;\r\n            this._allowRequestSending = false;\r\n            return true;\r\n        }\r\n        return this._allowRequestSending;\r\n    };\r\n    /**\r\n     * Determine if clock skew headers should be added to the request.\r\n     * @return {boolean} True if clock skew headers should be added, false otherwise.\r\n     */\r\n    AWTClockSkewManager.prototype.shouldAddClockSkewHeaders = function () {\r\n        return this._shouldAddClockSkewHeaders;\r\n    };\r\n    /**\r\n     * Gets the clock skew header value.\r\n     * @return {string} The clock skew header value.\r\n     */\r\n    AWTClockSkewManager.prototype.getClockSkewHeaderValue = function () {\r\n        return this._clockSkewHeaderValue;\r\n    };\r\n    /**\r\n     * Sets the clock skew header value. Once clock skew is set this method\r\n     * is no-op.\r\n     * @param {string} timeDeltaInMillis - Time delta to be saved as the clock skew header value.\r\n     */\r\n    AWTClockSkewManager.prototype.setClockSkew = function (timeDeltaInMillis) {\r\n        if (!this._clockSkewSet) {\r\n            if (timeDeltaInMillis) {\r\n                this._clockSkewHeaderValue = timeDeltaInMillis;\r\n            }\r\n            else {\r\n                this._shouldAddClockSkewHeaders = false;\r\n            }\r\n            this._clockSkewSet = true;\r\n            this._allowRequestSending = true;\r\n        }\r\n    };\r\n    return AWTClockSkewManager;\r\n}());\r\nexports.default = AWTClockSkewManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTClockSkewManager.js\n// module id = 29\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = require(\"./Enums\");\r\n/**\r\n* Class to batch events.\r\n*/\r\nvar AWTRecordBatcher = /** @class */ (function () {\r\n    function AWTRecordBatcher(_outboundQueue, _maxNumberOfEvents) {\r\n        this._outboundQueue = _outboundQueue;\r\n        this._maxNumberOfEvents = _maxNumberOfEvents;\r\n        this._currentBatch = {};\r\n        this._currentNumEventsInBatch = 0;\r\n    }\r\n    /**\r\n     * Add an event to the current batch.\r\n     * If the priority of the event is synchronous, it will also return the batch containing only the synchronous event.\r\n     * @param {object} event - The event that needs to be batched.\r\n     * @return {object} If the priority of the event is synchronous, it will also return the batch containing only the synchronous event.\r\n     * Otherwise returns null.\r\n     */\r\n    AWTRecordBatcher.prototype.addEventToBatch = function (event) {\r\n        if (event.priority === Enums_1.AWTEventPriority.Immediate_sync) {\r\n            //batch immediate priority into its own batch\r\n            var immediateBatch = {};\r\n            immediateBatch[event.apiKey] = [event];\r\n            return immediateBatch;\r\n        }\r\n        else {\r\n            if (this._currentNumEventsInBatch >= this._maxNumberOfEvents) {\r\n                this.flushBatch();\r\n            }\r\n            if (this._currentBatch[event.apiKey] === undefined) {\r\n                this._currentBatch[event.apiKey] = [];\r\n            }\r\n            this._currentBatch[event.apiKey].push(event);\r\n            this._currentNumEventsInBatch++;\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Flush the current batch so that it is added to the outbound queue.\r\n     */\r\n    AWTRecordBatcher.prototype.flushBatch = function () {\r\n        if (this._currentNumEventsInBatch > 0) {\r\n            this._outboundQueue.push(this._currentBatch);\r\n            this._currentBatch = {};\r\n            this._currentNumEventsInBatch = 0;\r\n        }\r\n    };\r\n    /**\r\n     * Check if there is a batch that contains events.\r\n     */\r\n    AWTRecordBatcher.prototype.hasBatch = function () {\r\n        return this._currentNumEventsInBatch > 0;\r\n    };\r\n    return AWTRecordBatcher;\r\n}());\r\nexports.default = AWTRecordBatcher;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/common/AWTRecordBatcher.js\n// module id = 30\n// module chunks = 0","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\n/**\r\n * The AWTTransmissionManager calss is a wrapper class that exposes some of the\r\n * Transmission functionality needed by other Aria modules.\r\n */\r\nvar AWTTransmissionManager = /** @class */ (function () {\r\n    function AWTTransmissionManager() {\r\n    }\r\n    /**\r\n     * Sets the event handler used by the tranmission manager.\r\n     * The default event handler is the Inbound queue manager. This handler\r\n     * is used to batch and send events to Aria. If you intend to send events\r\n     * to Aria please make sure that your event handler forwards events to the Inbound\r\n     * Queue Manager. You can retrieve the Inbound Queue Manager by calling\r\n     * getEventsHandler before you set your handler.\r\n     * @param {object} eventsHandler - An AWTEventHandler event handler used by the tranmission\r\n     * manager.\r\n     */\r\n    AWTTransmissionManager.setEventsHandler = function (eventsHandler) {\r\n        AWTTransmissionManagerCore_1.default.setEventsHandler(eventsHandler);\r\n    };\r\n    /**\r\n     * Gets the current event handler used by the tranmission manager.\r\n     * @return {object} An AWTEventHandler event handler used by the tranmission manager.\r\n     */\r\n    AWTTransmissionManager.getEventsHandler = function () {\r\n        return AWTTransmissionManagerCore_1.default.getEventsHandler();\r\n    };\r\n    /**\r\n     * The scheduleTimer method tries to schedule the waiting period after which events are sent. If there are\r\n     * no events to be sent, or if there is already a timer scheduled, or if the\r\n     * http manager doesn't have any idle connections, then this method is no-op.\r\n     */\r\n    AWTTransmissionManager.scheduleTimer = function () {\r\n        AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n    };\r\n    return AWTTransmissionManager;\r\n}());\r\nexports.default = AWTTransmissionManager;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTTransmissionManager.js\n// module id = 31\n// module chunks = 0"],"sourceRoot":""}