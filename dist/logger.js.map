{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/Enums.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/Utils.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTNotificationManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTTransmissionManagerCore.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/Enums.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTEventProperties.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.primitives.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTSemanticContext.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTAutoCollection.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/DataModels.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogger.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTStatsManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTSerializer.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/Version.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTLogManagerSettings.js","webpack:///./src/index.ts","webpack:///./src/logger.ts","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AriaSDK.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTQueueManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTHttpManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/bond_const.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.encoding.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.floatutils.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.utils.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/bond/microsoft.bond.io.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTRetryPolicy.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTKillSwitch.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTClockSkewManager.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/common/AWTRecordBatcher.js","webpack:///./node_modules/@aria/webjs-sdk/dist/src/webjs/AWTTransmissionManager.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","AWTPropertyType","AWTPiiKind","AWTCustomerContentKind","AWTEventPriority","AWTEventsDroppedReason","AWTEventsRejectedReason","microsoft_bond_primitives_1","Enums_1","GuidRegex","MSTillUnixEpoch","MSToTicksMultiplier","EventNameAndTypeRegex","EventNameDotRegex","PropertyNameRegex","StatsApiKey","beaconsSupported","uInt8ArraySupported","useXDR","isString","isNumber","isBoolean","isReactNative","navigator","product","twoDigit","toString","numberToBondInt64","bond_value","Int64","low","high","Math","floor","newGuid","replace","random","msToTicks","timeInMs","getTenantId","apiKey","indexTenantId","indexOf","substring","isBeaconsSupported","Boolean","sendBeacon","isUint8ArrayAvailable","Uint8Array","userAgent","ua","toLowerCase","isSafariOrFirefox","isPriority","sanitizeProperty","test","undefined","type","Unspecified","isPropertyType","String","Double","getCorrectType","pii","cc","isPii","isCustomerContent","getISOString","date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","useXDomainRequest","conn","XMLHttpRequest","withCredentials","XDomainRequest","AWTNotificationManager","addNotificationListener","listener","this","listeners","push","removeNotificationListener","index","splice","eventsSent","events","_this","_loop_1","this_1","setTimeout","length","eventsDropped","reason","_loop_2","this_2","eventsRetrying","_loop_3","this_3","eventsRejected","_loop_4","this_4","default","DataModels_1","AWTQueueManager_1","AWTStatsManager_1","AWTEventProperties_1","AWTLogManager_1","Utils","AWTTransmissionManagerCore","setEventsHandler","eventsHandler","_eventHandler","getEventsHandler","scheduleTimer","timer","_profiles","_currentProfile","_timeout","_paused","hasEvents","_currentBackoffCount","_batchAndSendEvents","_timerCount","initialize","config","_newEventsAllowed","_config","collectorUri","cacheMemorySizeLimitInNumberOfEvents","httpXHROverride","_initializeProfiles","stats","tenantId","canSendStatEvent","event_1","statKey","setEventPriority","High","setProperty","getLogger","logEvent","setTransmitProfile","profileName","clearTimeout","loadTransmitProfiles","profiles","_resetTransmitProfiles","j","timerMultiplier","ceil","sendEvent","event","priority","Immediate_sync","addEvent","flush","callback","currentTime","Date","getTime","_lastUploadNowCall","uploadNow","pauseTransmission","resumeTransmision","resumeTransmission","flushAndTeardown","teardown","backOffTransmission","clearBackOff","AWT_REAL_TIME","Low","Normal","sendEventsForPriorityAndAbove","AWT_NEAR_REAL_TIME","AWT_BEST_EFFORT","AWTUserIdType","AWTSessionState","AWTEventProperties","_event","properties","setName","getName","setType","getType","setTimestamp","timestampInEpochMillis","timestamp","getTimestamp","getEventPriority","NotSet","setPropertyWithPii","setPropertyWithCustomerContent","customerContent","getPropertyMap","getEvent","numberStr","parseInt","_Equals","tmp","UInt64","Number","_ToByte","_ToUInt8","_ToInt32","_ToUInt32","AWTAutoCollection_1","Enums_2","AWTSemanticContext","_allowDeviceFields","_properties","setAppId","appId","_addContext","setAppVersion","appVersion","setAppLanguage","appLanguage","setDeviceId","deviceId","checkAndSaveDeviceId","setDeviceOsName","deviceOsName","setDeviceOsVersion","deviceOsVersion","setDeviceBrowserName","deviceBrowserName","setDeviceBrowserVersion","deviceBrowserVersion","setDeviceMake","deviceMake","setDeviceModel","deviceModel","setUserId","userId","userIdType","isNaN","inferredUserIdType","SipAddress","PhoneNumber","SmtpAddress","EmailAddress","Unknown","Skype","Identity","_addContextWithPii","setUserAdvertisingId","userAdvertisingId","setUserTimeZone","userTimeZone","setUserLanguage","userLanguage","DEVICE_ID_COOKIE","FIRSTLAUNCHTIME_COOKIE","BROWSERS","OPERATING_SYSTEMS","OSNAMEREGEX","VERSION_MAPPINGS","5.1","6.0","6.1","6.2","6.3","10.0","AWTAutoCollection","addPropertyStorageOverride","propertyStorage","_propertyStorage","autoCollect","semanticContext","disableCookies","_semanticContext","_disableCookies","_autoCollect","_autoCollectFromUserAgent","_deleteCookie","_areCookiesAvailable","_autoCollectDeviceId","_getData","_saveData","_setFirstLaunchTime","document","documentElement","lang","language","timeZone","getTimezoneOffset","minutes","hours","timeZonePrefix","abs","browserName","_getBrowserName","_getBrowserVersion","osName","_getOsName","_getOsVersion","_userAgentContainsString","flt","fltDate","setTime","firstLaunchTime","searchString","_getIeVersion","_getOtherVersion","classicIeVersionMatches","match","RegExp","ieVersionMatches","browserString","matches","_getGenericOsVersion","_getMacOsxVersion","ntVersionMatches","macOsxVersionInUserAgentMatches","versionString","delimiter","_getDelimiter","split","expires","toUTCString","cookie","getProperty","ca","charAt","AWTNotificationManager_1","AWTTransmissionManagerCore_1","AWTLogManagerSettings_1","Version","AWTSemanticContext_1","AWTLogger","_apiKey","_contextProperties","_sessionStartTime","_createInitId","setContext","setContextWithPii","setContextWithCustomerContent","getSemanticContext","loggingEnabled","defaultTenantToken","sanitizeProperties","eventReceived","_logEvent","_getInternalEvent","logSession","state","sessionEnabled","sessionEvent","_addPropertiesToEvent","Started","_sessionId","Ended","sessionDurationSec","_getSessionDurationFromTime","getSessionId","logFailure","signature","detail","category","id","failureEvent","logPageView","pageName","uri","referrerUri","pageViewEvent","_initIdMap","propertiesEvent","name_1","timeInSec","eventWithMetaData","contextProperties","_addContextIfAbsent","logManagerContext","_setDefaultProperty","_getInitId","_getSequenceId","FullVersionString","toISOString","_sendEvent","InvalidEvent","name_2","internalEvent","name_3","_sequenceIdMap","AWTStatsManager","sendStats","_sendStats","_isInitalized","_addStat","NonRetryableStatus","QueueFull","KillSwitch","SizeLimitExceeded","_stats","statName","Bond","AWTSerializer","getPayloadBlob","requestDictionary","tokenCount","remainingRequest","stream","IO","MemoryStream","writer","CompactBinaryProtocolWriter","token","_WriteFieldBegin","_BondDataType","_BT_MAP","_WriteMapContainerBegin","_BT_STRING","_BT_LIST","_WriteString","dataPackage","_WriteContainerBegin","_BT_STRUCT","_BT_INT64","_WriteInt64","now","dpSizePos","_GetBuffer","dpSizeSerialized","currentStreamPos","writeEvent","_addNewDataPackageSize","_WriteStructEnd","payloadBlob","size","oldDpSize","streamPos","newRecordCountSerialized","_Encoding","_Varint_GetBytes","slice","eventData","propsString","propStringCount","propsInt64","propInt64Count","propsDouble","propDoubleCount","propsBool","propBoolCount","piiProps","piiPropCount","ccProps","ccPropCount","_BT_INT32","_WriteInt32","_BT_BOOL","_WriteBool","_BT_DOUBLE","_WriteDouble","base64Encode","data","_Base64_GetString","AWTLogger_1","AWTLogManager","tenantToken","configuration","_isInitialized","_overrideValuesFromConfig","disableCookiesUsage","propertyStorageOverride","enableAutoUserSession","window","addEventListener","_isDestroyed","_loggers","sendPOST","eventName","AWTLogManagerSettings","logger_1","ARIA_SCRIPT","getElementById","console","assert","LogLevel","CONFIG","dataset","TOKEN","LEVEL","level","toLocaleLowerCase","CORELATION_ID","corelation","APP_NAME","appname","location","hostname","LOG_TABLE","table","VERBOSE","_originConsole","log","Log","action","content","attrs","title","url","URL","JSON","stringify","telemetry","init","corelationId","userid","subscribeId","subid","apply","arguments","forEach","args","_i","unshift","onbeforeunload","onerror","msg","line","col","error","file","_logger","_token","_table","webjs_sdk_1","_name","AWTTransmissionManager_1","AWTTransmissionManager","AWTSerializer_1","AWT_COLLECTOR_URL_UNITED_STATES","AWT_COLLECTOR_URL_GERMANY","AWT_COLLECTOR_URL_JAPAN","AWT_COLLECTOR_URL_AUSTRALIA","AWT_COLLECTOR_URL_EUROPE","AWT_COLLECTOR_URL_USGOV_DOD","AWT_COLLECTOR_URL_USGOV_DOJ","AWTHttpManager_1","AWTRecordBatcher_1","MaxNumberEventPerBatch","AWTQueueManager","collectorUrl","_queueSizeLimit","xhrOverride","_isCurrentlyUploadingNow","_uploadNowQueue","_shouldDropEventsOnPause","_queueSize","_outboundQueue","_inboundQueues","_addEmptyQueues","_batcher","_httpManager","sendSynchronousRequest","addEventToBatch","_addEventToProperQueue","_dropEventWithPriorityOrLess","_batchEvents","sendQueuedRequests","hasBatch","hasIdleConnection","addBackRequest","request","sendAttempt","_uploadNow","pause","shouldDropEventsOnPause","removeQueuedRequests","resume","_removeFirstQueues","shift","currentPriority","priorityToProcess","pop","flushBatch","_checkOutboundQueueEmptyAndSent","isCompletelyIdle","AWTRetryPolicy_1","AWTKillSwitch_1","AWTClockSkewManager_1","Method","AWTHttpManager","_requestQueue","_queueManager","_httpInterface","_urlString","_killSwitch","_clockSkewManager","_useBeacons","_activeConnections","urlString","ontimeout","onload","sync","xdr","open","send","fetch","body","method","then","response","headerMap","headers","status","catch","xhr_1","_convertAllHeadersToMap","getAllResponseHeaders","allowRequestSending","_sendRequest","retryCount","isTeardown","isSynchronous","apikey","isTenantKilled","payloadResult","shouldAddClockSkewHeaders","getClockSkewHeaderValue","_retryRequestIfNeeded","_handleRequestFinished","shouldRetry","killedTokens","setKillSwitchTenants","setClockSkew","shouldRetryForStatus","getMillisToBackoffForRetry","success","headersString","headersArray","header","bond_const_1","_stream","_WriteBlob","blob","_Write","_WriteByte","elementType","_WriteUInt8","_WriteUInt32","keyType","valueType","array","_Double_GetBytes","metadata","_Zigzag_EncodeZigzag32","_WriteUInt64","_Zigzag_EncodeZigzag64","_Utf8_GetBytes","isBase","_BT_STOP_BASE","_BT_STOP","_Varint64_GetBytes","microsoft_bond_floatutils_1","microsoft_bond_utils_1","char","charCodeAt","inArray","num","lookup","output","paddingBytes","length_1","temp","join","temp2","BrowserChecker","_IsDataViewSupport","view","DataView","ArrayBuffer","setFloat64","getUint8","FloatUtils","_ConvertNumberToArray","tmpH","tmpL","res","isDouble","_doubleZero","_floatZero","precisionBits","bias","minExponent","maxExponent","sign","intPart","floatPart","len","buffer","Array","firstBit","exponent","lastBit","_doubleNegInifinity","_floatNegInifinity","_doubleInifinity","_floatInifinity","result","_buffer","byte","offset","count","AWTRetryPolicy","httpStatusCode","retriesSoFar","waitDuration","randomBackoff","BaseBackoff","pow","min","AWTKillSwitch","_killedTokenDictionary","killTokens","killDuration","durationMs","ex","AWTClockSkewManager","_allowRequestSending","_shouldAddClockSkewHeaders","_isFirstRequest","_clockSkewHeaderValue","_clockSkewSet","timeDeltaInMillis","AWTRecordBatcher","_maxNumberOfEvents","_currentBatch","_currentNumEventsInBatch","immediateBatch"],"mappings":"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","file":"logger.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Enums.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing the enums.\r\n*/\r\n/**\r\n * The AWTPropertyType enumeration contains a set of values that specify types of properties.\r\n * @enum {number}\r\n */\r\nvar AWTPropertyType;\r\n(function (AWTPropertyType) {\r\n    /**\r\n     * Property type is unspecified.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Unspecified\"] = 0] = \"Unspecified\";\r\n    /**\r\n     * A string.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"String\"] = 1] = \"String\";\r\n    /**\r\n     * A 64-bit integer.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Int64\"] = 2] = \"Int64\";\r\n    /**\r\n     * A double.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Double\"] = 3] = \"Double\";\r\n    /**\r\n     * A boolean.\r\n     */\r\n    AWTPropertyType[AWTPropertyType[\"Boolean\"] = 4] = \"Boolean\";\r\n})(AWTPropertyType = exports.AWTPropertyType || (exports.AWTPropertyType = {}));\r\n/**\r\n * The AWTPiiKind enumeration contains a set of values that specify the kind of PII (Personal Identifiable Information).\r\n * @enum {number}\r\n */\r\nvar AWTPiiKind;\r\n(function (AWTPiiKind) {\r\n    /**\r\n     * No kind.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * An LDAP distinguished name. For example, CN=Jeff Smith,OU=Sales,DC=Fabrikam,DC=COM.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"DistinguishedName\"] = 1] = \"DistinguishedName\";\r\n    /**\r\n     * Generic information.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"GenericData\"] = 2] = \"GenericData\";\r\n    /**\r\n     * An IPV4 Internet address. For example, 192.0.2.1.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPV4Address\"] = 3] = \"IPV4Address\";\r\n    /**\r\n     * An IPV6 Internet address. For example, 2001:0db8:85a3:0000:0000:8a2e:0370:7334.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPv6Address\"] = 4] = \"IPv6Address\";\r\n    /**\r\n     * The Subject of an e-mail message.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"MailSubject\"] = 5] = \"MailSubject\";\r\n    /**\r\n     * A telephone number.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"PhoneNumber\"] = 6] = \"PhoneNumber\";\r\n    /**\r\n     * A query string.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"QueryString\"] = 7] = \"QueryString\";\r\n    /**\r\n     * An SIP (Session Internet Protocol) address.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"SipAddress\"] = 8] = \"SipAddress\";\r\n    /**\r\n     * An e-mail address.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"SmtpAddress\"] = 9] = \"SmtpAddress\";\r\n    /**\r\n     * An user ID.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Identity\"] = 10] = \"Identity\";\r\n    /**\r\n     * A URI (Uniform Resource Identifier).\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Uri\"] = 11] = \"Uri\";\r\n    /**\r\n     * The fully-qualified domain name.\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"Fqdn\"] = 12] = \"Fqdn\";\r\n    /**\r\n     * Scrubs the last octet in a IPV4 Internet address.\r\n     * For example: 10.121.227.147 becomes 10.121.227.*\r\n     */\r\n    AWTPiiKind[AWTPiiKind[\"IPV4AddressLegacy\"] = 13] = \"IPV4AddressLegacy\";\r\n})(AWTPiiKind = exports.AWTPiiKind || (exports.AWTPiiKind = {}));\r\n/**\r\n * The AWTCustomerContentKind enumeration contains a set of values that specify the kind of customer content.\r\n * @enum {number}\r\n */\r\nvar AWTCustomerContentKind;\r\n(function (AWTCustomerContentKind) {\r\n    /**\r\n     * No kind.\r\n     */\r\n    AWTCustomerContentKind[AWTCustomerContentKind[\"NotSet\"] = 0] = \"NotSet\";\r\n    /**\r\n     * Generic content.\r\n     */\r\n    AWTCustomerContentKind[AWTCustomerContentKind[\"GenericContent\"] = 1] = \"GenericContent\";\r\n})(AWTCustomerContentKind = exports.AWTCustomerContentKind || (exports.AWTCustomerContentKind = {}));\r\n/**\r\n * The AWTEventPriority enumeration contains a set of values that specify an event's priority.\r\n * @enum {number}\r\n */\r\nvar AWTEventPriority;\r\n(function (AWTEventPriority) {\r\n    /**\r\n     * Low priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"Low\"] = 1] = \"Low\";\r\n    /**\r\n     * Normal priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"Normal\"] = 2] = \"Normal\";\r\n    /**\r\n     * High priority.\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"High\"] = 3] = \"High\";\r\n    /**\r\n     * Immediate_sync priority (Events are sent sync immediately).\r\n     */\r\n    AWTEventPriority[AWTEventPriority[\"Immediate_sync\"] = 5] = \"Immediate_sync\";\r\n})(AWTEventPriority = exports.AWTEventPriority || (exports.AWTEventPriority = {}));\r\n/**\r\n * The AWTEventsDroppedReason enumeration contains a set of values that specify the reason for dropping an event.\r\n * @enum {number}\r\n */\r\nvar AWTEventsDroppedReason;\r\n(function (AWTEventsDroppedReason) {\r\n    /**\r\n     * Status set to non-retryable.\r\n     */\r\n    AWTEventsDroppedReason[AWTEventsDroppedReason[\"NonRetryableStatus\"] = 1] = \"NonRetryableStatus\";\r\n    /**\r\n     * The event queue is full.\r\n     */\r\n    AWTEventsDroppedReason[AWTEventsDroppedReason[\"QueueFull\"] = 3] = \"QueueFull\";\r\n})(AWTEventsDroppedReason = exports.AWTEventsDroppedReason || (exports.AWTEventsDroppedReason = {}));\r\n/**\r\n * The AWTEventsRejectedReason enumeration contains a set of values that specify the reason for rejecting an event.\r\n * @enum {number}\r\n */\r\nvar AWTEventsRejectedReason;\r\n(function (AWTEventsRejectedReason) {\r\n    /**\r\n     * The event is invalid.\r\n     */\r\n    AWTEventsRejectedReason[AWTEventsRejectedReason[\"InvalidEvent\"] = 1] = \"InvalidEvent\";\r\n    /**\r\n     * The size of the event is too large.\r\n     */\r\n    AWTEventsRejectedReason[AWTEventsRejectedReason[\"SizeLimitExceeded\"] = 2] = \"SizeLimitExceeded\";\r\n    /**\r\n     * The server is not accepting events from this token.\r\n     */\r\n    AWTEventsRejectedReason[AWTEventsRejectedReason[\"KillSwitch\"] = 3] = \"KillSwitch\";\r\n})(AWTEventsRejectedReason = exports.AWTEventsRejectedReason || (exports.AWTEventsRejectedReason = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Utils.ts\r\n* @author  Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing utility functions.\r\n*/\r\nvar microsoft_bond_primitives_1 = require(\"../bond/microsoft.bond.primitives\");\r\nvar Enums_1 = require(\"./Enums\");\r\nvar GuidRegex = /[xy]/g;\r\nvar MSTillUnixEpoch = 62135596800000;\r\nvar MSToTicksMultiplier = 10000;\r\nexports.EventNameAndTypeRegex = /^[a-zA-Z]([a-zA-Z0-9]|_){2,98}[a-zA-Z0-9]$/;\r\nexports.EventNameDotRegex = /\\./g;\r\nexports.PropertyNameRegex = /^[a-zA-Z](([a-zA-Z0-9|_|\\.]){0,98}[a-zA-Z0-9])?$/;\r\nexports.StatsApiKey = 'a387cfcf60114a43a7699f9fbb49289e-9bceb9fe-1c06-460f-96c5-6a0b247358bc-7238';\r\nvar beaconsSupported = null;\r\nvar uInt8ArraySupported = null;\r\nvar useXDR = null;\r\n/**\r\n * Converts a number to Bond Int64.\r\n * @param {number} value - The number to be converted.\r\n * @return {object} The Int64 value for the passed number.\r\n */\r\nfunction numberToBondInt64(value) {\r\n    // Construct bond timestamp for aria\r\n    var bond_value = new microsoft_bond_primitives_1.Int64('0');\r\n    bond_value.low = value & 0xffffffff;\r\n    bond_value.high = Math.floor(value / 0x100000000);\r\n    return bond_value;\r\n}\r\nexports.numberToBondInt64 = numberToBondInt64;\r\n/**\r\n * Creates a new GUID.\r\n * @return {string} A GUID.\r\n */\r\nfunction newGuid() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(GuidRegex, function (c) {\r\n        var r = (Math.random() * 16 | 0), v = (c === 'x' ? r : r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\nexports.newGuid = newGuid;\r\n/**\r\n * Checks if the type of value is a string.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a string, false otherwise.\r\n */\r\nfunction isString(value) {\r\n    return typeof value === 'string';\r\n}\r\nexports.isString = isString;\r\n/**\r\n * Checks if the type of value is a number.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a number, false otherwise.\r\n */\r\nfunction isNumber(value) {\r\n    return typeof value === 'number';\r\n}\r\nexports.isNumber = isNumber;\r\n/**\r\n * Checks if the type of value is a boolean.\r\n * @param {any} value - Value to be checked.\r\n * @return {boolean} True if the value is a boolean, false otherwise.\r\n */\r\nfunction isBoolean(value) {\r\n    return typeof value === 'boolean';\r\n}\r\nexports.isBoolean = isBoolean;\r\n/**\r\n * Converts milliseconds to ticks since 00:00:00 Jan 1, 0001.\r\n * @param {number} msToTicks - The milliseconds value to be converted.\r\n * @return {number} The value of the milliseconds in .Net Ticks.\r\n */\r\nfunction msToTicks(timeInMs) {\r\n    return (timeInMs + MSTillUnixEpoch) * MSToTicksMultiplier;\r\n}\r\nexports.msToTicks = msToTicks;\r\n/**\r\n * Gets the tenant id from the tenant token.\r\n * @param {string} apiKey - The token from which the tenant id is to be extracted.\r\n * @return {string} The tenant id.\r\n */\r\nfunction getTenantId(apiKey) {\r\n    var indexTenantId = apiKey.indexOf('-');\r\n    if (indexTenantId > -1) {\r\n        return apiKey.substring(0, indexTenantId);\r\n    }\r\n    return '';\r\n}\r\nexports.getTenantId = getTenantId;\r\n/**\r\n * Checks if HTML5 Beacons are supported in the current environment.\r\n * @return {boolean} True if supported, false otherwise.\r\n */\r\nfunction isBeaconsSupported() {\r\n    if (beaconsSupported === null) {\r\n        beaconsSupported = typeof navigator !== 'undefined' && Boolean(navigator.sendBeacon);\r\n    }\r\n    return beaconsSupported;\r\n}\r\nexports.isBeaconsSupported = isBeaconsSupported;\r\n/**\r\n * Checks if Uint8Array are available in the current environment. Safari and Firefox along with\r\n * ReactNative are known to not support Uint8Array properly.\r\n * @return {boolean} True if available, false otherwise.\r\n */\r\nfunction isUint8ArrayAvailable() {\r\n    if (uInt8ArraySupported === null) {\r\n        uInt8ArraySupported = typeof Uint8Array !== 'undefined' && !isSafariOrFirefox() && !isReactNative();\r\n    }\r\n    return uInt8ArraySupported;\r\n}\r\nexports.isUint8ArrayAvailable = isUint8ArrayAvailable;\r\n/**\r\n * Checks if the value is an AWTEventPriority.\r\n * @param {enum} value - The value that needs to be checked.\r\n * @return {boolean} True if the value is in AWTEventPriority, false otherwise.\r\n */\r\nfunction isPriority(value) {\r\n    if (isNumber(value) && ((value >= 1 && value <= 3) || value === 5)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexports.isPriority = isPriority;\r\n/**\r\n * Sanitizes the Property. It checks the that the property name and value are valid. It also\r\n * checks/populates the correct type and pii of the property value.\r\n * @param {string} name                           - The property name.\r\n * @param {string|number|boolean|object} property - The property value or an AWTEventProperty containing value,\r\n * type ,pii and customer content.\r\n * @return {object} AWTEventProperty containing valid name, value, pii and type or null if invalid.\r\n */\r\nfunction sanitizeProperty(name, property) {\r\n    //Check that property is valid\r\n    if (!exports.PropertyNameRegex.test(name) || property === undefined || property === null || property === '') {\r\n        return null;\r\n    }\r\n    //If the property isn't AWTEventProperty, convert it into one.\r\n    if (isString(property) || isNumber(property) || isBoolean(property)) {\r\n        property = { value: property, type: Enums_1.AWTPropertyType.Unspecified };\r\n    }\r\n    else if (property.value === undefined || property.value === null\r\n        || property.value === '' || (!isString(property.value)\r\n        && !isNumber(property.value) && !isBoolean(property.value))) {\r\n        //Since property is AWTEventProperty, we need to validate its value\r\n        return null;\r\n    }\r\n    property.type = sanitizePropertyType(property.value, property.type);\r\n    if (!property.type) {\r\n        return null;\r\n    }\r\n    //Ensure that only one of pii or customer content can be set\r\n    if (property.pii > 0 && property.cc > 0) {\r\n        return null;\r\n    }\r\n    //If pii is set we need to validate its enum value.\r\n    if (property.pii) {\r\n        return isPii(property.pii) ? property : null;\r\n    }\r\n    //If cc is set we need to validate its enum value.\r\n    if (property.cc) {\r\n        return isCustomerContent(property.cc) ? property : null;\r\n    }\r\n    return property;\r\n}\r\nexports.sanitizeProperty = sanitizeProperty;\r\n/**\r\n * Converts a date object into an ISO string. This is needed because not all browsers support ISO string format\r\n * on the date.\r\n * @param {object} date - The date which needs to be converted to ISO format.\r\n * @return {string} The date in ISO format.\r\n */\r\nfunction getISOString(date) {\r\n    return date.getUTCFullYear() + '-' +\r\n        twoDigit(date.getUTCMonth() + 1) + '-' +\r\n        twoDigit(date.getUTCDate()) + 'T' +\r\n        twoDigit(date.getUTCHours()) + ':' +\r\n        twoDigit(date.getUTCMinutes()) + ':' +\r\n        twoDigit(date.getUTCSeconds()) + '.' +\r\n        threeDigit(date.getUTCMilliseconds()) + 'Z';\r\n}\r\nexports.getISOString = getISOString;\r\nfunction useXDomainRequest() {\r\n    if (useXDR === null) {\r\n        var conn = new XMLHttpRequest();\r\n        if (typeof conn.withCredentials === 'undefined' &&\r\n            typeof XDomainRequest !== 'undefined') {\r\n            useXDR = true;\r\n        }\r\n        else {\r\n            useXDR = false;\r\n        }\r\n    }\r\n    return useXDR;\r\n}\r\nexports.useXDomainRequest = useXDomainRequest;\r\nfunction isReactNative() {\r\n    // If running in React Native, navigator.product will be populated\r\n    if (typeof navigator !== 'undefined' && navigator.product) {\r\n        return navigator.product === 'ReactNative';\r\n    }\r\n    return false;\r\n}\r\nexports.isReactNative = isReactNative;\r\nfunction twoDigit(n) {\r\n    // Format integers to have at least two digits.\r\n    return n < 10 ? '0' + n : n.toString();\r\n}\r\nfunction threeDigit(n) {\r\n    // Format integers to have at least three digits.\r\n    if (n < 10) {\r\n        return '00' + n;\r\n    }\r\n    else if (n < 100) {\r\n        return '0' + n;\r\n    }\r\n    return n.toString();\r\n}\r\nfunction sanitizePropertyType(value, type) {\r\n    if (!isPropertyType(type) || type === Enums_1.AWTPropertyType.Unspecified) {\r\n        return getCorrectType(value);\r\n    }\r\n    if (type === Enums_1.AWTPropertyType.String && typeof value === 'string') {\r\n        return type;\r\n    }\r\n    if ((type === Enums_1.AWTPropertyType.Double || type === Enums_1.AWTPropertyType.Int64) && typeof value === 'number') {\r\n        if (type === Enums_1.AWTPropertyType.Int64 && value % 1 !== 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return type;\r\n        }\r\n    }\r\n    if (type === Enums_1.AWTPropertyType.Boolean && typeof value === 'boolean') {\r\n        return type;\r\n    }\r\n}\r\nfunction getCorrectType(value) {\r\n    switch (typeof value) {\r\n        case 'string':\r\n            return Enums_1.AWTPropertyType.String;\r\n        case 'boolean':\r\n            return Enums_1.AWTPropertyType.Boolean;\r\n        case 'number':\r\n            return Enums_1.AWTPropertyType.Double;\r\n    }\r\n    return Enums_1.AWTPropertyType.Unspecified;\r\n}\r\nfunction isPii(value) {\r\n    if (isNumber(value) && value >= 0 && value <= 13) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isCustomerContent(value) {\r\n    if (isNumber(value) && value >= 0 && value <= 1) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isPropertyType(value) {\r\n    if (isNumber(value) && value >= 0 && value <= 4) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isSafariOrFirefox() {\r\n    // If non-browser navigator will be undefined\r\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n        var ua = navigator.userAgent.toLowerCase();\r\n        if ((ua.indexOf('safari') >= 0 || ua.indexOf('firefox') >= 0) && ua.indexOf('chrome') < 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nvar AWTNotificationManager = /** @class */ (function () {\r\n    function AWTNotificationManager() {\r\n    }\r\n    /**\r\n     * Adds a notification listener.\r\n     * @param {object} listener - The notification listener to be added.\r\n     */\r\n    AWTNotificationManager.addNotificationListener = function (listener) {\r\n        this.listeners.push(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {object} listener - AWTNotificationListener to remove.\r\n     */\r\n    AWTNotificationManager.removeNotificationListener = function (listener) {\r\n        var index = this.listeners.indexOf(listener);\r\n        while (index > -1) {\r\n            this.listeners.splice(index, 1);\r\n            index = this.listeners.indexOf(listener);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events sent.\r\n     * @param {object[]} events - The array of events that have been sent.\r\n     */\r\n    AWTNotificationManager.eventsSent = function (events) {\r\n        var _this = this;\r\n        var _loop_1 = function (i) {\r\n            if (this_1.listeners[i].eventsSent) {\r\n                setTimeout(function () { return _this.listeners[i].eventsSent(events); }, 0);\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being dropped.\r\n     * @param {object[]} events - The array of events that have been dropped.\r\n     * @param {enum} reason     - The reason for which the SDK dropped the events.\r\n     */\r\n    AWTNotificationManager.eventsDropped = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_2 = function (i) {\r\n            if (this_2.listeners[i].eventsDropped) {\r\n                setTimeout(function () { return _this.listeners[i].eventsDropped(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_2 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_2(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being retried when the request failed with a retryable status.\r\n     * @param {object[]} events - The array of events that are being retried.\r\n     */\r\n    AWTNotificationManager.eventsRetrying = function (events) {\r\n        var _this = this;\r\n        var _loop_3 = function (i) {\r\n            if (this_3.listeners[i].eventsRetrying) {\r\n                setTimeout(function () { return _this.listeners[i].eventsRetrying(events); }, 0);\r\n            }\r\n        };\r\n        var this_3 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_3(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being rejected.\r\n     * @param {object[]} events - The array of events that have been rejected.\r\n     * @param {enum} reason     - The reason for which the SDK rejeceted the events.\r\n     */\r\n    AWTNotificationManager.eventsRejected = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_4 = function (i) {\r\n            if (this_4.listeners[i].eventsRejected) {\r\n                setTimeout(function () { return _this.listeners[i].eventsRejected(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_4 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_4(i);\r\n        }\r\n    };\r\n    AWTNotificationManager.listeners = [];\r\n    return AWTNotificationManager;\r\n}());\r\nexports.default = AWTNotificationManager;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTTransmissionManagerCore.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar DataModels_1 = require(\"./DataModels\");\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar AWTQueueManager_1 = require(\"./AWTQueueManager\");\r\nvar AWTStatsManager_1 = require(\"../common/AWTStatsManager\");\r\nvar AWTEventProperties_1 = require(\"./AWTEventProperties\");\r\nvar AWTLogManager_1 = require(\"./AWTLogManager\");\r\nvar Utils = require(\"../common/Utils\");\r\nvar MaxBackoffCount = 4;\r\nvar MinDurationBetweenUploadNow = 30000; //30 sec\r\nvar StatName = 'awt_stats';\r\n/**\r\n * Class that manages the timers for when to send events. It also\r\n * handles flush and flushAndTeardown. This class also allows setting\r\n * new event handlers. The default event handler is the Inbound Queue Manager.\r\n */\r\nvar AWTTransmissionManagerCore = /** @class */ (function () {\r\n    function AWTTransmissionManagerCore() {\r\n    }\r\n    /**\r\n     * Sets the event handler to be used by the tranmission manager.\r\n     * The default event handler is the Inbound queue manager. This handler\r\n     * is used to batch and send events to Aria. If you intend to send events\r\n     * to Aria please make sure your event handler forwards events to the Inbound\r\n     * Queue Manager. You can retrieve the Inbound Queue Manager by calling\r\n     * getEventsHandler before you set your handler.\r\n     * @param {object} eventsHandler - The new events handler to be used by the tranmission\r\n     * manager.\r\n     */\r\n    AWTTransmissionManagerCore.setEventsHandler = function (eventsHandler) {\r\n        this._eventHandler = eventsHandler;\r\n    };\r\n    /**\r\n     * Gets the current event handler used by the tranmission manager.\r\n     * @return {object} The event handler currently used by the tranmission manager.\r\n     */\r\n    AWTTransmissionManagerCore.getEventsHandler = function () {\r\n        return this._eventHandler;\r\n    };\r\n    /**\r\n     * Try to schedule the timer after which events will be sent. If there are\r\n     * no events to be sent, or there is already a timer scheduled, or the\r\n     * http manager doesn't have any idle connections this method is no-op.\r\n     */\r\n    AWTTransmissionManagerCore.scheduleTimer = function () {\r\n        var _this = this;\r\n        var timer = this._profiles[this._currentProfile][2];\r\n        if (this._timeout < 0 && timer >= 0 && !this._paused) {\r\n            if (this._eventHandler.hasEvents()) {\r\n                //If the transmission is backed off make the timer atleast 1 sec to allow for backoff.\r\n                if (timer === 0 && this._currentBackoffCount > 0) {\r\n                    timer = 1;\r\n                }\r\n                this._timeout = setTimeout(function () { return _this._batchAndSendEvents(); }, timer * (1 << this._currentBackoffCount) * 1000);\r\n            }\r\n            else {\r\n                this._timerCount = 0;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Initialize the transmission manager. After this method is called events are\r\n     * accepted for tranmission.\r\n     * @param {object} config - The configuration passed during AWTLogManager initialize.\r\n     */\r\n    AWTTransmissionManagerCore.initialize = function (config) {\r\n        var _this = this;\r\n        this._newEventsAllowed = true;\r\n        this._config = config;\r\n        this._eventHandler = new AWTQueueManager_1.default(config.collectorUri, config.cacheMemorySizeLimitInNumberOfEvents, config.httpXHROverride);\r\n        this._initializeProfiles();\r\n        AWTStatsManager_1.default.initialize(function (stats, tenantId) {\r\n            if (_this._config.canSendStatEvent(StatName)) {\r\n                var event_1 = new AWTEventProperties_1.default(StatName);\r\n                event_1.setEventPriority(Enums_1.AWTEventPriority.High);\r\n                event_1.setProperty('TenantId', tenantId);\r\n                for (var statKey in stats) {\r\n                    if (stats.hasOwnProperty(statKey)) {\r\n                        event_1.setProperty(statKey, stats[statKey].toString());\r\n                    }\r\n                }\r\n                AWTLogManager_1.default.getLogger(Utils.StatsApiKey).logEvent(event_1);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Set the transmit profile to be used. This will change the tranmission timers\r\n     * based on the transmit profile.\r\n     * @param {string} profileName - The name of the transmit profile to be used.\r\n     */\r\n    AWTTransmissionManagerCore.setTransmitProfile = function (profileName) {\r\n        if (this._currentProfile !== profileName && this._profiles[profileName] !== undefined) {\r\n            this.clearTimeout();\r\n            this._currentProfile = profileName;\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Load custom tranmission profiles. Each profile should have timers for\r\n     * high, normal and low.  Each profile should make sure\r\n     * that a each priority timer is a multiple of the priority higher than it.\r\n     * Setting the timer value to -1 means that the events for that priority will\r\n     * not be sent. Note that once a priority has been set to not send, all priorities\r\n     * below it will also not be sent. The timers should be in the form of [low, normal, high].\r\n     * e.g Custom: [30,10,5]\r\n     * This also removes any previously loaded custom profiles.\r\n     * @param {object} profiles - A dictionary containing the transmit profiles.\r\n     */\r\n    AWTTransmissionManagerCore.loadTransmitProfiles = function (profiles) {\r\n        this._resetTransmitProfiles();\r\n        for (var profileName in profiles) {\r\n            if (profiles.hasOwnProperty(profileName)) {\r\n                if (profiles[profileName].length !== 3) {\r\n                    continue;\r\n                }\r\n                //Make sure if a higher priority is set to not send then dont send lower priority\r\n                for (var i = 2; i >= 0; --i) {\r\n                    if (profiles[profileName][i] < 0) {\r\n                        for (var j = i; j >= 0; --j) {\r\n                            profiles[profileName][j] = -1;\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n                //Make sure each priority is multiple of the priority higher then it. If not a multiple\r\n                //we round up so that it becomes a multiple.\r\n                for (var i = 2; i > 0; --i) {\r\n                    if (profiles[profileName][i] > 0 && profiles[profileName][i - 1] > 0) {\r\n                        var timerMultiplier = profiles[profileName][i - 1] / profiles[profileName][i];\r\n                        profiles[profileName][i - 1] = Math.ceil(timerMultiplier) * profiles[profileName][i];\r\n                    }\r\n                }\r\n                this._profiles[profileName] = profiles[profileName];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Pass the event to the event handler and try to schedule the timer.\r\n     * @param {object} event - The event to be sent.\r\n     */\r\n    AWTTransmissionManagerCore.sendEvent = function (event) {\r\n        if (this._newEventsAllowed) {\r\n            //If the transmission is backed off then do not send synchronous events.\r\n            //We will convert these events to High priority instead.\r\n            if (this._currentBackoffCount > 0 && event.priority === Enums_1.AWTEventPriority.Immediate_sync) {\r\n                event.priority = Enums_1.AWTEventPriority.High;\r\n            }\r\n            this._eventHandler.addEvent(event);\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Sends events for all priority for the current inbound queue.\r\n     * This method adds new inbound queues to which new events will be added.\r\n     * Note: If LogManager is paused or flush is called again in less than 30 sec\r\n     * then flush will be no-op and the callback will not be called.\r\n     * @param {function} callback - The function to be called when flush is finished.\r\n     */\r\n    AWTTransmissionManagerCore.flush = function (callback) {\r\n        var currentTime = (new Date()).getTime();\r\n        if (!this._paused && this._lastUploadNowCall + MinDurationBetweenUploadNow < currentTime) {\r\n            this._lastUploadNowCall = currentTime;\r\n            if (this._timeout > -1) {\r\n                clearTimeout(this._timeout);\r\n                this._timeout = -1;\r\n            }\r\n            this._eventHandler.uploadNow(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Pauses transmission. It pauses the http manager and also clears timers.\r\n     */\r\n    AWTTransmissionManagerCore.pauseTransmission = function () {\r\n        if (!this._paused) {\r\n            this.clearTimeout();\r\n            this._eventHandler.pauseTransmission();\r\n            this._paused = true;\r\n        }\r\n    };\r\n    /**\r\n     * Resumes tranmission. It resumes the http manager and tries to schedule the timer.\r\n     */\r\n    AWTTransmissionManagerCore.resumeTransmision = function () {\r\n        if (this._paused) {\r\n            this._paused = false;\r\n            this._eventHandler.resumeTransmission();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Stops allowing new events being added for tranmission. It also batches all\r\n     * events currently in the queue and creates requests from them to be sent.\r\n     */\r\n    AWTTransmissionManagerCore.flushAndTeardown = function () {\r\n        AWTStatsManager_1.default.teardown();\r\n        this._newEventsAllowed = false;\r\n        this.clearTimeout();\r\n        //No op if offline storage is added\r\n        this._eventHandler.teardown();\r\n    };\r\n    /**\r\n     * Backs off tranmission. This exponentially increases all the timers.\r\n     */\r\n    AWTTransmissionManagerCore.backOffTransmission = function () {\r\n        if (this._currentBackoffCount < MaxBackoffCount) {\r\n            this._currentBackoffCount++;\r\n            this.clearTimeout();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Clears backoff for tranmission.\r\n     */\r\n    AWTTransmissionManagerCore.clearBackOff = function () {\r\n        if (this._currentBackoffCount > 0) {\r\n            this._currentBackoffCount = 0;\r\n            this.clearTimeout();\r\n            this.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Resets the transmit profiles to the default profiles of Real Time, Near Real Time\r\n     * and Best Effort. This removes all the custom profiles that were loaded.\r\n     */\r\n    AWTTransmissionManagerCore._resetTransmitProfiles = function () {\r\n        this.clearTimeout();\r\n        this._initializeProfiles();\r\n        this._currentProfile = DataModels_1.AWT_REAL_TIME;\r\n        this.scheduleTimer();\r\n    };\r\n    AWTTransmissionManagerCore.clearTimeout = function () {\r\n        if (this._timeout > 0) {\r\n            clearTimeout(this._timeout);\r\n            this._timeout = -1;\r\n            this._timerCount = 0;\r\n        }\r\n    };\r\n    AWTTransmissionManagerCore._batchAndSendEvents = function () {\r\n        var priority = Enums_1.AWTEventPriority.High;\r\n        this._timerCount++;\r\n        if (this._timerCount * this._profiles[this._currentProfile][2] === this._profiles[this._currentProfile][0]) {\r\n            priority = Enums_1.AWTEventPriority.Low;\r\n            this._timerCount = 0;\r\n        }\r\n        else if (this._timerCount * this._profiles[this._currentProfile][2] === this._profiles[this._currentProfile][1]) {\r\n            priority = Enums_1.AWTEventPriority.Normal;\r\n        }\r\n        this._eventHandler.sendEventsForPriorityAndAbove(priority);\r\n        this._timeout = -1;\r\n        this.scheduleTimer();\r\n    };\r\n    AWTTransmissionManagerCore._initializeProfiles = function () {\r\n        this._profiles = {};\r\n        this._profiles[DataModels_1.AWT_REAL_TIME] = [4, 2, 1];\r\n        this._profiles[DataModels_1.AWT_NEAR_REAL_TIME] = [12, 6, 3];\r\n        this._profiles[DataModels_1.AWT_BEST_EFFORT] = [36, 18, 9];\r\n    };\r\n    AWTTransmissionManagerCore._newEventsAllowed = false;\r\n    AWTTransmissionManagerCore._currentProfile = DataModels_1.AWT_REAL_TIME;\r\n    AWTTransmissionManagerCore._timeout = -1;\r\n    AWTTransmissionManagerCore._currentBackoffCount = 0;\r\n    AWTTransmissionManagerCore._paused = false;\r\n    AWTTransmissionManagerCore._timerCount = 0;\r\n    AWTTransmissionManagerCore._lastUploadNowCall = 0;\r\n    return AWTTransmissionManagerCore;\r\n}());\r\nexports.default = AWTTransmissionManagerCore;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Enums.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File containing the enums.\r\n*/\r\n/**\r\n * The AWTUserIdType enumeration contains a set of values that specify the type of user ID.\r\n * @enum {number}\r\n */\r\nvar AWTUserIdType;\r\n(function (AWTUserIdType) {\r\n    /**\r\n     * The user ID type is unknown.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Unknown\"] = 0] = \"Unknown\";\r\n    /**\r\n     * Microsoft Account ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MSACID\"] = 1] = \"MSACID\";\r\n    /**\r\n     * Microsoft .NET Passport Unique ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MSAPUID\"] = 2] = \"MSAPUID\";\r\n    /**\r\n     * Anonymous user ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"ANID\"] = 3] = \"ANID\";\r\n    /**\r\n     * Organization customer ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"OrgIdCID\"] = 4] = \"OrgIdCID\";\r\n    /**\r\n     * Microsoft Exchange Passport ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"OrgIdPUID\"] = 5] = \"OrgIdPUID\";\r\n    /**\r\n     * User object ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"UserObjectId\"] = 6] = \"UserObjectId\";\r\n    /**\r\n     * Skype ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Skype\"] = 7] = \"Skype\";\r\n    /**\r\n     * Yammer ID.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"Yammer\"] = 8] = \"Yammer\";\r\n    /**\r\n     * E-mail address.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"EmailAddress\"] = 9] = \"EmailAddress\";\r\n    /**\r\n     * Telephone number.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"PhoneNumber\"] = 10] = \"PhoneNumber\";\r\n    /**\r\n     * SIP address.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"SipAddress\"] = 11] = \"SipAddress\";\r\n    /**\r\n     * Multiple unit identity.\r\n     */\r\n    AWTUserIdType[AWTUserIdType[\"MUID\"] = 12] = \"MUID\";\r\n})(AWTUserIdType = exports.AWTUserIdType || (exports.AWTUserIdType = {}));\r\n/**\r\n * The AWTSessionState enumeration contains a set of values that indicate the session state.\r\n * @enum {number}\r\n */\r\nvar AWTSessionState;\r\n(function (AWTSessionState) {\r\n    /**\r\n     * Session started.\r\n     */\r\n    AWTSessionState[AWTSessionState[\"Started\"] = 0] = \"Started\";\r\n    /**\r\n     * Session ended.\r\n     */\r\n    AWTSessionState[AWTSessionState[\"Ended\"] = 1] = \"Ended\";\r\n})(AWTSessionState = exports.AWTSessionState || (exports.AWTSessionState = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTEventProperties.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Utils = require(\"../common/Utils\");\r\nvar Enums_1 = require(\"../common/Enums\");\r\n/**\r\n* The AWTEventProperties class is used for creating an event.\r\n*/\r\nvar AWTEventProperties = /** @class */ (function () {\r\n    /**\r\n     * The AWTEventProperties class constructor.\r\n     * @constructor\r\n     * @param {string} - [Optional] The name of the event.\r\n     */\r\n    function AWTEventProperties(name) {\r\n        this._event = { name: '', properties: {} };\r\n        if (name) {\r\n            this.setName(name);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the name of the event.\r\n     * @param {string} name - The name of the event.\r\n     */\r\n    AWTEventProperties.prototype.setName = function (name) {\r\n        this._event.name = name;\r\n    };\r\n    /**\r\n     * Gets the name of the event.\r\n     * @return {string|undefined} - The name of the event, or undefined if the name has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getName = function () {\r\n        return this._event.name;\r\n    };\r\n    /**\r\n     * Sets the base type of the event.\r\n     * @param {string} type - The base type of the event.\r\n     */\r\n    AWTEventProperties.prototype.setType = function (type) {\r\n        this._event.type = type;\r\n    };\r\n    /**\r\n     * Gets the base type of the event.\r\n     * @return {string|undefined} The base type of the event, or undefined if the base type has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getType = function () {\r\n        return this._event.type;\r\n    };\r\n    /**\r\n     * Sets the timestamp for the event.\r\n     * @param {number} timestampInEpochMillis - The timestamp (in milliseconds) since UNIX Epoch.\r\n     */\r\n    AWTEventProperties.prototype.setTimestamp = function (timestampInEpochMillis) {\r\n        this._event.timestamp = timestampInEpochMillis;\r\n    };\r\n    /**\r\n     * Gets the timestamp for the event.\r\n     * @return {number|undefined} The timestamp for the event, or undefined if it has not been set.\r\n     */\r\n    AWTEventProperties.prototype.getTimestamp = function () {\r\n        return this._event.timestamp;\r\n    };\r\n    /**\r\n     * Sets the priority for sending the event. The default priority\r\n     * of the event is Normal.\r\n     * @param {enum} priority - An AWTEventPriority enumeration value that specifies the priority of the event.\r\n     */\r\n    AWTEventProperties.prototype.setEventPriority = function (priority) {\r\n        this._event.priority = priority;\r\n    };\r\n    /**\r\n     * Gets the priority for the event.\r\n     * @return {AWTEventPriority} - An AWTEventPriority enumeration value that specifies the priority of the event.\r\n     */\r\n    AWTEventProperties.prototype.getEventPriority = function () {\r\n        return this._event.priority;\r\n    };\r\n    /**\r\n     * Sets a property with a name and value. Optionally sets the property type.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setProperty = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: Enums_1.AWTPiiKind.NotSet, cc: Enums_1.AWTCustomerContentKind.NotSet };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Sets a property with a name, a value, and a PII. Optionally sets the property type.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} pii                    - The kind of PII for the property.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setPropertyWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: pii, cc: Enums_1.AWTCustomerContentKind.NotSet };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Sets a property with name, value and customer content. Optionally set the property type of the value.\r\n     * @param {string} name                 - The name of the property.\r\n     * @param {string|number|boolean} value - The property's value.\r\n     * @param {enum} customerContent        - The customer content kind for the property.\r\n     * @param {enum} type                   - [Optional] One of the AWTPropertyType enumeration values that specifies\r\n     * the type for the property.\r\n     */\r\n    AWTEventProperties.prototype.setPropertyWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        var property = { value: value, type: type, pii: Enums_1.AWTPiiKind.NotSet, cc: customerContent };\r\n        property = Utils.sanitizeProperty(name, property);\r\n        if (property === null) {\r\n            delete this._event.properties[name];\r\n            return;\r\n        }\r\n        this._event.properties[name] = property;\r\n    };\r\n    /**\r\n     * Gets the properties currently added to the event.\r\n     * @return {object} A Map<string, AWTEventProperty> containing the current properties.\r\n     */\r\n    AWTEventProperties.prototype.getPropertyMap = function () {\r\n        return this._event.properties;\r\n    };\r\n    /**\r\n     * Gets the event from this event properties object.\r\n     * @return {object} The event properties compiled into AWTEventData.\r\n     */\r\n    AWTEventProperties.prototype.getEvent = function () {\r\n        return this._event;\r\n    };\r\n    return AWTEventProperties;\r\n}());\r\nexports.default = AWTEventProperties;\r\n","\"use strict\";\r\n/**\r\n* microsoft.bond.primitives.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Int64 = /** @class */ (function () {\r\n    function Int64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n        if (this.low < 0) {\r\n            this.high = -1;\r\n        }\r\n    }\r\n    Int64.prototype._Equals = function (numberStr) {\r\n        var tmp = new Int64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return Int64;\r\n}());\r\nexports.Int64 = Int64;\r\nvar UInt64 = /** @class */ (function () {\r\n    function UInt64(numberStr) {\r\n        this.low = 0;\r\n        this.high = 0;\r\n        this.low = parseInt(numberStr, 10);\r\n    }\r\n    UInt64.prototype._Equals = function (numberStr) {\r\n        var tmp = new UInt64(numberStr);\r\n        return this.low === tmp.low && this.high === tmp.high;\r\n    };\r\n    return UInt64;\r\n}());\r\nexports.UInt64 = UInt64;\r\nvar Number = /** @class */ (function () {\r\n    function Number() {\r\n    }\r\n    Number._ToByte = function (value) {\r\n        return this._ToUInt8(value);\r\n    };\r\n    Number._ToUInt8 = function (value) {\r\n        return value & 0xff;\r\n    };\r\n    Number._ToInt32 = function (value) {\r\n        var signMask = (value & 0x80000000);\r\n        return (value & 0x7fffffff) | signMask;\r\n    };\r\n    Number._ToUInt32 = function (value) {\r\n        return value & 0xffffffff;\r\n    };\r\n    return Number;\r\n}());\r\nexports.Number = Number;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTAutoCollection_1 = require(\"./AWTAutoCollection\");\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar Enums_2 = require(\"./Enums\");\r\nvar UI_IDTYPE = 'UserInfo.IdType';\r\n/**\r\n *  Class to allow users to set semantic context properties.\r\n */\r\nvar AWTSemanticContext = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {boolean} _allowDeviceFields - Allow setting of device semantic context.\r\n     * @param {object} _properties         - The event properties where to add the semantic context.\r\n     */\r\n    function AWTSemanticContext(_allowDeviceFields, _properties) {\r\n        this._allowDeviceFields = _allowDeviceFields;\r\n        this._properties = _properties;\r\n    }\r\n    /**\r\n     * Sets the field AppInfo.Id with the given value.\r\n     * @param {string} appId  - The Id uniquely identifies the App from this this event originated.\r\n     * In the multi-tenant Aria Platform, this is the Application Id of the\r\n     * registered Application. Example, \"735d47645f7c4de69964e2c01888d6b6\".\r\n     */\r\n    AWTSemanticContext.prototype.setAppId = function (appId) {\r\n        this._addContext('AppInfo.Id', appId);\r\n    };\r\n    /**\r\n     * Sets the field AppInfo.Version with the given value.\r\n     * @param {string} appVersion  - The version of the App, retrieved programmatically where possible. This\r\n     * is app/platform dependent. Examples such as \"7.0.0.100\" for Skype,\r\n     * or \"12.0.30723.00 Update 3\" for Microsoft Visual Studio Ultimate 2013\r\n     */\r\n    AWTSemanticContext.prototype.setAppVersion = function (appVersion) {\r\n        this._addContext('AppInfo.Version', appVersion);\r\n    };\r\n    /**\r\n     * Sets the field AppInfo.Language with the given value.\r\n     * @param {string} appLanguage  - Language of the App in IETF language tag format, as described in RFC 4646.\r\n     * Examples of acceptable values include \"en\", \"pt-BR\" and \"zh-Hant-CN\".\r\n     */\r\n    AWTSemanticContext.prototype.setAppLanguage = function (appLanguage) {\r\n        this._addContext('AppInfo.Language', appLanguage);\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceId  - The device Id uniquely identifies the physical device, using platform\r\n     * available API's. This allows correlation against Aria Hardware Inventory.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceId = function (deviceId) {\r\n        if (this._allowDeviceFields) {\r\n            AWTAutoCollection_1.default.checkAndSaveDeviceId(deviceId);\r\n            this._addContext('DeviceInfo.Id', deviceId);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.OsName with the given value.\r\n     * @param {string} deviceOsName  - The name of the OS. The SDK should ensure this is a limited normalized\r\n     * set. Asimov is using very high level value e.g. Windows/Android/iOS.\r\n     * Examples such as \"iOS\" or \"Windows Phone\".\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceOsName = function (deviceOsName) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.OsName', deviceOsName);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.OsVersion with the given value.\r\n     * @param {string} deviceOsVersion  - The version of the OS, retrieved programmatically, which can be used\r\n     * for aggregation or filtering for scenarios like real time monitoring\r\n     * or metrics reporting. Flurry and GA provide aggregation at this level.\r\n     * Examples such as \"8.1.2\" for iOS, or \"8.1\" for Windows Phone.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceOsVersion = function (deviceOsVersion) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.OsVersion', deviceOsVersion);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceBrowserName  - he name of the OS. The SDK should ensure this is a limited normalized set.\r\n     * Examples such as \"Chrome\" or \"Edge\".\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceBrowserName = function (deviceBrowserName) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.BrowserName', deviceBrowserName);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field DeviceInfo.Id with the given value.\r\n     * @param {string} deviceBrowserVersion  - The version of the browser, retrieved programmatically, which can be used\r\n     * for aggregation or filtering for scenarios like real time monitoring or metrics reporting.\r\n     * Examples such as \"57.0.2987.133\" for Chrome, or \"15.15063\" for Edge.\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceBrowserVersion = function (deviceBrowserVersion) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.BrowserVersion', deviceBrowserVersion);\r\n        }\r\n    };\r\n    /**\r\n     * Set the device manufacturer context information of telemetry event.\r\n     * Can only be set at the LogManager level. Setting it via the object obtained from ILogger\r\n     * will be no-op.\r\n     * @param {string} deviceMake The manufacturer of the device, retrieved\r\n     *            programmatically where possible and is app/platform specific\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceMake = function (deviceMake) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.Make', deviceMake);\r\n        }\r\n    };\r\n    /**\r\n     * Set the device model context information of telemetry event.\r\n     * Can only be set at the LogManager level. Setting it via the object obtained from ILogger\r\n     * will be no-op.\r\n     * @param {string} deviceModel The model of the device, retrieved programmatically\r\n     *            where possible and is app/platform specific\r\n     */\r\n    AWTSemanticContext.prototype.setDeviceModel = function (deviceModel) {\r\n        if (this._allowDeviceFields) {\r\n            this._addContext('DeviceInfo.Model', deviceModel);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.Id with the given value.\r\n     * @param {string} userId     - The id uniquely identifies the user in an application-specific\r\n     * user namespace, such as a Skype ID in the Skype App. This may be empty for Apps\r\n     * which do not require user sign-in.\r\n     * @param {enum} pii        - Optional pii type for the user id.\r\n     * @param {enum} userIdType - Optional id type for the user id.\r\n     */\r\n    AWTSemanticContext.prototype.setUserId = function (userId, pii, userIdType) {\r\n        if (!isNaN(userIdType) && userIdType !== null && userIdType >= 0 && userIdType <= 12) {\r\n            this._addContext(UI_IDTYPE, userIdType.toString());\r\n        }\r\n        else {\r\n            var inferredUserIdType = void 0;\r\n            switch (pii) {\r\n                case Enums_1.AWTPiiKind.SipAddress:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.SipAddress;\r\n                    break;\r\n                case Enums_1.AWTPiiKind.PhoneNumber:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.PhoneNumber;\r\n                    break;\r\n                case Enums_1.AWTPiiKind.SmtpAddress:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.EmailAddress;\r\n                    break;\r\n                default:\r\n                    inferredUserIdType = Enums_2.AWTUserIdType.Unknown;\r\n                    break;\r\n            }\r\n            this._addContext(UI_IDTYPE, inferredUserIdType.toString());\r\n        }\r\n        if (isNaN(pii) || pii === null || pii === Enums_1.AWTPiiKind.NotSet || pii > 13) {\r\n            switch (userIdType) {\r\n                case Enums_2.AWTUserIdType.Skype:\r\n                    pii = Enums_1.AWTPiiKind.Identity;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.EmailAddress:\r\n                    pii = Enums_1.AWTPiiKind.SmtpAddress;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.PhoneNumber:\r\n                    pii = Enums_1.AWTPiiKind.PhoneNumber;\r\n                    break;\r\n                case Enums_2.AWTUserIdType.SipAddress:\r\n                    pii = Enums_1.AWTPiiKind.SipAddress;\r\n                    break;\r\n                default:\r\n                    pii = Enums_1.AWTPiiKind.NotSet;\r\n                    break;\r\n            }\r\n        }\r\n        this._addContextWithPii('UserInfo.Id', userId, pii);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.AdvertisingId with the given value.\r\n     * @param {string} userAdvertisingId  - The AdvertisingId is the user-specific device id obtainable through\r\n     * platform API's. This may not be available if users choose to opt-out\r\n     * of this id, or if the underlying platform does not support it.\r\n     */\r\n    AWTSemanticContext.prototype.setUserAdvertisingId = function (userAdvertisingId) {\r\n        this._addContext('UserInfo.AdvertisingId', userAdvertisingId);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.TimeZone with the given value.\r\n     * @param {string} userTimeZone  - The user's time zone relative to UTC, in ISO 8601 time zone format.\r\n     * Examples of acceptable values include \"+00\", \"+07:00\", and \"-1130\".\r\n     */\r\n    AWTSemanticContext.prototype.setUserTimeZone = function (userTimeZone) {\r\n        this._addContext('UserInfo.TimeZone', userTimeZone);\r\n    };\r\n    /**\r\n     * Sets the field UserInfo.Language with the given value.\r\n     * @param {string} userLanguage  - The user's language in IETF language tag format, as described in RFC 4646.\r\n     * Examples of acceptable values include \"en\", \"pt-BR\" and \"zh-Hant-CN\".\r\n     */\r\n    AWTSemanticContext.prototype.setUserLanguage = function (userLanguage) {\r\n        this._addContext('UserInfo.Language', userLanguage);\r\n    };\r\n    AWTSemanticContext.prototype._addContext = function (key, value) {\r\n        if (typeof value === 'string') {\r\n            this._properties.setProperty(key, value);\r\n        }\r\n    };\r\n    AWTSemanticContext.prototype._addContextWithPii = function (key, value, pii) {\r\n        if (typeof value === 'string') {\r\n            this._properties.setPropertyWithPii(key, value, pii);\r\n        }\r\n    };\r\n    return AWTSemanticContext;\r\n}());\r\nexports.default = AWTSemanticContext;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTAutoCollection.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2018\r\n*/\r\nvar Utils = require(\"../common/Utils\");\r\nvar DEVICE_ID_COOKIE = 'MicrosoftApplicationsTelemetryDeviceId';\r\nvar FIRSTLAUNCHTIME_COOKIE = 'MicrosoftApplicationsTelemetryFirstLaunchTime';\r\nvar BROWSERS = {\r\n    MSIE: 'MSIE',\r\n    CHROME: 'Chrome',\r\n    FIREFOX: 'Firefox',\r\n    SAFARI: 'Safari',\r\n    EDGE: 'Edge',\r\n    ELECTRON: 'Electron',\r\n    SKYPE_SHELL: 'SkypeShell',\r\n    PHANTOMJS: 'PhantomJS',\r\n    OPERA: 'Opera'\r\n};\r\nvar OPERATING_SYSTEMS = {\r\n    WINDOWS: 'Windows',\r\n    MACOSX: 'Mac OS X',\r\n    WINDOWS_PHONE: 'Windows Phone',\r\n    WINDOWS_RT: 'Windows RT',\r\n    IOS: 'iOS',\r\n    ANDROID: 'Android',\r\n    LINUX: 'Linux',\r\n    CROS: 'Chrome OS',\r\n    UNKNOWN: 'Unknown'\r\n};\r\nvar OSNAMEREGEX = {\r\n    WIN: /(windows|win32)/i,\r\n    WINRT: / arm;/i,\r\n    WINPHONE: /windows\\sphone\\s\\d+\\.\\d+/i,\r\n    OSX: /(macintosh|mac os x)/i,\r\n    IOS: /(iPad|iPhone|iPod)(?=.*like Mac OS X)/i,\r\n    LINUX: /(linux|joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk)/i,\r\n    ANDROID: /android/i,\r\n    CROS: /CrOS/i\r\n};\r\nvar VERSION_MAPPINGS = {\r\n    '5.1': 'XP',\r\n    '6.0': 'Vista',\r\n    '6.1': '7',\r\n    '6.2': '8',\r\n    '6.3': '8.1',\r\n    '10.0': '10'\r\n};\r\nvar REGEX_VERSION = '([\\\\d,.]+)';\r\nvar REGEX_VERSION_MAC = '([\\\\d,_,.]+)';\r\nvar UNKNOWN = 'Unknown';\r\nvar UNDEFINED = 'undefined';\r\n/**\r\n * Class that stores semantic properties.\r\n */\r\nvar AWTAutoCollection = /** @class */ (function () {\r\n    function AWTAutoCollection() {\r\n    }\r\n    /**\r\n     * Add a property storage override to override the usage of document.cookie to store\r\n     * properties. The property storage object should implement both getProperty and setProperty, otherwise\r\n     * it will be rejected.\r\n     * @param {object} propertyStorage - Property storage object which is used for storing SDK properties.\r\n     * @return {boolean} True if the property storage override was accepted, false otherwise.\r\n     */\r\n    AWTAutoCollection.addPropertyStorageOverride = function (propertyStorage) {\r\n        if (propertyStorage) {\r\n            this._propertyStorage = propertyStorage;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Auto collect semantic context properties.\r\n     * @param {object} semantContext   - The semantic context to use to set auto collected information.\r\n     * @param {boolean} disableCookies - Determines if setting cookies is disabled.\r\n     * @param {object} userAgent       - UserAgent string to be used for auto collection of semantic properties.\r\n     */\r\n    AWTAutoCollection.autoCollect = function (semanticContext, disableCookies, userAgent) {\r\n        this._semanticContext = semanticContext;\r\n        this._disableCookies = disableCookies;\r\n        this._autoCollect();\r\n        if (!userAgent && typeof navigator !== UNDEFINED) {\r\n            userAgent = navigator.userAgent || '';\r\n        }\r\n        this._autoCollectFromUserAgent(userAgent);\r\n        if (this._disableCookies && !this._propertyStorage) {\r\n            this._deleteCookie(DEVICE_ID_COOKIE);\r\n            this._deleteCookie(FIRSTLAUNCHTIME_COOKIE);\r\n            return;\r\n        }\r\n        //Only collect device id if it can be stored\r\n        if (this._propertyStorage || (this._areCookiesAvailable && !this._disableCookies)) {\r\n            this._autoCollectDeviceId();\r\n        }\r\n    };\r\n    /**\r\n     * Checks if the device id stored is the same as the new device id. If they are not,\r\n     * store the new id and store a new first launch time.\r\n     * @param {string} deviceId - The new device id.\r\n     */\r\n    AWTAutoCollection.checkAndSaveDeviceId = function (deviceId) {\r\n        if (deviceId) {\r\n            var oldDeviceId = this._getData(DEVICE_ID_COOKIE);\r\n            if (oldDeviceId !== deviceId) {\r\n                this._saveData(DEVICE_ID_COOKIE, deviceId);\r\n                this._saveData(FIRSTLAUNCHTIME_COOKIE, Utils.getISOString(new Date()));\r\n            }\r\n            this._setFirstLaunchTime(this._getData(FIRSTLAUNCHTIME_COOKIE));\r\n        }\r\n    };\r\n    /**\r\n     * Auto collect the device SDK Id.\r\n     */\r\n    AWTAutoCollection._autoCollectDeviceId = function () {\r\n        var deviceId = this._getData(DEVICE_ID_COOKIE);\r\n        if (!deviceId) {\r\n            deviceId = Utils.newGuid();\r\n            this.checkAndSaveDeviceId(deviceId);\r\n        }\r\n        else {\r\n            this._setFirstLaunchTime(this._getData(FIRSTLAUNCHTIME_COOKIE));\r\n        }\r\n        this._semanticContext.setDeviceId(deviceId);\r\n    };\r\n    AWTAutoCollection._autoCollect = function () {\r\n        //Get app language\r\n        if (typeof document !== UNDEFINED && document.documentElement) {\r\n            this._semanticContext.setAppLanguage(document.documentElement.lang);\r\n        }\r\n        //Get user language\r\n        if (typeof navigator !== UNDEFINED) {\r\n            this._semanticContext.setUserLanguage(navigator.userLanguage || navigator.language);\r\n        }\r\n        //Get time zone\r\n        var timeZone = new Date().getTimezoneOffset();\r\n        var minutes = timeZone % 60;\r\n        var hours = (timeZone - minutes) / 60;\r\n        var timeZonePrefix = '+';\r\n        if (hours > 0) {\r\n            timeZonePrefix = '-';\r\n        }\r\n        hours = Math.abs(hours);\r\n        minutes = Math.abs(minutes);\r\n        this._semanticContext.setUserTimeZone(timeZonePrefix + (hours < 10 ? '0' + hours : hours.toString()) + ':'\r\n            + (minutes < 10 ? '0' + minutes : minutes.toString()));\r\n    };\r\n    AWTAutoCollection._autoCollectFromUserAgent = function (userAgent) {\r\n        if (userAgent) {\r\n            var browserName = this._getBrowserName(userAgent);\r\n            this._semanticContext.setDeviceBrowserName(browserName);\r\n            this._semanticContext.setDeviceBrowserVersion(this._getBrowserVersion(userAgent, browserName));\r\n            var osName = this._getOsName(userAgent);\r\n            this._semanticContext.setDeviceOsName(osName);\r\n            this._semanticContext.setDeviceOsVersion(this._getOsVersion(userAgent, osName));\r\n        }\r\n    };\r\n    AWTAutoCollection._getBrowserName = function (userAgent) {\r\n        //Check for Opera first        \r\n        if (this._userAgentContainsString('OPR/', userAgent)) {\r\n            return BROWSERS.OPERA;\r\n        }\r\n        //Check for Phantom JS\r\n        if (this._userAgentContainsString(BROWSERS.PHANTOMJS, userAgent)) {\r\n            return BROWSERS.PHANTOMJS;\r\n        }\r\n        //Check for Edge\r\n        if (this._userAgentContainsString(BROWSERS.EDGE, userAgent)) {\r\n            return BROWSERS.EDGE;\r\n        }\r\n        //Check for Electron\r\n        if (this._userAgentContainsString(BROWSERS.ELECTRON, userAgent)) {\r\n            return BROWSERS.ELECTRON;\r\n        }\r\n        //Check for Chrome\r\n        if (this._userAgentContainsString(BROWSERS.CHROME, userAgent)) {\r\n            return BROWSERS.CHROME;\r\n        }\r\n        //Check for Internet Explorer\r\n        if (this._userAgentContainsString('Trident', userAgent)) {\r\n            return BROWSERS.MSIE;\r\n        }\r\n        //Check for Firefox\r\n        if (this._userAgentContainsString(BROWSERS.FIREFOX, userAgent)) {\r\n            return BROWSERS.FIREFOX;\r\n        }\r\n        //Check for Safari\r\n        if (this._userAgentContainsString(BROWSERS.SAFARI, userAgent)) {\r\n            return BROWSERS.SAFARI;\r\n        }\r\n        //Check for Skype shell\r\n        if (this._userAgentContainsString(BROWSERS.SKYPE_SHELL, userAgent)) {\r\n            return BROWSERS.SKYPE_SHELL;\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._setFirstLaunchTime = function (flt) {\r\n        if (!isNaN(flt)) {\r\n            var fltDate = new Date();\r\n            fltDate.setTime(parseInt(flt, 10));\r\n            flt = Utils.getISOString(fltDate);\r\n        }\r\n        this.firstLaunchTime = flt;\r\n    };\r\n    AWTAutoCollection._userAgentContainsString = function (searchString, userAgent) {\r\n        return userAgent.indexOf(searchString) > -1;\r\n    };\r\n    AWTAutoCollection._getBrowserVersion = function (userAgent, browserName) {\r\n        if (browserName === BROWSERS.MSIE) {\r\n            return this._getIeVersion(userAgent);\r\n        }\r\n        else {\r\n            return this._getOtherVersion(browserName, userAgent);\r\n        }\r\n    };\r\n    AWTAutoCollection._getIeVersion = function (userAgent) {\r\n        var classicIeVersionMatches = userAgent.match(new RegExp(BROWSERS.MSIE + ' ' + REGEX_VERSION));\r\n        if (classicIeVersionMatches) {\r\n            return classicIeVersionMatches[1];\r\n        }\r\n        else {\r\n            var ieVersionMatches = userAgent.match(new RegExp('rv:' + REGEX_VERSION));\r\n            if (ieVersionMatches) {\r\n                return ieVersionMatches[1];\r\n            }\r\n        }\r\n    };\r\n    AWTAutoCollection._getOtherVersion = function (browserString, userAgent) {\r\n        if (browserString === BROWSERS.SAFARI) {\r\n            browserString = 'Version';\r\n        }\r\n        var matches = userAgent.match(new RegExp(browserString + '/' + REGEX_VERSION));\r\n        if (matches) {\r\n            return matches[1];\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getOsName = function (userAgent) {\r\n        if (userAgent.match(OSNAMEREGEX.WINPHONE)) {\r\n            return OPERATING_SYSTEMS.WINDOWS_PHONE;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.WINRT)) {\r\n            return OPERATING_SYSTEMS.WINDOWS_RT;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.IOS)) {\r\n            return OPERATING_SYSTEMS.IOS;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.ANDROID)) {\r\n            return OPERATING_SYSTEMS.ANDROID;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.LINUX)) {\r\n            return OPERATING_SYSTEMS.LINUX;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.OSX)) {\r\n            return OPERATING_SYSTEMS.MACOSX;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.WIN)) {\r\n            return OPERATING_SYSTEMS.WINDOWS;\r\n        }\r\n        if (userAgent.match(OSNAMEREGEX.CROS)) {\r\n            return OPERATING_SYSTEMS.CROS;\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getOsVersion = function (userAgent, osName) {\r\n        if (osName === OPERATING_SYSTEMS.WINDOWS) {\r\n            return this._getGenericOsVersion(userAgent, 'Windows NT');\r\n        }\r\n        if (osName === OPERATING_SYSTEMS.ANDROID) {\r\n            return this._getGenericOsVersion(userAgent, osName);\r\n        }\r\n        if (osName === OPERATING_SYSTEMS.MACOSX) {\r\n            return this._getMacOsxVersion(userAgent);\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getGenericOsVersion = function (userAgent, osName) {\r\n        var ntVersionMatches = userAgent.match(new RegExp(osName + ' ' + REGEX_VERSION));\r\n        if (ntVersionMatches) {\r\n            if (VERSION_MAPPINGS[ntVersionMatches[1]]) {\r\n                return VERSION_MAPPINGS[ntVersionMatches[1]];\r\n            }\r\n            return ntVersionMatches[1];\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getMacOsxVersion = function (userAgent) {\r\n        var macOsxVersionInUserAgentMatches = userAgent.match(new RegExp(OPERATING_SYSTEMS.MACOSX + ' ' + REGEX_VERSION_MAC));\r\n        if (macOsxVersionInUserAgentMatches) {\r\n            var versionString = macOsxVersionInUserAgentMatches[1].replace(/_/g, '.');\r\n            if (versionString) {\r\n                var delimiter = this._getDelimiter(versionString);\r\n                if (delimiter) {\r\n                    var components = versionString.split(delimiter);\r\n                    return components[0];\r\n                }\r\n                else {\r\n                    return versionString;\r\n                }\r\n            }\r\n        }\r\n        return UNKNOWN;\r\n    };\r\n    AWTAutoCollection._getDelimiter = function (versionString) {\r\n        if (versionString.indexOf('.') > -1) {\r\n            return '.';\r\n        }\r\n        if (versionString.indexOf('_') > -1) {\r\n            return '_';\r\n        }\r\n        return null;\r\n    };\r\n    AWTAutoCollection._saveData = function (name, value) {\r\n        if (this._propertyStorage) {\r\n            this._propertyStorage.setProperty(name, value);\r\n        }\r\n        else if (this._areCookiesAvailable) {\r\n            //Expires in 365 days\r\n            var date = new Date();\r\n            date.setTime(date.getTime() + 31536000000 /*365 days in milliseconds*/);\r\n            var expires = 'expires=' + date.toUTCString();\r\n            document.cookie = name + '=' + value + '; ' + expires;\r\n        }\r\n    };\r\n    AWTAutoCollection._getData = function (name) {\r\n        if (this._propertyStorage) {\r\n            return this._propertyStorage.getProperty(name) || '';\r\n        }\r\n        else if (this._areCookiesAvailable) {\r\n            name = name + '=';\r\n            var ca = document.cookie.split(';');\r\n            for (var i = 0; i < ca.length; i++) {\r\n                var c = ca[i];\r\n                var j = 0;\r\n                while (c.charAt(j) === ' ') {\r\n                    j++;\r\n                }\r\n                c = c.substring(j);\r\n                if (c.indexOf(name) === 0) {\r\n                    return c.substring(name.length, c.length);\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n    AWTAutoCollection._deleteCookie = function (name) {\r\n        if (this._areCookiesAvailable) {\r\n            document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n        }\r\n    };\r\n    AWTAutoCollection._disableCookies = false;\r\n    AWTAutoCollection._areCookiesAvailable = typeof document !== UNDEFINED && typeof document.cookie !== UNDEFINED;\r\n    return AWTAutoCollection;\r\n}());\r\nexports.default = AWTAutoCollection;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AWT_REAL_TIME = 'REAL_TIME';\r\nexports.AWT_NEAR_REAL_TIME = 'NEAR_REAL_TIME';\r\nexports.AWT_BEST_EFFORT = 'BEST_EFFORT';\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTLogger.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar Enums_2 = require(\"./Enums\");\r\nvar AWTEventProperties_1 = require(\"./AWTEventProperties\");\r\nvar Utils = require(\"../common/Utils\");\r\nvar AWTStatsManager_1 = require(\"../common/AWTStatsManager\");\r\nvar AWTNotificationManager_1 = require(\"../common/AWTNotificationManager\");\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\nvar AWTLogManagerSettings_1 = require(\"./AWTLogManagerSettings\");\r\nvar Version = require(\"./Version\");\r\nvar AWTSemanticContext_1 = require(\"./AWTSemanticContext\");\r\nvar AWTAutoCollection_1 = require(\"./AWTAutoCollection\");\r\n/**\r\n* The AWTLogger class defines a logger.\r\n*/\r\nvar AWTLogger = /** @class */ (function () {\r\n    /**\r\n     * The AWTLogger class constructor.\r\n     * @constructor\r\n     * @param {string} _apiKey - The API key (also known as application key, and tenant token).\r\n     */\r\n    function AWTLogger(_apiKey) {\r\n        this._apiKey = _apiKey;\r\n        this._contextProperties = new AWTEventProperties_1.default();\r\n        this._semanticContext = new AWTSemanticContext_1.default(false, this._contextProperties);\r\n        this._sessionStartTime = 0;\r\n        this._createInitId();\r\n    }\r\n    /**\r\n     * Sets the context sent with every event from this logger.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContext = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setProperty(name, value, type);\r\n    };\r\n    /**\r\n     * Sets context that will be sent with every event from this logger, and tags it as PII.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} pii                    - The kind of PII for the context property, as one of the AWTPiiKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContextWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setPropertyWithPii(name, value, pii, type);\r\n    };\r\n    /**\r\n     * Sets the context that sent with every event from this logger, and tags it as customer content.\r\n     * @param {string} name                 - The name of the context property.\r\n     * @param {string|number|boolean} value - The context property's value.\r\n     * @param {enum} customerContent        - The customer content kind, as one of the AWTCustomerContentKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type of context property, as one of the AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogger.prototype.setContextWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        this._contextProperties.setPropertyWithCustomerContent(name, value, customerContent, type);\r\n    };\r\n    /**\r\n     * Gets the logger semantic context.\r\n     * <b>Note:</b> Device properties are not permitted at the logger level, but you can set them\r\n     * at the global level using the AWTLogManager class.\r\n     *\r\n     * @return A AWTSemanticContext object that you can use to set common semantic properties.\r\n     */\r\n    AWTLogger.prototype.getSemanticContext = function () {\r\n        return this._semanticContext;\r\n    };\r\n    /**\r\n     * Logs a custom event with the specified name and fields - to track information\r\n     * such as how a particular feature is used.\r\n     * @param {Object} event - Can be either an AWTEventProperties object or an AWTEventData object or an event name.\r\n     */\r\n    AWTLogger.prototype.logEvent = function (event) {\r\n        if (AWTLogManagerSettings_1.default.loggingEnabled) {\r\n            if (!this._apiKey) {\r\n                this._apiKey = AWTLogManagerSettings_1.default.defaultTenantToken;\r\n                this._createInitId();\r\n            }\r\n            var sanitizeProperties = true;\r\n            if (Utils.isString(event)) {\r\n                event = {\r\n                    name: event\r\n                };\r\n            }\r\n            else if (event instanceof AWTEventProperties_1.default) {\r\n                event = event.getEvent();\r\n                //AWTEventProperties will already sanitize properties\r\n                sanitizeProperties = false;\r\n            }\r\n            AWTStatsManager_1.default.eventReceived(this._apiKey);\r\n            AWTLogger._logEvent(AWTLogger._getInternalEvent(event, this._apiKey, sanitizeProperties), this._contextProperties);\r\n        }\r\n    };\r\n    /**\r\n     * Logs the session state.\r\n     * <b>Note:</b> Calling Logging session <i>start</i> while a session already exists will produce a no-op. Similarly, calling logging\r\n     * session <i>end</i> while a session does not exist will also produce a no-op.\r\n     * @param {enum} state         - The session's state.\r\n     * @param {obbject} properties - [Optional] Properties of the session event as either a AWTEventProperties object,\r\n     * or a AWTEventData object.\r\n     */\r\n    AWTLogger.prototype.logSession = function (state, properties) {\r\n        if (AWTLogManagerSettings_1.default.sessionEnabled) {\r\n            var sessionEvent = {\r\n                name: 'session',\r\n                type: 'session',\r\n                properties: {}\r\n            };\r\n            AWTLogger._addPropertiesToEvent(sessionEvent, properties);\r\n            sessionEvent.priority = Enums_1.AWTEventPriority.High;\r\n            if (state === Enums_2.AWTSessionState.Started) {\r\n                if (this._sessionStartTime > 0) {\r\n                    //Session start called out of order. Session start time being non zero indicates an ongoing session.\r\n                    return;\r\n                }\r\n                this._sessionStartTime = (new Date()).getTime();\r\n                this._sessionId = Utils.newGuid();\r\n                this.setContext('Session.Id', this._sessionId);\r\n                sessionEvent.properties['Session.State'] = 'Started';\r\n            }\r\n            else if (state === Enums_2.AWTSessionState.Ended) {\r\n                if (this._sessionStartTime === 0) {\r\n                    //Session end called out of order. Session start time being zero indicates no ongoing session.\r\n                    return;\r\n                }\r\n                var sessionDurationSec = Math.floor(((new Date()).getTime() - this._sessionStartTime) / 1000);\r\n                sessionEvent.properties['Session.Id'] = this._sessionId;\r\n                sessionEvent.properties['Session.State'] = 'Ended';\r\n                sessionEvent.properties['Session.Duration'] = sessionDurationSec.toString();\r\n                sessionEvent.properties['Session.DurationBucket'] =\r\n                    AWTLogger._getSessionDurationFromTime(sessionDurationSec);\r\n                this._sessionStartTime = 0;\r\n                this.setContext('Session.Id', null);\r\n                this._sessionId = undefined;\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n            sessionEvent.properties['Session.FirstLaunchTime'] = AWTAutoCollection_1.default.firstLaunchTime;\r\n            this.logEvent(sessionEvent);\r\n        }\r\n    };\r\n    /**\r\n     * Gets the session ID for the ongoing session.\r\n     * @return {string} A string that contains the session ID for the ongoing session. Returns undefined if there is\r\n     * no ongoing session.\r\n     */\r\n    AWTLogger.prototype.getSessionId = function () {\r\n        return this._sessionId;\r\n    };\r\n    /**\r\n     * Logs a failure event, such as an application exception.\r\n     * @param {string} signature  - A string that identifies the bucket of the failure.\r\n     * @param {string} detail     - A string that contains the a description of the failure.\r\n     * @param {string} category   - [Optional] A string that identifies the category of the failure, such as an application error,\r\n     * a hang, or a crash.\r\n     * @param {string} id         - [Optional] A string that that uniquely identifies this failure.\r\n     * @param {object} properties - [Optional] Properties of the failure event, as either an AWTEventProperties object or an\r\n     * AWTEventData object. This value can also be null.\r\n     */\r\n    AWTLogger.prototype.logFailure = function (signature, detail, category, id, properties) {\r\n        if (!signature || !detail) {\r\n            return;\r\n        }\r\n        var failureEvent = {\r\n            name: 'failure',\r\n            type: 'failure',\r\n            properties: {}\r\n        };\r\n        AWTLogger._addPropertiesToEvent(failureEvent, properties);\r\n        failureEvent.properties['Failure.Signature'] = signature;\r\n        failureEvent.properties['Failure.Detail'] = detail;\r\n        if (category) {\r\n            failureEvent.properties['Failure.Category'] = category;\r\n        }\r\n        if (id) {\r\n            failureEvent.properties['Failure.Id'] = id;\r\n        }\r\n        failureEvent.priority = Enums_1.AWTEventPriority.High;\r\n        this.logEvent(failureEvent);\r\n    };\r\n    /**\r\n     * Logs a page view event which is normally a result of a user action on a UI page - such as search query,\r\n     * a content request, or a page navigation.\r\n     *\r\n     * @param {string} id          - A string that uniquely identifies this page.\r\n     * @param {string} pageName    - The name of the page.\r\n     * @param {string} category    - [Optional] A string that contains the category to which this page belongs.\r\n     * @param {string} uri         - [Optional] A string that contains the URI of this page.\r\n     * @param {string} referrerUri - [Optional] A string that contains the URI that refers to this page.\r\n     * @param {object} properties  - [Optional] Properties of the page view event, as an AWTEventProperties object.\r\n     * This value can also be null.\r\n     */\r\n    AWTLogger.prototype.logPageView = function (id, pageName, category, uri, referrerUri, properties) {\r\n        if (!id || !pageName) {\r\n            return;\r\n        }\r\n        var pageViewEvent = {\r\n            name: 'pageview',\r\n            type: 'pageview',\r\n            properties: {}\r\n        };\r\n        AWTLogger._addPropertiesToEvent(pageViewEvent, properties);\r\n        pageViewEvent.properties['PageView.Id'] = id;\r\n        pageViewEvent.properties['PageView.Name'] = pageName;\r\n        if (category) {\r\n            pageViewEvent.properties['PageView.Category'] = category;\r\n        }\r\n        if (uri) {\r\n            pageViewEvent.properties['PageView.Uri'] = uri;\r\n        }\r\n        if (referrerUri) {\r\n            pageViewEvent.properties['PageView.ReferrerUri'] = referrerUri;\r\n        }\r\n        this.logEvent(pageViewEvent);\r\n    };\r\n    AWTLogger.prototype._createInitId = function () {\r\n        // If no init ID for this tenant token exists, create one\r\n        if (!AWTLogger._initIdMap[this._apiKey] && this._apiKey) {\r\n            AWTLogger._initIdMap[this._apiKey] = Utils.newGuid();\r\n        }\r\n    };\r\n    AWTLogger._addPropertiesToEvent = function (event, propertiesEvent) {\r\n        if (propertiesEvent) {\r\n            if (propertiesEvent instanceof AWTEventProperties_1.default) {\r\n                propertiesEvent = propertiesEvent.getEvent();\r\n            }\r\n            if (propertiesEvent.name) {\r\n                event.name = propertiesEvent.name;\r\n            }\r\n            if (propertiesEvent.priority) {\r\n                event.priority = propertiesEvent.priority;\r\n            }\r\n            for (var name_1 in propertiesEvent.properties) {\r\n                if (propertiesEvent.properties.hasOwnProperty(name_1)) {\r\n                    event.properties[name_1] = propertiesEvent.properties[name_1];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AWTLogger._getSessionDurationFromTime = function (timeInSec) {\r\n        if (timeInSec < 0) {\r\n            return 'Undefined';\r\n        }\r\n        else if (timeInSec <= 3) {\r\n            return 'UpTo3Sec';\r\n        }\r\n        else if (timeInSec <= 10) {\r\n            return 'UpTo10Sec';\r\n        }\r\n        else if (timeInSec <= 30) {\r\n            return 'UpTo30Sec';\r\n        }\r\n        else if (timeInSec <= 60) {\r\n            return 'UpTo60Sec';\r\n        }\r\n        else if (timeInSec <= 180) {\r\n            return 'UpTo3Min';\r\n        }\r\n        else if (timeInSec <= 600) {\r\n            return 'UpTo10Min';\r\n        }\r\n        else if (timeInSec <= 1800) {\r\n            return 'UpTo30Min';\r\n        }\r\n        return 'Above30Min';\r\n    };\r\n    AWTLogger._logEvent = function (eventWithMetaData, contextProperties) {\r\n        if (!eventWithMetaData.name || !Utils.isString(eventWithMetaData.name)) {\r\n            AWTNotificationManager_1.default.eventsRejected([eventWithMetaData], Enums_1.AWTEventsRejectedReason.InvalidEvent);\r\n            return;\r\n        }\r\n        eventWithMetaData.name = eventWithMetaData.name.toLowerCase();\r\n        //Check if name is a string and replace . with _ if it is. Drop otherwise.\r\n        eventWithMetaData.name = eventWithMetaData.name.replace(Utils.EventNameDotRegex, '_');\r\n        if (!eventWithMetaData.type || !Utils.isString(eventWithMetaData.type)) {\r\n            eventWithMetaData.type = 'custom';\r\n        }\r\n        else {\r\n            eventWithMetaData.type = eventWithMetaData.type.toLowerCase();\r\n        }\r\n        //Validate name and type and drop if invalid\r\n        if (!Utils.EventNameAndTypeRegex.test(eventWithMetaData.name) || !Utils.EventNameAndTypeRegex.test(eventWithMetaData.type)) {\r\n            AWTNotificationManager_1.default.eventsRejected([eventWithMetaData], Enums_1.AWTEventsRejectedReason.InvalidEvent);\r\n            return;\r\n        }\r\n        //Add the timestamp if the timestamp is not set or is negative.\r\n        if (!Utils.isNumber(eventWithMetaData.timestamp) || eventWithMetaData.timestamp < 0) {\r\n            eventWithMetaData.timestamp = (new Date()).getTime();\r\n        }\r\n        //If no properties create one for EventInfo and context \r\n        if (!eventWithMetaData.properties) {\r\n            eventWithMetaData.properties = {};\r\n        }\r\n        // Logger ContextProperties\r\n        this._addContextIfAbsent(eventWithMetaData, contextProperties.getPropertyMap());\r\n        // LogManager ContextProperties\r\n        this._addContextIfAbsent(eventWithMetaData, AWTLogManagerSettings_1.default.logManagerContext.getPropertyMap());\r\n        //Add event info\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.InitId', this._getInitId(eventWithMetaData.apiKey));\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Sequence', this._getSequenceId(eventWithMetaData.apiKey));\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.SdkVersion', Version.FullVersionString);\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Name', eventWithMetaData.name);\r\n        this._setDefaultProperty(eventWithMetaData, 'EventInfo.Time', (new Date(eventWithMetaData.timestamp)).toISOString());\r\n        if (!Utils.isPriority(eventWithMetaData.priority)) {\r\n            eventWithMetaData.priority = Enums_1.AWTEventPriority.Normal;\r\n        }\r\n        this._sendEvent(eventWithMetaData);\r\n    };\r\n    AWTLogger._addContextIfAbsent = function (event, contextProperties) {\r\n        if (contextProperties) {\r\n            for (var name_2 in contextProperties) {\r\n                if (contextProperties.hasOwnProperty(name_2)) {\r\n                    if (!event.properties[name_2]) {\r\n                        event.properties[name_2] = contextProperties[name_2];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AWTLogger._setDefaultProperty = function (event, name, value) {\r\n        event.properties[name] = { value: value, pii: Enums_1.AWTPiiKind.NotSet, type: Enums_1.AWTPropertyType.String };\r\n    };\r\n    AWTLogger._sendEvent = function (event) {\r\n        AWTTransmissionManagerCore_1.default.sendEvent(event);\r\n    };\r\n    AWTLogger._getInternalEvent = function (event, apiKey, sanitizeProperties) {\r\n        var internalEvent = event;\r\n        internalEvent.id = Utils.newGuid();\r\n        internalEvent.apiKey = apiKey;\r\n        internalEvent.properties = internalEvent.properties || {};\r\n        if (sanitizeProperties) {\r\n            // Event Properties \r\n            for (var name_3 in internalEvent.properties) {\r\n                if (internalEvent.properties.hasOwnProperty(name_3)) {\r\n                    internalEvent.properties[name_3] = Utils.sanitizeProperty(name_3, internalEvent.properties[name_3]);\r\n                    if (internalEvent.properties[name_3] === null) {\r\n                        delete internalEvent.properties[name_3];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return internalEvent;\r\n    };\r\n    AWTLogger._getInitId = function (apiKey) {\r\n        return AWTLogger._initIdMap[apiKey];\r\n    };\r\n    AWTLogger._getSequenceId = function (apiKey) {\r\n        if (AWTLogger._sequenceIdMap[apiKey] === undefined) {\r\n            AWTLogger._sequenceIdMap[apiKey] = 0;\r\n        }\r\n        return (++AWTLogger._sequenceIdMap[apiKey]).toString();\r\n    };\r\n    AWTLogger._sequenceIdMap = {};\r\n    AWTLogger._initIdMap = {};\r\n    return AWTLogger;\r\n}());\r\nexports.default = AWTLogger;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTStatsManager.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Utils = require(\"./Utils\");\r\nvar AWTNotificationManager_1 = require(\"./AWTNotificationManager\");\r\nvar Enums_1 = require(\"./Enums\");\r\nvar StatsTimer = 60000;\r\n/**\r\n* Class that manages the stats.\r\n*/\r\nvar AWTStatsManager = /** @class */ (function () {\r\n    function AWTStatsManager() {\r\n    }\r\n    /**\r\n     * Intiailizes the stats collection.\r\n     * @param {function} sendStats - The function to call when the stats are ready to be sent.\r\n     */\r\n    AWTStatsManager.initialize = function (sendStats) {\r\n        var _this = this;\r\n        this._sendStats = sendStats;\r\n        this._isInitalized = true;\r\n        AWTNotificationManager_1.default.addNotificationListener({\r\n            eventsSent: function (events) {\r\n                _this._addStat('records_sent_count', events.length, events[0].apiKey);\r\n            },\r\n            eventsDropped: function (events, reason) {\r\n                switch (reason) {\r\n                    case Enums_1.AWTEventsDroppedReason.NonRetryableStatus:\r\n                        _this._addStat('d_send_fail', events.length, events[0].apiKey);\r\n                        _this._addStat('records_dropped_count', events.length, events[0].apiKey);\r\n                        break;\r\n                    case Enums_1.AWTEventsDroppedReason.QueueFull:\r\n                        _this._addStat('d_queue_full', events.length, events[0].apiKey);\r\n                        break;\r\n                }\r\n            },\r\n            eventsRejected: function (events, reason) {\r\n                switch (reason) {\r\n                    case Enums_1.AWTEventsRejectedReason.InvalidEvent:\r\n                        _this._addStat('r_inv', events.length, events[0].apiKey);\r\n                        break;\r\n                    case Enums_1.AWTEventsRejectedReason.KillSwitch:\r\n                        _this._addStat('r_kl', events.length, events[0].apiKey);\r\n                        break;\r\n                    case Enums_1.AWTEventsRejectedReason.SizeLimitExceeded:\r\n                        _this._addStat('r_size', events.length, events[0].apiKey);\r\n                        break;\r\n                }\r\n                _this._addStat('r_count', events.length, events[0].apiKey);\r\n            },\r\n            eventsRetrying: null\r\n        });\r\n        setTimeout(function () { return _this.flush(); }, StatsTimer);\r\n    };\r\n    /**\r\n     * Flush the current stats and stop the stats collection.\r\n     */\r\n    AWTStatsManager.teardown = function () {\r\n        if (this._isInitalized) {\r\n            this.flush();\r\n            this._isInitalized = false;\r\n        }\r\n    };\r\n    /**\r\n     * Increments the stat for event received.\r\n     * @param {string} apiKey - The apiKey for which the event was received\r\n     */\r\n    AWTStatsManager.eventReceived = function (apiKey) {\r\n        AWTStatsManager._addStat('records_received_count', 1, apiKey);\r\n    };\r\n    /**\r\n     * Creates an event for each tenant token which had a stat and calls the\r\n     * sendStats for that token.\r\n     */\r\n    AWTStatsManager.flush = function () {\r\n        var _this = this;\r\n        if (this._isInitalized) {\r\n            for (var tenantId in this._stats) {\r\n                if (this._stats.hasOwnProperty(tenantId)) {\r\n                    this._sendStats(this._stats[tenantId], tenantId);\r\n                }\r\n            }\r\n            this._stats = {};\r\n            setTimeout(function () { return _this.flush(); }, StatsTimer);\r\n        }\r\n    };\r\n    AWTStatsManager._addStat = function (statName, value, apiKey) {\r\n        if (this._isInitalized && apiKey !== Utils.StatsApiKey) {\r\n            var tenantId = Utils.getTenantId(apiKey);\r\n            if (!this._stats[tenantId]) {\r\n                this._stats[tenantId] = {};\r\n            }\r\n            if (!this._stats[tenantId][statName]) {\r\n                this._stats[tenantId][statName] = value;\r\n            }\r\n            else {\r\n                this._stats[tenantId][statName] = this._stats[tenantId][statName] + value;\r\n            }\r\n        }\r\n    };\r\n    AWTStatsManager._isInitalized = false;\r\n    AWTStatsManager._stats = {};\r\n    return AWTStatsManager;\r\n}());\r\nexports.default = AWTStatsManager;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTSerializer.ts\r\n* @author Brent Erickson (brericks) and Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar Bond = require(\"../bond/microsoft.bond\");\r\nvar Enums_1 = require(\"./Enums\");\r\nvar AWTNotificationManager_1 = require(\"./AWTNotificationManager\");\r\nvar Utils = require(\"./Utils\");\r\nvar RequestSizeLimitBytes = 2936012; //approx 2.8 Mb\r\n/**\r\n* Class to handle serialization of event and request.\r\n* Currently uses Bond for serialization. Please note that this may be subject to change.\r\n*/\r\nvar AWTSerializer = /** @class */ (function () {\r\n    function AWTSerializer() {\r\n    }\r\n    /**\r\n     * Serialies a request using Bond.\r\n     * @param {object} requestDictionary - A dictionary containing the token to event mapping.\r\n     * @param {number} tokenCount        - Number of tenant tokens to be sent in the request.\r\n     * @return {number[]} The serialized bond request.\r\n     */\r\n    AWTSerializer.getPayloadBlob = function (requestDictionary, tokenCount) {\r\n        var requestFull = false;\r\n        var remainingRequest;\r\n        var stream = new Bond.IO.MemoryStream();\r\n        var writer = new Bond.CompactBinaryProtocolWriter(stream);\r\n        //Write TokenToDataPackagesMap\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 3, null);\r\n        writer._WriteMapContainerBegin(tokenCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_LIST);\r\n        for (var token in requestDictionary) {\r\n            if (!requestFull) {\r\n                if (requestDictionary.hasOwnProperty(token)) {\r\n                    //write token\r\n                    writer._WriteString(token);\r\n                    var dataPackage = requestDictionary[token];\r\n                    // Write list of DataPackages\r\n                    writer._WriteContainerBegin(1, Bond._BondDataType._BT_STRUCT);\r\n                    // Source\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 2, null);\r\n                    writer._WriteString('act_default_source');\r\n                    // DataPackageId\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 5, null);\r\n                    writer._WriteString(Utils.newGuid());\r\n                    // Timestamp\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT64, 6, null);\r\n                    writer._WriteInt64(Utils.numberToBondInt64(Date.now()));\r\n                    // Records\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_LIST, 8, null);\r\n                    //Advance position by 1 for the elementy type which is always struct\r\n                    var dpSizePos = stream._GetBuffer().length + 1;\r\n                    writer._WriteContainerBegin(requestDictionary[token].length, Bond._BondDataType._BT_STRUCT);\r\n                    var dpSizeSerialized = stream._GetBuffer().length - dpSizePos;\r\n                    for (var i = 0; i < dataPackage.length; ++i) {\r\n                        var currentStreamPos = stream._GetBuffer().length;\r\n                        this.writeEvent(dataPackage[i], writer);\r\n                        if (stream._GetBuffer().length - currentStreamPos > RequestSizeLimitBytes) {\r\n                            //single event too big\r\n                            AWTNotificationManager_1.default.eventsRejected([dataPackage[i]], Enums_1.AWTEventsRejectedReason.SizeLimitExceeded);\r\n                            //move i one place back so that we can evaluate the next element once we delete the current element at pos i\r\n                            dataPackage.splice(i--, 1);\r\n                            stream._GetBuffer().splice(currentStreamPos);\r\n                            //Bond serialization to change the datapackage length since we couldnt send this event\r\n                            this._addNewDataPackageSize(dataPackage.length, stream, dpSizeSerialized, dpSizePos);\r\n                            continue;\r\n                        }\r\n                        if (stream._GetBuffer().length > RequestSizeLimitBytes) {\r\n                            //Adding this event exceeded the max request size. We should rever this event and send the serialized request.\r\n                            //The remaining events should be returned to send in a separate request.\r\n                            stream._GetBuffer().splice(currentStreamPos);\r\n                            if (!remainingRequest) {\r\n                                remainingRequest = {};\r\n                            }\r\n                            requestDictionary[token] = dataPackage.splice(0, i);\r\n                            remainingRequest[token] = dataPackage;\r\n                            this._addNewDataPackageSize(requestDictionary[token].length, stream, dpSizeSerialized, dpSizePos);\r\n                            break;\r\n                        }\r\n                    }\r\n                    writer._WriteStructEnd(false);\r\n                }\r\n            }\r\n            else {\r\n                if (!remainingRequest) {\r\n                    remainingRequest = {};\r\n                }\r\n                remainingRequest[token] = requestDictionary[token];\r\n                delete requestDictionary[token];\r\n            }\r\n        }\r\n        // End ClientCollector\r\n        writer._WriteStructEnd(false);\r\n        return { payloadBlob: stream._GetBuffer(), remainingRequest: remainingRequest };\r\n    };\r\n    AWTSerializer._addNewDataPackageSize = function (size, stream, oldDpSize, streamPos) {\r\n        //Bond serialization to change the datapackage length since we couldnt send everything\r\n        var newRecordCountSerialized = Bond._Encoding._Varint_GetBytes(Bond.Number._ToUInt32(size));\r\n        for (var j = 0; j < oldDpSize; ++j) {\r\n            if (j < newRecordCountSerialized.length) {\r\n                stream._GetBuffer()[streamPos + j] = newRecordCountSerialized[j];\r\n            }\r\n            else {\r\n                stream._GetBuffer().slice(streamPos + j, oldDpSize - j);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Bond serialize the event.\r\n     * @param {object} eventData - The event that needs to be serialized.\r\n     * @return {number[]} The serialized bond event.\r\n     */\r\n    AWTSerializer.writeEvent = function (eventData, writer) {\r\n        // ID\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 1, null);\r\n        writer._WriteString(eventData.id);\r\n        // Timestamp\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_INT64, 3, null);\r\n        writer._WriteInt64(Utils.numberToBondInt64(eventData.timestamp));\r\n        // Type\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 5, null);\r\n        writer._WriteString(eventData.type);\r\n        // Event Type\r\n        writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 6, null);\r\n        writer._WriteString(eventData.name);\r\n        var propsString = {};\r\n        var propStringCount = 0;\r\n        var propsInt64 = {};\r\n        var propInt64Count = 0;\r\n        var propsDouble = {};\r\n        var propDoubleCount = 0;\r\n        var propsBool = {};\r\n        var propBoolCount = 0;\r\n        var piiProps = {};\r\n        var piiPropCount = 0;\r\n        var ccProps = {};\r\n        var ccPropCount = 0;\r\n        // Iterate across event data properties and separate based on pii\r\n        for (var key in eventData.properties) {\r\n            if (eventData.properties.hasOwnProperty(key)) {\r\n                var property = eventData.properties[key];\r\n                if (property.cc > 0) {\r\n                    ccProps[key] = property;\r\n                    ccPropCount++;\r\n                }\r\n                else if (property.pii > 0) {\r\n                    piiProps[key] = property;\r\n                    piiPropCount++;\r\n                }\r\n                else {\r\n                    switch (property.type) {\r\n                        case Enums_1.AWTPropertyType.String:\r\n                            propsString[key] = property.value;\r\n                            propStringCount++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Int64:\r\n                            propsInt64[key] = property.value;\r\n                            propInt64Count++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Double:\r\n                            propsDouble[key] = property.value;\r\n                            propDoubleCount++;\r\n                            break;\r\n                        case Enums_1.AWTPropertyType.Boolean:\r\n                            propsBool[key] = property.value;\r\n                            propBoolCount++;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //Extension map\r\n        if (propStringCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 13, null);\r\n            writer._WriteMapContainerBegin(propStringCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRING);\r\n            for (var key in propsString) {\r\n                if (propsString.hasOwnProperty(key)) {\r\n                    var value = propsString[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteString(value.toString());\r\n                }\r\n            }\r\n        }\r\n        // Pii\r\n        if (piiPropCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 30, null);\r\n            writer._WriteMapContainerBegin(piiPropCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRUCT);\r\n            for (var key in piiProps) {\r\n                if (piiProps.hasOwnProperty(key)) {\r\n                    var property = piiProps[key];\r\n                    writer._WriteString(key);\r\n                    // PII Data\r\n                    // O365 scrubber type\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 1, null);\r\n                    writer._WriteInt32(1);\r\n                    // PII Kind\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 2, null);\r\n                    writer._WriteInt32(property.pii);\r\n                    // Value\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 3, null);\r\n                    writer._WriteString(property.value.toString());\r\n                    writer._WriteStructEnd(false);\r\n                }\r\n            }\r\n        }\r\n        // TypedExtensionBoolean map\r\n        if (propBoolCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 31, null);\r\n            writer._WriteMapContainerBegin(propBoolCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_BOOL);\r\n            for (var key in propsBool) {\r\n                if (propsBool.hasOwnProperty(key)) {\r\n                    var value = propsBool[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteBool(value);\r\n                }\r\n            }\r\n        }\r\n        //TypedExtensionInt64 map\r\n        if (propInt64Count) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 33, null);\r\n            writer._WriteMapContainerBegin(propInt64Count, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_INT64);\r\n            for (var key in propsInt64) {\r\n                if (propsInt64.hasOwnProperty(key)) {\r\n                    var value = propsInt64[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteInt64(Utils.numberToBondInt64(value));\r\n                }\r\n            }\r\n        }\r\n        //TypedExtensionDouble map\r\n        if (propDoubleCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 34, null);\r\n            writer._WriteMapContainerBegin(propDoubleCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_DOUBLE);\r\n            for (var key in propsDouble) {\r\n                if (propsDouble.hasOwnProperty(key)) {\r\n                    var value = propsDouble[key];\r\n                    writer._WriteString(key);\r\n                    writer._WriteDouble(value);\r\n                }\r\n            }\r\n        }\r\n        //CustomerContentExtensions map\r\n        if (ccPropCount) {\r\n            writer._WriteFieldBegin(Bond._BondDataType._BT_MAP, 36, null);\r\n            writer._WriteMapContainerBegin(ccPropCount, Bond._BondDataType._BT_STRING, Bond._BondDataType._BT_STRUCT);\r\n            for (var key in ccProps) {\r\n                if (ccProps.hasOwnProperty(key)) {\r\n                    var property = ccProps[key];\r\n                    writer._WriteString(key);\r\n                    // CustomerContent Data\r\n                    // CustomerContentKind\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_INT32, 1, null);\r\n                    writer._WriteInt32(property.cc);\r\n                    // RawContent\r\n                    writer._WriteFieldBegin(Bond._BondDataType._BT_STRING, 2, null);\r\n                    writer._WriteString(property.value.toString());\r\n                    writer._WriteStructEnd(false);\r\n                }\r\n            }\r\n        }\r\n        writer._WriteStructEnd(false);\r\n    };\r\n    /**\r\n     * Base64 encode the given number[].\r\n     * @param {number[]} data - The data to be base64 encoded.\r\n     * @return {string} The base64 encoded data.\r\n     */\r\n    AWTSerializer.base64Encode = function (data) {\r\n        return Bond._Encoding._Base64_GetString(data);\r\n    };\r\n    return AWTSerializer;\r\n}());\r\nexports.default = AWTSerializer;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* Version.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2018\r\n* File for SDK version.\r\n*/\r\nexports.Version = '1.6.2';\r\nexports.FullVersionString = 'AWT-Web-JS-' + exports.Version;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar Enums_2 = require(\"./Enums\");\r\nvar AWTLogManagerSettings_1 = require(\"./AWTLogManagerSettings\");\r\nvar AWTLogger_1 = require(\"./AWTLogger\");\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\nvar AWTNotificationManager_1 = require(\"../common/AWTNotificationManager\");\r\nvar AWTAutoCollection_1 = require(\"./AWTAutoCollection\");\r\n/**\r\n* The AWTLogManager class manages the Aria SDK.\r\n*/\r\nvar AWTLogManager = /** @class */ (function () {\r\n    function AWTLogManager() {\r\n    }\r\n    /**\r\n    * Initializes the log manager. After this method is called, events are\r\n    * accepted for transmission.\r\n    * @param {string} tenantToken - A string that contains the default tenant token.\r\n    * @param {object} config      - [Optional] Configuration settings for initialize, as an AWTLogConfiguration object.\r\n    */\r\n    AWTLogManager.initialize = function (tenantToken, configuration) {\r\n        if (configuration === void 0) { configuration = {}; }\r\n        if (this._isInitialized) {\r\n            return;\r\n        }\r\n        this._isInitialized = true;\r\n        AWTLogManagerSettings_1.default.defaultTenantToken = tenantToken;\r\n        this._overrideValuesFromConfig(configuration);\r\n        if (this._config.disableCookiesUsage && !this._config.propertyStorageOverride) {\r\n            AWTLogManagerSettings_1.default.sessionEnabled = false;\r\n        }\r\n        AWTAutoCollection_1.default.addPropertyStorageOverride(this._config.propertyStorageOverride);\r\n        AWTAutoCollection_1.default.autoCollect(AWTLogManagerSettings_1.default.semanticContext, this._config.disableCookiesUsage, this._config.userAgent);\r\n        //Create sender\r\n        AWTTransmissionManagerCore_1.default.initialize(this._config);\r\n        AWTLogManagerSettings_1.default.loggingEnabled = true;\r\n        //Autolog session events for browsers\r\n        if (this._config.enableAutoUserSession) {\r\n            this.getLogger().logSession(Enums_2.AWTSessionState.Started);\r\n            window.addEventListener('beforeunload', this.flushAndTeardown);\r\n        }\r\n        return this.getLogger();\r\n    };\r\n    /**\r\n     * Gets the global semantic context.\r\n     *\r\n     * @return A AWTSemanticContext object, through which you can set common semantic properties.\r\n     */\r\n    AWTLogManager.getSemanticContext = function () {\r\n        return AWTLogManagerSettings_1.default.semanticContext;\r\n    };\r\n    /**\r\n     * Asynchronously sends events currently in the queue. New events added\r\n     * are sent after the current flush finishes. The passed callback is\r\n     * called when flush finishes. <b>Note:</b> If LogManager is paused, or if\r\n     * flush is called again in less than 30 seconds, then flush is no-op, and\r\n     * the callback is not called.\r\n     * @param {function} callback - The function that is called when flush finishes.\r\n     */\r\n    AWTLogManager.flush = function (callback) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.flush(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Prevents new events from being added for transmission. It also batches all\r\n     * events currently in the queue, and creates requests for them to be sent. If\r\n     * HTML5 Beacons are supported, then they will be used.\r\n     */\r\n    AWTLogManager.flushAndTeardown = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            if (this._config.enableAutoUserSession) {\r\n                this.getLogger().logSession(Enums_2.AWTSessionState.Ended);\r\n            }\r\n            AWTTransmissionManagerCore_1.default.flushAndTeardown();\r\n            AWTLogManagerSettings_1.default.loggingEnabled = false;\r\n            this._isDestroyed = true;\r\n        }\r\n    };\r\n    /**\r\n     * Pasues the transmission of events.\r\n     */\r\n    AWTLogManager.pauseTransmission = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.pauseTransmission();\r\n        }\r\n    };\r\n    /**\r\n     * Resumes the tranmission of events.\r\n     */\r\n    AWTLogManager.resumeTransmision = function () {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.resumeTransmision();\r\n        }\r\n    };\r\n    /**\r\n     * Sets the transmit profile. This changes the transmission timers\r\n     * based on the transmit profile.\r\n     * @param {string} profileName - A string that contains the name of the transmit profile.\r\n     */\r\n    AWTLogManager.setTransmitProfile = function (profileName) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.setTransmitProfile(profileName);\r\n        }\r\n    };\r\n    /**\r\n     * Loads custom transmission profiles. Each profile should have timers for\r\n     * high, normal, and low. Each profile should make sure\r\n     * that a each priority timer is a multiple of the priority higher than it.\r\n     * Setting the timer value to <i>-1</i> means the events for that priority will\r\n     * not be sent. Note that once a priority has been set to <i>not send</i>, then all priorities\r\n     * below it will also not be sent. The timers should be in the form of [low, normal, high].\r\n     * E.g, <i>Custom: [30,10,5]</i>.\r\n     * This method removes any previously loaded custom profiles.\r\n     * @param {object} profiles - A dictionary that contains the transmit profiles.\r\n     */\r\n    AWTLogManager.loadTransmitProfiles = function (profiles) {\r\n        if (this._isInitialized && !this._isDestroyed) {\r\n            AWTTransmissionManagerCore_1.default.loadTransmitProfiles(profiles);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the context sent with every event.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.setContext = function (name, value, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setProperty(name, value, type);\r\n    };\r\n    /**\r\n     * Sets the context sents with every event, and tags it as PII.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} pii                    - The kind of PII for the context property.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.setContextWithPii = function (name, value, pii, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setPropertyWithPii(name, value, pii, type);\r\n    };\r\n    /**\r\n     * Sets the context sent with every event from this logger, and tags it as <i>customer content</i>.\r\n     * @param {string} name                 - A string that contains the name of the context property.\r\n     * @param {string|number|boolean} value - The value of the context property.\r\n     * @param {enum} customerContent        - The kind of customer content for the context property, as one of the\r\n     * AWTCustomerContentKind enumeration values.\r\n     * @param {enum} type                   - [Optional] The type for the context property value, as one of the\r\n     * AWTPropertyType enumeration values.\r\n     */\r\n    AWTLogManager.setContextWithCustomerContent = function (name, value, customerContent, type) {\r\n        if (type === void 0) { type = Enums_1.AWTPropertyType.Unspecified; }\r\n        AWTLogManagerSettings_1.default.logManagerContext.setPropertyWithCustomerContent(name, value, customerContent, type);\r\n    };\r\n    /**\r\n     * Gets the logger for the specified tenant token.\r\n     * @param {string} tenantToken - A string that contains the tenant token.\r\n     * @return An AWTLogger object which sends data with the specified tenant token. If the tenant token is\r\n     * undefined, or null, or empty, then undefined is returned.\r\n     */\r\n    AWTLogManager.getLogger = function (tenantToken) {\r\n        var key = tenantToken;\r\n        if (!key || key === AWTLogManagerSettings_1.default.defaultTenantToken) {\r\n            key = '';\r\n        }\r\n        if (!this._loggers[key]) {\r\n            this._loggers[key] = new AWTLogger_1.default(key);\r\n        }\r\n        return this._loggers[key];\r\n    };\r\n    /**\r\n     * Adds a notification listener. The Aria SDK calls methods on the listener\r\n     * when an appropriate notification is raised.\r\n     * @param {object} listener - An AWTNotificationListener object.\r\n     */\r\n    AWTLogManager.addNotificationListener = function (listener) {\r\n        AWTNotificationManager_1.default.addNotificationListener(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {object} listener - AWTNotificationListener to remove.\r\n     */\r\n    AWTLogManager.removeNotificationListener = function (listener) {\r\n        AWTNotificationManager_1.default.removeNotificationListener(listener);\r\n    };\r\n    AWTLogManager._overrideValuesFromConfig = function (config) {\r\n        if (config.collectorUri) {\r\n            this._config.collectorUri = config.collectorUri;\r\n        }\r\n        if (config.cacheMemorySizeLimitInNumberOfEvents > 0) {\r\n            this._config.cacheMemorySizeLimitInNumberOfEvents = config.cacheMemorySizeLimitInNumberOfEvents;\r\n        }\r\n        if (config.httpXHROverride && config.httpXHROverride.sendPOST) {\r\n            this._config.httpXHROverride = config.httpXHROverride;\r\n        }\r\n        if (config.propertyStorageOverride && config.propertyStorageOverride.getProperty &&\r\n            config.propertyStorageOverride.setProperty) {\r\n            this._config.propertyStorageOverride = config.propertyStorageOverride;\r\n        }\r\n        if (config.userAgent) {\r\n            this._config.userAgent = config.userAgent;\r\n        }\r\n        if (config.disableCookiesUsage) {\r\n            this._config.disableCookiesUsage = config.disableCookiesUsage;\r\n        }\r\n        if (config.canSendStatEvent) {\r\n            this._config.canSendStatEvent = config.canSendStatEvent;\r\n        }\r\n        if (config.enableAutoUserSession && typeof window !== 'undefined' && window.addEventListener) {\r\n            this._config.enableAutoUserSession = config.enableAutoUserSession;\r\n        }\r\n    };\r\n    AWTLogManager._loggers = {};\r\n    AWTLogManager._isInitialized = false;\r\n    AWTLogManager._isDestroyed = false;\r\n    AWTLogManager._config = {\r\n        collectorUri: 'https://browser.pipe.aria.microsoft.com/Collector/3.0/',\r\n        cacheMemorySizeLimitInNumberOfEvents: 10000,\r\n        disableCookiesUsage: false,\r\n        canSendStatEvent: function (eventName) { return true; }\r\n    };\r\n    return AWTLogManager;\r\n}());\r\nexports.default = AWTLogManager;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTLogManagerSettings.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar AWTEventProperties_1 = require(\"./AWTEventProperties\");\r\nvar AWTSemanticContext_1 = require(\"./AWTSemanticContext\");\r\n/**\r\n* Class that stores LogManagers context.\r\n*/\r\nvar AWTLogManagerSettings = /** @class */ (function () {\r\n    function AWTLogManagerSettings() {\r\n    }\r\n    AWTLogManagerSettings.logManagerContext = new AWTEventProperties_1.default();\r\n    AWTLogManagerSettings.sessionEnabled = true;\r\n    AWTLogManagerSettings.loggingEnabled = false;\r\n    AWTLogManagerSettings.defaultTenantToken = '';\r\n    AWTLogManagerSettings.semanticContext = new AWTSemanticContext_1.default(true, AWTLogManagerSettings.logManagerContext);\r\n    return AWTLogManagerSettings;\r\n}());\r\nexports.default = AWTLogManagerSettings;\r\n","import { log, init, telemetry, flush } from \"./logger\";\r\n\r\n/**\r\n * 配置\r\n */\r\nconst ARIA_SCRIPT = document.getElementById('ARIA-LOG');\r\nconsole.assert(!!ARIA_SCRIPT, 'the element with id=\"ARIA-LOG\" NOT exist in this document');\r\n\r\nconst CONFIG = document.getElementById('ARIA-LOG').dataset;\r\n\r\nconst TOKEN = CONFIG.token;\r\nconst LEVEL = (CONFIG.level || 'warn').toLocaleLowerCase();\r\nconst CORELATION_ID = CONFIG.corelation || ((new Date).getTime() + '-' + Math.random());\r\nconst APP_NAME = CONFIG.appname || location.hostname;\r\nconst LOG_TABLE = (CONFIG.table || APP_NAME).replace(/[^\\w\\d]/g, '');\r\nconst VERBOSE = 'debug' in CONFIG ? CONFIG['debug'].toLowerCase() === \"true\" : true;\r\n\r\nconsole.assert(TOKEN && TOKEN.length > 0, 'data-token=\"token string\" MUST have an value');\r\nconsole.assert(LOG_TABLE.length >= 4, 'the table name MUST be 4-100 alphanumeric chars');\r\n\r\n\r\n/**\r\n * 日志级别\r\n */\r\nenum LogLevel {\r\n    all = 0,\r\n    trace = 10,\r\n    debug = 20,\r\n    info = 400,\r\n    warn = 500,\r\n    error = 600,\r\n    critical = 700,\r\n    alert = 800,\r\n}\r\n/**\r\n * 原始console API\r\n */\r\nconst _originConsole: Console | any = {\r\n    log: console.log\r\n};\r\n\r\n/**\r\n* @param {string} level 日志级别小写\r\n* @param {string} action 日志关键action或者位置\r\n* @param {any?} content 内容可以是string,数字或者Object\r\n*/\r\nfunction Log(level: string, action: string, content?: any, attrs?: any) {\r\n    var data: { [key: string]: any } = {\r\n        action: action,\r\n        title: document.title,\r\n        url: document.URL\r\n    }\r\n    for (var key in attrs) {\r\n        data[key] = attrs[key];\r\n    }\r\n    data.content = typeof content === 'object' ? JSON.stringify(content) : content;\r\n    if (level === \"telemetry\") {\r\n        telemetry(data);\r\n    } else if (!LEVEL || (LogLevel[level] >= LogLevel[LEVEL])) {\r\n        data.level = level;\r\n        log(data);\r\n    }\r\n};\r\n\r\n\r\n\r\n/**\r\n * 初始化设置\r\n */\r\ninit(TOKEN, APP_NAME, LOG_TABLE, {\r\n    corelationId: CORELATION_ID,\r\n    userId: CONFIG.userid,\r\n    subscribeId: CONFIG.subid,\r\n});\r\n\r\n/**\r\n * 日志接口覆盖\r\n */\r\nconsole.log = function () {\r\n    if (VERBOSE) {\r\n        _originConsole.log.apply(console, arguments);\r\n    }\r\n    if (arguments.length > 1 && arguments.length < 3) {\r\n        Log.apply(null, arguments);\r\n    }\r\n};\r\n\r\n/**\r\n * 接口扩展\r\n */\r\n['info', 'debug', 'warn', 'error'].forEach(key => {\r\n    _originConsole[key] = console[key];\r\n    console[key] = function (...args) {\r\n        if (VERBOSE) {\r\n            _originConsole[key].apply(null, args);\r\n        }\r\n        if (args.length && args.length < 3) {\r\n            args.unshift(key);\r\n            Log.apply(Log, args);\r\n        }\r\n    }\r\n});\r\n\r\n//关闭前清空\r\nif (CONFIG.flush === \"true\") {\r\n    window.onbeforeunload = flush;\r\n}\r\n\r\n//捕获全局错误\r\n\r\nwindow.onerror = function (msg, url, line, col, error) {\r\n    Log('error', msg as string, error, {\r\n        file: url,\r\n        line: line,\r\n        col: col,\r\n    })\r\n}\r\n\r\n// callback\r\nif(CONFIG.init){\r\n    window[CONFIG.init]();\r\n}","import { AWTLogManager, AWTLogger } from '@aria/webjs-sdk';\r\n\r\n// AWTLogger logger\r\n\r\n\r\nlet _logger: AWTLogger;\r\nlet _token: string;\r\nlet _name: string = \"logging\";\r\nlet _table: string;\r\nlet _config = {};\r\n\r\nfunction getLogger(): AWTLogger {\r\n    if (!_logger) {\r\n        // _manager = \r\n        AWTLogManager.initialize(_token);\r\n        _logger = AWTLogManager.getLogger();\r\n        _logger.setContext(\"AppName\", _name);\r\n        _logger.setContext(\"UserAgent\", navigator.userAgent);\r\n        for (var key in _config) {\r\n            _logger.setContext(key, _config[key]);\r\n        }\r\n    }\r\n    return _logger;\r\n}\r\n\r\n// export function setToken(token: string): void {\r\n//     _token = token;\r\n// }\r\n\r\n// export function setName(name: string): void {\r\n//     _name = name;\r\n// }\r\n\r\nexport function init(token: string, name: string, table?: string, config?: Object): void {\r\n    _token = token;\r\n    _name = name;\r\n    _table = table;\r\n    for (var key in config) {\r\n        _config[key] = config[key];\r\n    }\r\n}\r\n\r\n/**\r\n * 记录日志\r\n * @param data -  data to log\r\n */\r\nexport function log(data: any): void {\r\n    return getLogger().logEvent({\r\n        name: _table || _name,\r\n        properties: data,\r\n    });\r\n}\r\n\r\n/**\r\n * 统计数据\r\n * @param data - data to telemetry\r\n */\r\nexport function telemetry(data): void {\r\n    return getLogger().logEvent({\r\n        name: 'telemetry',\r\n        properties: data\r\n    });\r\n}\r\n\r\nexport function flush(): boolean {\r\n    if (_logger) {\r\n        AWTLogManager.flushAndTeardown();\r\n        _logger = null;\r\n    }\r\n    return true;\r\n}","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AriaSDK.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n* File to export public classes, interfaces and enums.\r\n*/\r\nvar Enums_1 = require(\"../common/Enums\");\r\nexports.AWTPropertyType = Enums_1.AWTPropertyType;\r\nexports.AWTPiiKind = Enums_1.AWTPiiKind;\r\nexports.AWTEventPriority = Enums_1.AWTEventPriority;\r\nexports.AWTEventsDroppedReason = Enums_1.AWTEventsDroppedReason;\r\nexports.AWTEventsRejectedReason = Enums_1.AWTEventsRejectedReason;\r\nexports.AWTCustomerContentKind = Enums_1.AWTCustomerContentKind;\r\nvar Enums_2 = require(\"./Enums\");\r\nexports.AWTUserIdType = Enums_2.AWTUserIdType;\r\nexports.AWTSessionState = Enums_2.AWTSessionState;\r\nvar DataModels_1 = require(\"./DataModels\");\r\nexports.AWT_BEST_EFFORT = DataModels_1.AWT_BEST_EFFORT;\r\nexports.AWT_NEAR_REAL_TIME = DataModels_1.AWT_NEAR_REAL_TIME;\r\nexports.AWT_REAL_TIME = DataModels_1.AWT_REAL_TIME;\r\nvar AWTEventProperties_1 = require(\"./AWTEventProperties\");\r\nexports.AWTEventProperties = AWTEventProperties_1.default;\r\nvar AWTLogger_1 = require(\"./AWTLogger\");\r\nexports.AWTLogger = AWTLogger_1.default;\r\nvar AWTLogManager_1 = require(\"./AWTLogManager\");\r\nexports.AWTLogManager = AWTLogManager_1.default;\r\nvar AWTTransmissionManager_1 = require(\"./AWTTransmissionManager\");\r\nexports.AWTTransmissionManager = AWTTransmissionManager_1.default;\r\nvar AWTSerializer_1 = require(\"../common/AWTSerializer\");\r\nexports.AWTSerializer = AWTSerializer_1.default;\r\nvar AWTSemanticContext_1 = require(\"./AWTSemanticContext\");\r\nexports.AWTSemanticContext = AWTSemanticContext_1.default;\r\nexports.AWT_COLLECTOR_URL_UNITED_STATES = 'https://us.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_GERMANY = 'https://de.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_JAPAN = 'https://jp.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_AUSTRALIA = 'https://au.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_EUROPE = 'https://eu.pipe.aria.microsoft.com/Collector/3.0/';\r\nexports.AWT_COLLECTOR_URL_USGOV_DOD = 'https://pf.pipe.aria.microsoft.com/Collector/3.0';\r\nexports.AWT_COLLECTOR_URL_USGOV_DOJ = 'https://tb.pipe.aria.microsoft.com/Collector/3.0';\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar AWTHttpManager_1 = require(\"./AWTHttpManager\");\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\nvar AWTRecordBatcher_1 = require(\"../common/AWTRecordBatcher\");\r\nvar AWTNotificationManager_1 = require(\"../common/AWTNotificationManager\");\r\nvar UploadNowCheckTimer = 250;\r\nvar MaxNumberEventPerBatch = 500;\r\nvar MaxSendAttempts = 6;\r\n/**\r\n * Class that manages adding events to inbound queues and batching of events\r\n * into requests.\r\n */\r\nvar AWTQueueManager = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {string} collectorUrl - The collector url to which the requests must be sent.\r\n     */\r\n    function AWTQueueManager(collectorUrl, _queueSizeLimit, xhrOverride) {\r\n        this._queueSizeLimit = _queueSizeLimit;\r\n        this._isCurrentlyUploadingNow = false;\r\n        this._uploadNowQueue = [];\r\n        this._shouldDropEventsOnPause = false;\r\n        this._paused = false;\r\n        this._queueSize = 0;\r\n        this._outboundQueue = [];\r\n        this._inboundQueues = {};\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High] = [];\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal] = [];\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low] = [];\r\n        this._addEmptyQueues();\r\n        this._batcher = new AWTRecordBatcher_1.default(this._outboundQueue, MaxNumberEventPerBatch);\r\n        this._httpManager = new AWTHttpManager_1.default(this._outboundQueue, collectorUrl, this, xhrOverride);\r\n    }\r\n    /**\r\n     * Add an event to the appropriate inbound queue based on its priority.\r\n     * @param {object} event - The event to be added to the queue.\r\n     */\r\n    AWTQueueManager.prototype.addEvent = function (event) {\r\n        if (event.priority === Enums_1.AWTEventPriority.Immediate_sync) {\r\n            //Log event synchronously\r\n            this._httpManager.sendSynchronousRequest(this._batcher.addEventToBatch(event), event.apiKey);\r\n        }\r\n        else if (this._queueSize < this._queueSizeLimit) {\r\n            this._addEventToProperQueue(event);\r\n        }\r\n        else {\r\n            //Drop old event from lower or equal priority\r\n            if (this._dropEventWithPriorityOrLess(event.priority)) {\r\n                this._addEventToProperQueue(event);\r\n            }\r\n            else {\r\n                //Can't drop events from current queues because the all the slots are taken by queues that are being flushed.\r\n                AWTNotificationManager_1.default.eventsDropped([event], Enums_1.AWTEventsDroppedReason.QueueFull);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Batch and send events currently in the queue for the given priority.\r\n     * @param {enum} priority - Priority for which to send events.\r\n     */\r\n    AWTQueueManager.prototype.sendEventsForPriorityAndAbove = function (priority) {\r\n        this._batchEvents(priority);\r\n        this._httpManager.sendQueuedRequests();\r\n    };\r\n    /**\r\n     * Check if the inbound queues or batcher has any events that can be sent presently.\r\n     * @return {boolean} True if there are events, false otherwise.\r\n     */\r\n    AWTQueueManager.prototype.hasEvents = function () {\r\n        return (this._inboundQueues[Enums_1.AWTEventPriority.High][0].length > 0 || this._inboundQueues[Enums_1.AWTEventPriority.Normal][0].length > 0\r\n            || this._inboundQueues[Enums_1.AWTEventPriority.Low][0].length > 0 || this._batcher.hasBatch())\r\n            && this._httpManager.hasIdleConnection();\r\n    };\r\n    /**\r\n     * Add back the events from a failed request back to the queue.\r\n     * @param {object} request - The request whose events need to be added back to the batcher.\r\n     */\r\n    AWTQueueManager.prototype.addBackRequest = function (request) {\r\n        if (!this._paused || !this._shouldDropEventsOnPause) {\r\n            for (var token in request) {\r\n                if (request.hasOwnProperty(token)) {\r\n                    for (var i = 0; i < request[token].length; ++i) {\r\n                        if (request[token][i].sendAttempt < MaxSendAttempts) {\r\n                            this.addEvent(request[token][i]);\r\n                        }\r\n                        else {\r\n                            AWTNotificationManager_1.default.eventsDropped([request[token][i]], Enums_1.AWTEventsDroppedReason.NonRetryableStatus);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Batch all current events in the queues and send them.\r\n     */\r\n    AWTQueueManager.prototype.teardown = function () {\r\n        if (!this._paused) {\r\n            this._batchEvents(Enums_1.AWTEventPriority.Low);\r\n            this._httpManager.teardown();\r\n        }\r\n    };\r\n    /**\r\n     * Sends events for all priority for the current inbound queue.\r\n     * This method adds new inbound queues to which new events will be added.\r\n     * @param {function} callback - The function to be called when uploadNow is finished.\r\n     */\r\n    AWTQueueManager.prototype.uploadNow = function (callback) {\r\n        var _this = this;\r\n        this._addEmptyQueues();\r\n        if (!this._isCurrentlyUploadingNow) {\r\n            this._isCurrentlyUploadingNow = true;\r\n            setTimeout(function () { return _this._uploadNow(callback); }, 0);\r\n        }\r\n        else {\r\n            this._uploadNowQueue.push(callback);\r\n        }\r\n    };\r\n    /**\r\n     * Pause the tranmission of any requests\r\n     */\r\n    AWTQueueManager.prototype.pauseTransmission = function () {\r\n        this._paused = true;\r\n        this._httpManager.pause();\r\n        if (this.shouldDropEventsOnPause) {\r\n            this._queueSize -= (this._inboundQueues[Enums_1.AWTEventPriority.High][0].length +\r\n                this._inboundQueues[Enums_1.AWTEventPriority.Normal][0].length + this._inboundQueues[Enums_1.AWTEventPriority.Low][0].length);\r\n            this._inboundQueues[Enums_1.AWTEventPriority.High][0] = [];\r\n            this._inboundQueues[Enums_1.AWTEventPriority.Normal][0] = [];\r\n            this._inboundQueues[Enums_1.AWTEventPriority.Low][0] = [];\r\n            this._httpManager.removeQueuedRequests();\r\n        }\r\n    };\r\n    /**\r\n     * Resumes transmission of events.\r\n     */\r\n    AWTQueueManager.prototype.resumeTransmission = function () {\r\n        this._paused = false;\r\n        this._httpManager.resume();\r\n    };\r\n    /**\r\n     * Determines whether events in the queues should be dropped when transmission is paused.\r\n     */\r\n    AWTQueueManager.prototype.shouldDropEventsOnPause = function (shouldDropEventsOnPause) {\r\n        this._shouldDropEventsOnPause = shouldDropEventsOnPause;\r\n    };\r\n    /**\r\n     * Remove the first queues for all priorities in the inbound queues map. This is called\r\n     * when transmission manager has finished flushing the events in the old queues. We now make\r\n     * the next queue the primary queue.\r\n     */\r\n    AWTQueueManager.prototype._removeFirstQueues = function () {\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High].shift();\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal].shift();\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low].shift();\r\n    };\r\n    /**\r\n     * Add empty queues for all priorities in the inbound queues map. This is called\r\n     * when Transmission Manager is being flushed. This ensures that new events added\r\n     * after flush are stored separately till we flush the current events.\r\n     */\r\n    AWTQueueManager.prototype._addEmptyQueues = function () {\r\n        this._inboundQueues[Enums_1.AWTEventPriority.High].push([]);\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Normal].push([]);\r\n        this._inboundQueues[Enums_1.AWTEventPriority.Low].push([]);\r\n    };\r\n    AWTQueueManager.prototype._addEventToProperQueue = function (event) {\r\n        if (!this._paused || !this._shouldDropEventsOnPause) {\r\n            this._queueSize++;\r\n            this._inboundQueues[event.priority][this._inboundQueues[event.priority].length - 1].push(event);\r\n        }\r\n    };\r\n    AWTQueueManager.prototype._dropEventWithPriorityOrLess = function (priority) {\r\n        var currentPriority = Enums_1.AWTEventPriority.Low;\r\n        while (currentPriority <= priority) {\r\n            if (this._inboundQueues[currentPriority][this._inboundQueues[currentPriority].length - 1].length > 0) {\r\n                //Dropped oldest event from lowest possible priority\r\n                AWTNotificationManager_1.default.eventsDropped([this._inboundQueues[currentPriority][this._inboundQueues[currentPriority].length - 1].shift()], Enums_1.AWTEventsDroppedReason.QueueFull);\r\n                return true;\r\n            }\r\n            currentPriority++;\r\n        }\r\n        return false;\r\n    };\r\n    AWTQueueManager.prototype._batchEvents = function (priority) {\r\n        var priorityToProcess = Enums_1.AWTEventPriority.High;\r\n        while (priorityToProcess >= priority) {\r\n            while (this._inboundQueues[priorityToProcess][0].length > 0) {\r\n                var event_1 = this._inboundQueues[priorityToProcess][0].pop();\r\n                this._queueSize--;\r\n                this._batcher.addEventToBatch(event_1);\r\n            }\r\n            priorityToProcess--;\r\n        }\r\n        this._batcher.flushBatch();\r\n    };\r\n    AWTQueueManager.prototype._uploadNow = function (callback) {\r\n        var _this = this;\r\n        if (this.hasEvents()) {\r\n            this.sendEventsForPriorityAndAbove(Enums_1.AWTEventPriority.Low);\r\n        }\r\n        this._checkOutboundQueueEmptyAndSent(function () {\r\n            //Move the next queues to be primary\r\n            _this._removeFirstQueues();\r\n            if (callback !== null && callback !== undefined) {\r\n                callback();\r\n            }\r\n            if (_this._uploadNowQueue.length > 0) {\r\n                setTimeout(function () { return _this._uploadNow(_this._uploadNowQueue.shift()); }, 0);\r\n            }\r\n            else {\r\n                _this._isCurrentlyUploadingNow = false;\r\n                if (_this.hasEvents()) {\r\n                    AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n                }\r\n            }\r\n        });\r\n    };\r\n    AWTQueueManager.prototype._checkOutboundQueueEmptyAndSent = function (callback) {\r\n        var _this = this;\r\n        if (this._httpManager.isCompletelyIdle()) {\r\n            callback();\r\n        }\r\n        else {\r\n            setTimeout(function () { return _this._checkOutboundQueueEmptyAndSent(callback); }, UploadNowCheckTimer);\r\n        }\r\n    };\r\n    return AWTQueueManager;\r\n}());\r\nexports.default = AWTQueueManager;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = require(\"../common/Enums\");\r\nvar AWTSerializer_1 = require(\"../common/AWTSerializer\");\r\nvar AWTRetryPolicy_1 = require(\"../common/AWTRetryPolicy\");\r\nvar AWTKillSwitch_1 = require(\"../common/AWTKillSwitch\");\r\nvar AWTClockSkewManager_1 = require(\"../common/AWTClockSkewManager\");\r\nvar Version = require(\"./Version\");\r\nvar Utils = require(\"../common/Utils\");\r\nvar AWTNotificationManager_1 = require(\"../common/AWTNotificationManager\");\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\nvar MaxConnections = 2;\r\nvar MaxRetries = 1;\r\nvar Method = 'POST';\r\n/**\r\n * Class managing the sending of requests.\r\n */\r\nvar AWTHttpManager = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     * @param {object} requestQueue   - The queue that contains the requests to be sent.\r\n     * @param {string} collectorUrl   - The collector url to which the requests must be sent.\r\n     * @param {object} _queueManager  - The queue manager that we should add requests back to if needed.\r\n     * @param {object} _httpInterface - The http interface that should be used to send HTTP requests.\r\n     */\r\n    function AWTHttpManager(_requestQueue, collectorUrl, _queueManager, _httpInterface) {\r\n        var _this = this;\r\n        this._requestQueue = _requestQueue;\r\n        this._queueManager = _queueManager;\r\n        this._httpInterface = _httpInterface;\r\n        this._urlString = '?qsp=true&content-type=application%2Fbond-compact-binary&client-id=NO_AUTH&sdk-version='\r\n            + Version.FullVersionString;\r\n        this._killSwitch = new AWTKillSwitch_1.default();\r\n        this._paused = false;\r\n        this._clockSkewManager = new AWTClockSkewManager_1.default();\r\n        this._useBeacons = false;\r\n        this._activeConnections = 0;\r\n        if (!Utils.isUint8ArrayAvailable()) {\r\n            this._urlString += '&content-encoding=base64';\r\n        }\r\n        this._urlString = collectorUrl + this._urlString;\r\n        if (!this._httpInterface) {\r\n            this._useBeacons = !Utils.isReactNative(); //Only use beacons if not running in React Native\r\n            this._httpInterface = {\r\n                sendPOST: function (urlString, data, ontimeout, onerror, onload, sync) {\r\n                    if (Utils.useXDomainRequest()) {\r\n                        var xdr = new XDomainRequest();\r\n                        xdr.open(Method, urlString);\r\n                        //can't get the status code in xdr.\r\n                        xdr.onload = function () {\r\n                            // we will assume onload means the request succeeded.\r\n                            onload(200, null);\r\n                        };\r\n                        xdr.onerror = function () {\r\n                            // we will assume onerror means we need to drop the events.\r\n                            onerror(400, null);\r\n                        };\r\n                        xdr.ontimeout = function () {\r\n                            // we will assume ontimeout means we need to retry the events.\r\n                            ontimeout(500, null);\r\n                        };\r\n                        xdr.send(data);\r\n                    }\r\n                    else if (Utils.isReactNative()) {\r\n                        //Use the fetch API to send events in React Native\r\n                        fetch(urlString, {\r\n                            body: data,\r\n                            method: Method\r\n                        }).then(function (response) {\r\n                            var headerMap = {};\r\n                            if (response.headers) {\r\n                                response.headers.forEach(function (value, name) {\r\n                                    headerMap[name] = value;\r\n                                });\r\n                            }\r\n                            onload(response.status, headerMap);\r\n                        }).catch(function (error) {\r\n                            //In case there is an error in the request. Set the status to 0\r\n                            //so that the events can be retried later.\r\n                            onerror(0, {});\r\n                        });\r\n                    }\r\n                    else {\r\n                        var xhr_1 = new XMLHttpRequest();\r\n                        xhr_1.open(Method, urlString, !sync);\r\n                        xhr_1.onload = function () {\r\n                            onload(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.onerror = function () {\r\n                            onerror(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.ontimeout = function () {\r\n                            ontimeout(xhr_1.status, _this._convertAllHeadersToMap(xhr_1.getAllResponseHeaders()));\r\n                        };\r\n                        xhr_1.send(data);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Check if there is an idle connection overwhich we can send a request.\r\n     * @return {boolean} True if there is an idle connection, false otherwise.\r\n     */\r\n    AWTHttpManager.prototype.hasIdleConnection = function () {\r\n        return this._activeConnections < MaxConnections;\r\n    };\r\n    /**\r\n     * Send requests in the request queue up if there is an idle connection, sending is\r\n     * not pause and clock skew manager allows sending request.\r\n     */\r\n    AWTHttpManager.prototype.sendQueuedRequests = function () {\r\n        while (this.hasIdleConnection() && !this._paused && this._requestQueue.length > 0\r\n            && this._clockSkewManager.allowRequestSending()) {\r\n            this._activeConnections++;\r\n            this._sendRequest(this._requestQueue.shift(), 0, false);\r\n        }\r\n        //No more requests to send, tell TPM to try to schedule timer\r\n        //in case it was waiting for idle connections\r\n        if (this.hasIdleConnection()) {\r\n            AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n        }\r\n    };\r\n    /**\r\n     * Check if there are no active requests being sent.\r\n     * @return {boolean} True if idle, false otherwise.\r\n     */\r\n    AWTHttpManager.prototype.isCompletelyIdle = function () {\r\n        return this._activeConnections === 0;\r\n    };\r\n    /**\r\n     * Queue all the remaning requests to be sent. The requests will be\r\n     * sent using HTML5 Beacons if they are available.\r\n     */\r\n    AWTHttpManager.prototype.teardown = function () {\r\n        while (this._requestQueue.length > 0) {\r\n            this._sendRequest(this._requestQueue.shift(), 0, true);\r\n        }\r\n    };\r\n    /**\r\n     * Pause the sending of requests. No new requests will be sent.\r\n     */\r\n    AWTHttpManager.prototype.pause = function () {\r\n        this._paused = true;\r\n    };\r\n    /**\r\n     * Resume the sending of requests.\r\n     */\r\n    AWTHttpManager.prototype.resume = function () {\r\n        this._paused = false;\r\n        this.sendQueuedRequests();\r\n    };\r\n    /**\r\n     * Removes any pending requests to be sent.\r\n     */\r\n    AWTHttpManager.prototype.removeQueuedRequests = function () {\r\n        this._requestQueue.length = 0;\r\n    };\r\n    /**\r\n     * Sends a request synchronously to the Aria collector. This api is used to send\r\n     * a request containing a single immediate event.\r\n     *\r\n     * @param request - The request to be sent.\r\n     * @param token   - The token used to send the request.\r\n     */\r\n    AWTHttpManager.prototype.sendSynchronousRequest = function (request, token) {\r\n        //This will not take into account the max connections restriction. Since this is sync, we can \r\n        //only send one of this request at a time and thus should not worry about multiple connections \r\n        //being used to send synchronoush events.\r\n        if (this._paused) {\r\n            //If paused then convert to High priority. It will be added back to queue in _sendRequest\r\n            request[token][0].priority = Enums_1.AWTEventPriority.High;\r\n        }\r\n        //Increment active connection since we are still going to use a connection to send the request.\r\n        this._activeConnections++;\r\n        //For sync requests we will not wait for the clock skew. \r\n        this._sendRequest(request, 0, false, true);\r\n    };\r\n    AWTHttpManager.prototype._sendRequest = function (request, retryCount, isTeardown, isSynchronous) {\r\n        var _this = this;\r\n        if (isSynchronous === void 0) { isSynchronous = false; }\r\n        if (this._paused) {\r\n            this._activeConnections--;\r\n            this._queueManager.addBackRequest(request);\r\n            return;\r\n        }\r\n        var tokenCount = 0;\r\n        var apikey = '';\r\n        for (var token in request) {\r\n            if (request.hasOwnProperty(token)) {\r\n                if (!this._killSwitch.isTenantKilled(token)) {\r\n                    if (apikey.length > 0) {\r\n                        apikey += ',';\r\n                    }\r\n                    apikey += token;\r\n                    tokenCount++;\r\n                }\r\n                else {\r\n                    AWTNotificationManager_1.default.eventsRejected(request[token], Enums_1.AWTEventsRejectedReason.KillSwitch);\r\n                    delete request[token];\r\n                }\r\n            }\r\n        }\r\n        if (tokenCount > 0) {\r\n            var payloadResult = AWTSerializer_1.default.getPayloadBlob(request, tokenCount);\r\n            if (payloadResult.remainingRequest) {\r\n                this._requestQueue.push(payloadResult.remainingRequest);\r\n            }\r\n            var urlString = this._urlString + '&x-apikey=' + apikey + '&client-time-epoch-millis='\r\n                + Date.now().toString();\r\n            if (this._clockSkewManager.shouldAddClockSkewHeaders()) {\r\n                urlString = urlString + '&time-delta-to-apply-millis=' + this._clockSkewManager.getClockSkewHeaderValue();\r\n            }\r\n            var data = void 0;\r\n            if (!Utils.isUint8ArrayAvailable()) {\r\n                data = AWTSerializer_1.default.base64Encode(payloadResult.payloadBlob);\r\n            }\r\n            else {\r\n                data = new Uint8Array(payloadResult.payloadBlob);\r\n            }\r\n            for (var token in request) {\r\n                if (request.hasOwnProperty(token)) {\r\n                    //Increment the send attempt count\r\n                    for (var i = 0; i < request[token].length; ++i) {\r\n                        request[token][i].sendAttempt > 0 ? request[token][i].sendAttempt++ : request[token][i].sendAttempt = 1;\r\n                    }\r\n                }\r\n            }\r\n            //beacons will not be used if an http interface was passed by the customer\r\n            if (this._useBeacons && isTeardown && Utils.isBeaconsSupported()) {\r\n                if (navigator.sendBeacon(urlString, data)) {\r\n                    //Request sent via beacon.\r\n                    return;\r\n                }\r\n            }\r\n            //Send sync requests if the request is immediate or we are tearing down telemetry.\r\n            this._httpInterface.sendPOST(urlString, data, function (status, headers) {\r\n                _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount, isTeardown, isSynchronous);\r\n            }, function (status, headers) {\r\n                _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount, isTeardown, isSynchronous);\r\n            }, function (status, headers) {\r\n                _this._retryRequestIfNeeded(status, headers, request, tokenCount, apikey, retryCount, isTeardown, isSynchronous);\r\n            }, isTeardown || isSynchronous);\r\n        }\r\n        else if (!isTeardown) {\r\n            this._handleRequestFinished(null, {}, isTeardown, isSynchronous);\r\n        }\r\n    };\r\n    AWTHttpManager.prototype._retryRequestIfNeeded = function (status, headers, request, tokenCount, apikey, retryCount, isTeardown, isSynchronous) {\r\n        var _this = this;\r\n        var shouldRetry = true;\r\n        if (typeof status !== 'undefined') {\r\n            if (headers) {\r\n                var killedTokens = this._killSwitch.setKillSwitchTenants(headers['kill-tokens'], headers['kill-duration-seconds']);\r\n                this._clockSkewManager.setClockSkew(headers['time-delta-millis']);\r\n                for (var i = 0; i < killedTokens.length; ++i) {\r\n                    AWTNotificationManager_1.default.eventsRejected(request[killedTokens[i]], Enums_1.AWTEventsRejectedReason.KillSwitch);\r\n                    delete request[killedTokens[i]];\r\n                    tokenCount--;\r\n                }\r\n            }\r\n            else {\r\n                this._clockSkewManager.setClockSkew(null);\r\n            }\r\n            if (status === 200) {\r\n                this._handleRequestFinished(true, request, isTeardown, isSynchronous);\r\n                return;\r\n            }\r\n            if (!AWTRetryPolicy_1.default.shouldRetryForStatus(status) || tokenCount <= 0) {\r\n                shouldRetry = false;\r\n            }\r\n        }\r\n        if (shouldRetry) {\r\n            if (isSynchronous) {\r\n                //Synchronous events only contain a single event so the apiKey is equal to the token for that event.\r\n                //Convert the event to High priority and add back to queue to be sent as High event.\r\n                this._activeConnections--;\r\n                request[apikey][0].priority = Enums_1.AWTEventPriority.High;\r\n                this._queueManager.addBackRequest(request);\r\n            }\r\n            else if (retryCount < MaxRetries) {\r\n                for (var token in request) {\r\n                    if (request.hasOwnProperty(token)) {\r\n                        AWTNotificationManager_1.default.eventsRetrying(request[token]);\r\n                    }\r\n                }\r\n                setTimeout(function () { return _this._sendRequest(request, retryCount + 1, false); }, AWTRetryPolicy_1.default.getMillisToBackoffForRetry(retryCount));\r\n            }\r\n            else {\r\n                this._activeConnections--;\r\n                AWTTransmissionManagerCore_1.default.backOffTransmission();\r\n                this._queueManager.addBackRequest(request);\r\n            }\r\n        }\r\n        else {\r\n            this._handleRequestFinished(false, request, isTeardown, isSynchronous);\r\n        }\r\n    };\r\n    AWTHttpManager.prototype._handleRequestFinished = function (success, request, isTeardown, isSynchronous) {\r\n        if (success) {\r\n            AWTTransmissionManagerCore_1.default.clearBackOff();\r\n        }\r\n        for (var token in request) {\r\n            if (request.hasOwnProperty(token)) {\r\n                if (success) {\r\n                    AWTNotificationManager_1.default.eventsSent(request[token]);\r\n                }\r\n                else {\r\n                    AWTNotificationManager_1.default.eventsDropped(request[token], Enums_1.AWTEventsDroppedReason.NonRetryableStatus);\r\n                }\r\n            }\r\n        }\r\n        this._activeConnections--;\r\n        if (!isSynchronous && !isTeardown) {\r\n            //Only continue sending more requests as long as the current request was not an synchronous request or sent\r\n            //during teardown. We want to return after just sending this one sync request.\r\n            this.sendQueuedRequests();\r\n        }\r\n    };\r\n    /**\r\n     * Converts the XHR getAllResponseHeaders to a map containing the header key and value.\r\n     */\r\n    AWTHttpManager.prototype._convertAllHeadersToMap = function (headersString) {\r\n        var headers = {};\r\n        if (headersString) {\r\n            var headersArray = headersString.split('\\n');\r\n            for (var i = 0; i < headersArray.length; ++i) {\r\n                var header = headersArray[i].split(': ');\r\n                headers[header[0]] = header[1];\r\n            }\r\n        }\r\n        return headers;\r\n    };\r\n    return AWTHttpManager;\r\n}());\r\nexports.default = AWTHttpManager;\r\n","\"use strict\";\r\n/**\r\n* microsoft.bond.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar bond_const_1 = require(\"./bond_const\");\r\nexports._BondDataType = bond_const_1._BondDataType;\r\nvar _Encoding = require(\"./microsoft.bond.encoding\");\r\nexports._Encoding = _Encoding;\r\nvar IO = require(\"./microsoft.bond.io\");\r\nexports.IO = IO;\r\nvar microsoft_bond_primitives_1 = require(\"./microsoft.bond.primitives\");\r\nexports.Int64 = microsoft_bond_primitives_1.Int64;\r\nexports.UInt64 = microsoft_bond_primitives_1.UInt64;\r\nexports.Number = microsoft_bond_primitives_1.Number;\r\nvar CompactBinaryProtocolWriter = /** @class */ (function () {\r\n    function CompactBinaryProtocolWriter(stream) {\r\n        this._stream = stream;\r\n    }\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteBlob = function (blob) {\r\n        this._stream._Write(blob, 0, blob.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteBool = function (value) {\r\n        this._stream._WriteByte(value ? 1 : 0);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteContainerBegin = function (size, elementType) {\r\n        this._WriteUInt8(elementType);\r\n        this._WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteMapContainerBegin = function (size, keyType, valueType) {\r\n        this._WriteUInt8(keyType);\r\n        this._WriteUInt8(valueType);\r\n        this._WriteUInt32(size);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteDouble = function (value) {\r\n        var array = _Encoding._Double_GetBytes(value);\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteFieldBegin = function (type, id, metadata) {\r\n        if (id <= 5) {\r\n            this._stream._WriteByte(type | (id << 5));\r\n        }\r\n        else if (id <= 0xff) {\r\n            this._stream._WriteByte(type | (6 << 5));\r\n            this._stream._WriteByte(id);\r\n        }\r\n        else {\r\n            this._stream._WriteByte(type | (7 << 5));\r\n            this._stream._WriteByte(id);\r\n            this._stream._WriteByte(id >> 8);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteInt32 = function (value) {\r\n        value = _Encoding._Zigzag_EncodeZigzag32(value);\r\n        this._WriteUInt32(value);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteInt64 = function (value) {\r\n        this._WriteUInt64(_Encoding._Zigzag_EncodeZigzag64(value));\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteString = function (value) {\r\n        if (value === '') {\r\n            this._WriteUInt32(0 /*length*/);\r\n        }\r\n        else {\r\n            var array = _Encoding._Utf8_GetBytes(value);\r\n            this._WriteUInt32(array.length);\r\n            this._stream._Write(array, 0, array.length);\r\n        }\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteStructEnd = function (isBase) {\r\n        this._WriteUInt8(isBase ? bond_const_1._BondDataType._BT_STOP_BASE : bond_const_1._BondDataType._BT_STOP);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt32 = function (value) {\r\n        var array = _Encoding._Varint_GetBytes(microsoft_bond_primitives_1.Number._ToUInt32(value));\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt64 = function (value) {\r\n        var array = _Encoding._Varint64_GetBytes(value);\r\n        this._stream._Write(array, 0, array.length);\r\n    };\r\n    /*override*/\r\n    CompactBinaryProtocolWriter.prototype._WriteUInt8 = function (value) {\r\n        this._stream._WriteByte(microsoft_bond_primitives_1.Number._ToUInt8(value));\r\n    };\r\n    return CompactBinaryProtocolWriter;\r\n}());\r\nexports.CompactBinaryProtocolWriter = CompactBinaryProtocolWriter;\r\n","\"use strict\";\r\n/**\r\n* bond_const.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Tool     : bondc, Version=3.0.1, Build=bond-git.debug.not\r\n//     Template : Microsoft.Bond.Rules.dll#TypeScript.tt\r\n//     File     : bond_const.ts\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost when\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\nvar _BondDataType;\r\n(function (_BondDataType) {\r\n    _BondDataType[_BondDataType[\"_BT_STOP\"] = 0] = \"_BT_STOP\";\r\n    _BondDataType[_BondDataType[\"_BT_STOP_BASE\"] = 1] = \"_BT_STOP_BASE\";\r\n    _BondDataType[_BondDataType[\"_BT_BOOL\"] = 2] = \"_BT_BOOL\";\r\n    _BondDataType[_BondDataType[\"_BT_DOUBLE\"] = 8] = \"_BT_DOUBLE\";\r\n    _BondDataType[_BondDataType[\"_BT_STRING\"] = 9] = \"_BT_STRING\";\r\n    _BondDataType[_BondDataType[\"_BT_STRUCT\"] = 10] = \"_BT_STRUCT\";\r\n    _BondDataType[_BondDataType[\"_BT_LIST\"] = 11] = \"_BT_LIST\";\r\n    _BondDataType[_BondDataType[\"_BT_MAP\"] = 13] = \"_BT_MAP\";\r\n    _BondDataType[_BondDataType[\"_BT_INT32\"] = 16] = \"_BT_INT32\";\r\n    _BondDataType[_BondDataType[\"_BT_INT64\"] = 17] = \"_BT_INT64\";\r\n})(_BondDataType = exports._BondDataType || (exports._BondDataType = {}));\r\n","\"use strict\";\r\n/**\r\n* microsoft.bond.encoding.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar microsoft_bond_primitives_1 = require(\"./microsoft.bond.primitives\");\r\nvar microsoft_bond_floatutils_1 = require(\"./microsoft.bond.floatutils\");\r\nvar microsoft_bond_utils_1 = require(\"./microsoft.bond.utils\");\r\nfunction _Utf8_GetBytes(value) {\r\n    var array = [];\r\n    for (var i = 0; i < value.length; ++i) {\r\n        var char = value.charCodeAt(i);\r\n        if (char < 0x80) {\r\n            array.push(char);\r\n        }\r\n        else if (char < 0x800) {\r\n            array.push(0xc0 | (char >> 6), 0x80 | (char & 0x3f));\r\n        }\r\n        else if (char < 0xd800 || char >= 0xe000) {\r\n            array.push(0xe0 | (char >> 12), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n        }\r\n        else {\r\n            char = 0x10000 + (((char & 0x3ff) << 10) | (value.charCodeAt(++i) & 0x3ff));\r\n            array.push(0xf0 | (char >> 18), 0x80 | ((char >> 12) & 0x3f), 0x80 | ((char >> 6) & 0x3f), 0x80 | (char & 0x3f));\r\n        }\r\n    }\r\n    return array;\r\n}\r\nexports._Utf8_GetBytes = _Utf8_GetBytes;\r\nfunction _Base64_GetString(inArray) {\r\n    var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n    var output = [];\r\n    var paddingBytes = inArray.length % 3;\r\n    var toBase64 = function (num) {\r\n        return [lookup.charAt((num >> 18) & 0x3F),\r\n            lookup.charAt((num >> 12) & 0x3F),\r\n            lookup.charAt((num >> 6) & 0x3F),\r\n            lookup.charAt(num & 0x3F)].join('');\r\n    };\r\n    for (var i = 0, length_1 = inArray.length - paddingBytes; i < length_1; i += 3) {\r\n        var temp = (inArray[i] << 16) + (inArray[i + 1] << 8) + (inArray[i + 2]);\r\n        output.push(toBase64(temp));\r\n    }\r\n    switch (paddingBytes) {\r\n        case 1:\r\n            var temp = inArray[inArray.length - 1];\r\n            output.push(lookup.charAt(temp >> 2));\r\n            output.push(lookup.charAt((temp << 4) & 0x3F));\r\n            output.push('==');\r\n            break;\r\n        case 2:\r\n            var temp2 = (inArray[inArray.length - 2] << 8) + (inArray[inArray.length - 1]);\r\n            output.push(lookup.charAt(temp2 >> 10));\r\n            output.push(lookup.charAt((temp2 >> 4) & 0x3F));\r\n            output.push(lookup.charAt((temp2 << 2) & 0x3F));\r\n            output.push('=');\r\n            break;\r\n    }\r\n    return output.join('');\r\n}\r\nexports._Base64_GetString = _Base64_GetString;\r\nfunction _Varint_GetBytes(value) {\r\n    var array = [];\r\n    while (value & 0xffffff80) {\r\n        array.push((value & 0x7f) | 0x80);\r\n        value >>>= 7;\r\n    }\r\n    array.push(value & 0x7f);\r\n    return array;\r\n}\r\nexports._Varint_GetBytes = _Varint_GetBytes;\r\nfunction _Varint64_GetBytes(value) {\r\n    var low = value.low;\r\n    var high = value.high;\r\n    var array = [];\r\n    while (high || (0xffffff80 & low)) {\r\n        array.push((low & 0x7f) | 0x80);\r\n        low = ((high & 0x7f) << 25) | (low >>> 7);\r\n        high >>>= 7;\r\n    }\r\n    array.push(low & 0x7f);\r\n    return array;\r\n}\r\nexports._Varint64_GetBytes = _Varint64_GetBytes;\r\n// Note: see notes of Float.\r\nfunction _Double_GetBytes(value) {\r\n    if (microsoft_bond_utils_1.BrowserChecker._IsDataViewSupport()) {\r\n        var view = new DataView(new ArrayBuffer(8));\r\n        view.setFloat64(0, value, true /*littleEndian*/);\r\n        var array = [];\r\n        for (var i = 0; i < 8; ++i) {\r\n            array.push(view.getUint8(i));\r\n        }\r\n        return array;\r\n    }\r\n    else {\r\n        return microsoft_bond_floatutils_1.FloatUtils._ConvertNumberToArray(value, true /*isDouble*/);\r\n    }\r\n}\r\nexports._Double_GetBytes = _Double_GetBytes;\r\nfunction _Zigzag_EncodeZigzag32(value) {\r\n    value = microsoft_bond_primitives_1.Number._ToInt32(value);\r\n    return ((value << 1) ^ (value >> (4 /*sizeof(int)*/ * 8 - 1)));\r\n}\r\nexports._Zigzag_EncodeZigzag32 = _Zigzag_EncodeZigzag32;\r\nfunction _Zigzag_EncodeZigzag64(value) {\r\n    var low = value.low;\r\n    var high = value.high;\r\n    var tmpH = (high << 1) | (low >>> 31);\r\n    var tmpL = low << 1;\r\n    if (high & 0x80000000) {\r\n        tmpH = ~tmpH;\r\n        tmpL = ~tmpL;\r\n    }\r\n    var res = new microsoft_bond_primitives_1.UInt64('0');\r\n    res.low = tmpL;\r\n    res.high = tmpH;\r\n    return res;\r\n}\r\nexports._Zigzag_EncodeZigzag64 = _Zigzag_EncodeZigzag64;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* microsoft.bond.floatutils.ts\r\n* Copyright: Microsoft 2016\r\n*\r\n* This class will be used to convert float/double to byte array on browsers which don't support html5.\r\n*\r\n* Format: IEEE-754, littleEndian, http://en.wikipedia.org/wiki/IEEE_754-1985\r\n*\r\n*  \\note\r\n* 1. Don't have negative zero. All zero will be positive zero.\r\n* 2. If the buffer array passed to ConvertArrayToFloat() is actual NaN or Inifinity value,\r\n*    exception will be raised.\r\n*/\r\nvar FloatUtils = /** @class */ (function () {\r\n    function FloatUtils() {\r\n    }\r\n    FloatUtils._ConvertNumberToArray = function (num, isDouble) {\r\n        if (!num) {\r\n            return isDouble ? this._doubleZero : this._floatZero;\r\n        }\r\n        var exponentBits = isDouble ? 11 : 8;\r\n        var precisionBits = isDouble ? 52 : 23;\r\n        // follow IEEE-754, exponent bias is 2^(k-1)-1 where k is the number of bits\r\n        // in the exponent: http://en.wikipedia.org/wiki/Exponent_bias\r\n        var bias = (1 << (exponentBits - 1)) - 1;\r\n        var minExponent = 1 - bias;\r\n        var maxExponent = bias;\r\n        var sign = num < 0 ? 1 : 0;\r\n        num = Math.abs(num);\r\n        var intPart = Math.floor(num);\r\n        var floatPart = num - intPart;\r\n        var len = 2 * (bias + 2) + precisionBits;\r\n        var buffer = new Array(len);\r\n        var i = 0;\r\n        while (i < len) {\r\n            buffer[i++] = 0;\r\n        }\r\n        // caculate the intPart\r\n        i = bias + 2;\r\n        while (i && intPart) {\r\n            buffer[--i] = intPart % 2;\r\n            intPart = Math.floor(intPart / 2);\r\n        }\r\n        // caculate the floatPart\r\n        i = bias + 1;\r\n        while (i < len - 1 && floatPart > 0) {\r\n            floatPart *= 2;\r\n            if (floatPart >= 1) {\r\n                buffer[++i] = 1;\r\n                --floatPart;\r\n            }\r\n            else {\r\n                buffer[++i] = 0;\r\n            }\r\n        }\r\n        // find the first 1\r\n        var firstBit = 0;\r\n        while (firstBit < len && !buffer[firstBit]) {\r\n            firstBit++;\r\n        }\r\n        // caculate exponent\r\n        var exponent = bias + 1 - firstBit;\r\n        // caculate round\r\n        var lastBit = firstBit + precisionBits;\r\n        if (buffer[lastBit + 1]) {\r\n            for (i = lastBit; i > firstBit; --i) {\r\n                buffer[i] = 1 - buffer[i];\r\n                if (buffer) {\r\n                    break;\r\n                }\r\n            }\r\n            if (i === firstBit) {\r\n                ++exponent;\r\n            }\r\n        }\r\n        // check overflow\r\n        if (exponent > maxExponent || intPart) {\r\n            if (sign) {\r\n                return isDouble ? this._doubleNegInifinity : this._floatNegInifinity;\r\n            }\r\n            else {\r\n                return isDouble ? this._doubleInifinity : this._floatInifinity;\r\n            }\r\n        }\r\n        else if (exponent < minExponent) {\r\n            return isDouble ? this._doubleZero : this._floatZero;\r\n        }\r\n        // caculate the result\r\n        if (isDouble) {\r\n            var high = 0;\r\n            for (i = 0; i < 20; ++i) {\r\n                high = (high << 1) | buffer[++firstBit];\r\n            }\r\n            var low = 0;\r\n            for (; i < 52; ++i) {\r\n                low = (low << 1) | buffer[++firstBit];\r\n            }\r\n            high |= (exponent + bias) << 20;\r\n            high = (sign << 31) | (high & 0x7FFFFFFF);\r\n            var resArray = [low & 0xff, (low >> 8) & 0xff, (low >> 16) & 0xff, low >>> 24,\r\n                high & 0xff, (high >> 8) & 0xff, (high >> 16) & 0xff, high >>> 24];\r\n            return resArray;\r\n        }\r\n        else {\r\n            var result = 0;\r\n            for (i = 0; i < 23; ++i) {\r\n                result = (result << 1) | buffer[++firstBit];\r\n            }\r\n            result |= (exponent + bias) << 23;\r\n            result = (sign << 31) | (result & 0x7FFFFFFF);\r\n            var resArray = [result & 0xff, (result >> 8) & 0xff, (result >> 16) & 0xff, result >>> 24];\r\n            return resArray;\r\n        }\r\n    };\r\n    FloatUtils._floatZero = [0x00, 0x00, 0x00, 0x00];\r\n    FloatUtils._doubleZero = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\r\n    FloatUtils._floatInifinity = [0x00, 0x00, 0x80, 0x7F];\r\n    FloatUtils._floatNegInifinity = [0x00, 0x00, 0x80, 0xFF];\r\n    FloatUtils._doubleInifinity = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7f];\r\n    FloatUtils._doubleNegInifinity = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff];\r\n    return FloatUtils;\r\n}());\r\nexports.FloatUtils = FloatUtils;\r\n","\"use strict\";\r\n/**\r\n* microsoft.bond.utils.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar BrowserChecker = /** @class */ (function () {\r\n    function BrowserChecker() {\r\n    }\r\n    BrowserChecker._IsDataViewSupport = function () {\r\n        return typeof ArrayBuffer !== 'undefined' &&\r\n            typeof DataView !== 'undefined';\r\n    };\r\n    return BrowserChecker;\r\n}());\r\nexports.BrowserChecker = BrowserChecker;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* microsoft.bond.io.ts\r\n* Copyright: Microsoft 2016\r\n*/\r\nvar microsoft_bond_primitives_1 = require(\"./microsoft.bond.primitives\");\r\nvar MemoryStream = /** @class */ (function () {\r\n    function MemoryStream() {\r\n        this._buffer = [];\r\n    }\r\n    /*override*/\r\n    MemoryStream.prototype._WriteByte = function (byte) {\r\n        this._buffer.push(microsoft_bond_primitives_1.Number._ToByte(byte));\r\n    };\r\n    /*override*/\r\n    MemoryStream.prototype._Write = function (buffer, offset, count) {\r\n        while (count--) {\r\n            this._WriteByte(buffer[offset++]);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the array of unsigned bytes from which this stream was created.\r\n     */\r\n    MemoryStream.prototype._GetBuffer = function () {\r\n        return this._buffer;\r\n    };\r\n    return MemoryStream;\r\n}());\r\nexports.MemoryStream = MemoryStream;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTRetryPolicy.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nvar RandomizationLowerThreshold = 0.8;\r\nvar RandomizationUpperThreshold = 1.2;\r\nvar BaseBackoff = 3000;\r\nvar MaxBackoff = 120000;\r\n/**\r\n* Class for retry policy.\r\n*/\r\nvar AWTRetryPolicy = /** @class */ (function () {\r\n    function AWTRetryPolicy() {\r\n    }\r\n    /**\r\n     * Determine if the request should be retried for the given status code.\r\n     * The below expression reads that we should only retry for:\r\n     *      - HttpStatusCodes that are smaller than 300.\r\n     *      - HttpStatusCodes greater or equal to 500 (except for 501-NotImplement\r\n     *        and 505-HttpVersionNotSupport).\r\n     *      - HttpStatusCode 408-RequestTimeout.\r\n     * This is based on Microsoft.WindowsAzure.Storage.RetryPolicies.ExponentialRetry class\r\n     * @param {number} httpStatusCode - The status code returned for the request.\r\n     * @return {boolean} True if request should be retried, false otherwise.\r\n     */\r\n    AWTRetryPolicy.shouldRetryForStatus = function (httpStatusCode) {\r\n        /* */\r\n        return !((httpStatusCode >= 300 && httpStatusCode < 500 && httpStatusCode !== 408)\r\n            || (httpStatusCode === 501)\r\n            || (httpStatusCode === 505));\r\n    };\r\n    /**\r\n     * Gets the number of milliseconds to back off before retrying the request. The\r\n     * back off duration is exponentially scaled based on the number of retries already\r\n     * done for the request.\r\n     * @param {number} retriesSoFar - The number of times the request has already been retried.\r\n     * @return {number} The back off duration for the request before it can be retried.\r\n     */\r\n    AWTRetryPolicy.getMillisToBackoffForRetry = function (retriesSoFar) {\r\n        var waitDuration = 0;\r\n        var minBackoff = BaseBackoff * RandomizationLowerThreshold;\r\n        var maxBackoff = BaseBackoff * RandomizationUpperThreshold;\r\n        var randomBackoff = Math.floor(Math.random() * (maxBackoff - minBackoff)) + minBackoff;\r\n        waitDuration = Math.pow(4, retriesSoFar) * randomBackoff;\r\n        return Math.min(waitDuration, MaxBackoff);\r\n    };\r\n    return AWTRetryPolicy;\r\n}());\r\nexports.default = AWTRetryPolicy;\r\n","\"use strict\";\r\n/**\r\n* AWTKillSwitch.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar SecToMsMultiplier = 1000;\r\n/**\r\n* Class to stop certain tenants sending events.\r\n*/\r\nvar AWTKillSwitch = /** @class */ (function () {\r\n    function AWTKillSwitch() {\r\n        this._killedTokenDictionary = {};\r\n    }\r\n    /**\r\n     * Set the tenants that are to be killed along with the duration. If the duration is\r\n     * a special value identifying that the tokens are too be killed for only this request, then\r\n     * a array of tokens is returned.\r\n     * @param {string} killedTokens - Tokens that are too be marked to be killed.\r\n     * @param {string} killDuration - The duration for which the tokens are to be killed.\r\n     * @return {string[]} The tokens that are killed only for this given request.\r\n     */\r\n    AWTKillSwitch.prototype.setKillSwitchTenants = function (killTokens, killDuration) {\r\n        if (killTokens && killDuration) {\r\n            try {\r\n                var killedTokens = killTokens.split(',');\r\n                if (killDuration === 'this-request-only') {\r\n                    return killedTokens;\r\n                }\r\n                var durationMs = parseInt(killDuration, 10) * SecToMsMultiplier;\r\n                for (var i = 0; i < killedTokens.length; ++i) {\r\n                    this._killedTokenDictionary[killedTokens[i]] = Date.now() + durationMs;\r\n                }\r\n            }\r\n            catch (ex) {\r\n                return [];\r\n            }\r\n        }\r\n        return [];\r\n    };\r\n    /**\r\n     * Determing if the given tenant token has been killed for the moment.\r\n     * @param {string} tenantToken - The token to be checked.\r\n     * @return {boolean} True if token has been killed, false otherwise.\r\n     */\r\n    AWTKillSwitch.prototype.isTenantKilled = function (tenantToken) {\r\n        if (this._killedTokenDictionary[tenantToken] !== undefined && this._killedTokenDictionary[tenantToken] > Date.now()) {\r\n            return true;\r\n        }\r\n        delete this._killedTokenDictionary[tenantToken];\r\n        return false;\r\n    };\r\n    return AWTKillSwitch;\r\n}());\r\nexports.default = AWTKillSwitch;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n* AWTClockSkewManager.ts\r\n* @author Abhilash Panwar (abpanwar)\r\n* @copyright Microsoft 2017\r\n*/\r\n/**\r\n* Class to manage clock skew correction.\r\n*/\r\nvar AWTClockSkewManager = /** @class */ (function () {\r\n    function AWTClockSkewManager() {\r\n        this._allowRequestSending = true;\r\n        this._shouldAddClockSkewHeaders = true;\r\n        this._isFirstRequest = true;\r\n        this._clockSkewHeaderValue = 'use-collector-delta';\r\n        this._clockSkewSet = false;\r\n    }\r\n    /**\r\n     * Determine if the request can be sent.\r\n     * @return {boolean} True if requests can be sent, false otherwise.\r\n     */\r\n    AWTClockSkewManager.prototype.allowRequestSending = function () {\r\n        if (this._isFirstRequest && !this._clockSkewSet) {\r\n            this._isFirstRequest = false;\r\n            this._allowRequestSending = false;\r\n            return true;\r\n        }\r\n        return this._allowRequestSending;\r\n    };\r\n    /**\r\n     * Determine if clock skew headers should be added to the request.\r\n     * @return {boolean} True if clock skew headers should be added, false otherwise.\r\n     */\r\n    AWTClockSkewManager.prototype.shouldAddClockSkewHeaders = function () {\r\n        return this._shouldAddClockSkewHeaders;\r\n    };\r\n    /**\r\n     * Gets the clock skew header value.\r\n     * @return {string} The clock skew header value.\r\n     */\r\n    AWTClockSkewManager.prototype.getClockSkewHeaderValue = function () {\r\n        return this._clockSkewHeaderValue;\r\n    };\r\n    /**\r\n     * Sets the clock skew header value. Once clock skew is set this method\r\n     * is no-op.\r\n     * @param {string} timeDeltaInMillis - Time delta to be saved as the clock skew header value.\r\n     */\r\n    AWTClockSkewManager.prototype.setClockSkew = function (timeDeltaInMillis) {\r\n        if (!this._clockSkewSet) {\r\n            if (timeDeltaInMillis) {\r\n                this._clockSkewHeaderValue = timeDeltaInMillis;\r\n            }\r\n            else {\r\n                this._shouldAddClockSkewHeaders = false;\r\n            }\r\n            this._clockSkewSet = true;\r\n            this._allowRequestSending = true;\r\n        }\r\n    };\r\n    return AWTClockSkewManager;\r\n}());\r\nexports.default = AWTClockSkewManager;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Enums_1 = require(\"./Enums\");\r\n/**\r\n* Class to batch events.\r\n*/\r\nvar AWTRecordBatcher = /** @class */ (function () {\r\n    function AWTRecordBatcher(_outboundQueue, _maxNumberOfEvents) {\r\n        this._outboundQueue = _outboundQueue;\r\n        this._maxNumberOfEvents = _maxNumberOfEvents;\r\n        this._currentBatch = {};\r\n        this._currentNumEventsInBatch = 0;\r\n    }\r\n    /**\r\n     * Add an event to the current batch.\r\n     * If the priority of the event is synchronous, it will also return the batch containing only the synchronous event.\r\n     * @param {object} event - The event that needs to be batched.\r\n     * @return {object} If the priority of the event is synchronous, it will also return the batch containing only the synchronous event.\r\n     * Otherwise returns null.\r\n     */\r\n    AWTRecordBatcher.prototype.addEventToBatch = function (event) {\r\n        if (event.priority === Enums_1.AWTEventPriority.Immediate_sync) {\r\n            //batch immediate priority into its own batch\r\n            var immediateBatch = {};\r\n            immediateBatch[event.apiKey] = [event];\r\n            return immediateBatch;\r\n        }\r\n        else {\r\n            if (this._currentNumEventsInBatch >= this._maxNumberOfEvents) {\r\n                this.flushBatch();\r\n            }\r\n            if (this._currentBatch[event.apiKey] === undefined) {\r\n                this._currentBatch[event.apiKey] = [];\r\n            }\r\n            this._currentBatch[event.apiKey].push(event);\r\n            this._currentNumEventsInBatch++;\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Flush the current batch so that it is added to the outbound queue.\r\n     */\r\n    AWTRecordBatcher.prototype.flushBatch = function () {\r\n        if (this._currentNumEventsInBatch > 0) {\r\n            this._outboundQueue.push(this._currentBatch);\r\n            this._currentBatch = {};\r\n            this._currentNumEventsInBatch = 0;\r\n        }\r\n    };\r\n    /**\r\n     * Check if there is a batch that contains events.\r\n     */\r\n    AWTRecordBatcher.prototype.hasBatch = function () {\r\n        return this._currentNumEventsInBatch > 0;\r\n    };\r\n    return AWTRecordBatcher;\r\n}());\r\nexports.default = AWTRecordBatcher;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar AWTTransmissionManagerCore_1 = require(\"./AWTTransmissionManagerCore\");\r\n/**\r\n * The AWTTransmissionManager calss is a wrapper class that exposes some of the\r\n * Transmission functionality needed by other Aria modules.\r\n */\r\nvar AWTTransmissionManager = /** @class */ (function () {\r\n    function AWTTransmissionManager() {\r\n    }\r\n    /**\r\n     * Sets the event handler used by the tranmission manager.\r\n     * The default event handler is the Inbound queue manager. This handler\r\n     * is used to batch and send events to Aria. If you intend to send events\r\n     * to Aria please make sure that your event handler forwards events to the Inbound\r\n     * Queue Manager. You can retrieve the Inbound Queue Manager by calling\r\n     * getEventsHandler before you set your handler.\r\n     * @param {object} eventsHandler - An AWTEventHandler event handler used by the tranmission\r\n     * manager.\r\n     */\r\n    AWTTransmissionManager.setEventsHandler = function (eventsHandler) {\r\n        AWTTransmissionManagerCore_1.default.setEventsHandler(eventsHandler);\r\n    };\r\n    /**\r\n     * Gets the current event handler used by the tranmission manager.\r\n     * @return {object} An AWTEventHandler event handler used by the tranmission manager.\r\n     */\r\n    AWTTransmissionManager.getEventsHandler = function () {\r\n        return AWTTransmissionManagerCore_1.default.getEventsHandler();\r\n    };\r\n    /**\r\n     * The scheduleTimer method tries to schedule the waiting period after which events are sent. If there are\r\n     * no events to be sent, or if there is already a timer scheduled, or if the\r\n     * http manager doesn't have any idle connections, then this method is no-op.\r\n     */\r\n    AWTTransmissionManager.scheduleTimer = function () {\r\n        AWTTransmissionManagerCore_1.default.scheduleTimer();\r\n    };\r\n    return AWTTransmissionManager;\r\n}());\r\nexports.default = AWTTransmissionManager;\r\n"],"sourceRoot":""}